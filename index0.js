// Generated by purs bundle 0.14.9
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  var flap = function (dictFunctor) {
      return function (ff) {
          return function (x) {
              return map(dictFunctor)(function (f) {
                  return f(x);
              })(ff);
          };
      };
  };
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["flap"] = flap;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function () {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var semigroupUnit = {
      append: function (v) {
          return function (v1) {
              return Data_Unit.unit;
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return {
          append: function (f) {
              return function (g) {
                  return function (x) {
                      return append(dictSemigroup)(f(x))(g(x));
                  };
              };
          }
      };
  };
  exports["append"] = append;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                  
  var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function () {
          return Data_Semigroup.semigroupUnit;
      }
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return {
          mempty: function (v) {
              return mempty(dictMonoid);
          },
          Semigroup0: function () {
              return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
          }
      };
  };
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  var semigroupEffect = function (dictSemigroup) {
      return {
          append: Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup))
      };
  };
  var monoidEffect = function (dictMonoid) {
      return {
          mempty: $foreign.pureE(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function () {
              return semigroupEffect(dictMonoid.Semigroup0());
          }
      };
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["monoidEffect"] = monoidEffect;
  exports["foreachE"] = $foreign.foreachE;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadThrowEffect = {
      throwError: Effect_Exception.throwException,
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var monadErrorEffect = {
      catchError: Data_Function.flip(Effect_Exception.catchException),
      MonadThrow0: function () {
          return monadThrowEffect;
      }
  };
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $21 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($22) {
                  return $21(Data_Either.Left.create($22));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["try"] = $$try;
  exports["monadErrorEffect"] = monadErrorEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
      };
  };
  var monadExceptT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeExceptT(dictMonad);
          },
          Bind1: function () {
              return bindExceptT(dictMonad);
          }
      };
  };
  var bindExceptT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                      var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($92) {
                          return $91(Data_Either.Left.create($92));
                      };
                  })())(function (a) {
                      var v1 = k(a);
                      return v1;
                  }));
              };
          },
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var applyExceptT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeExceptT = function (dictMonad) {
      return {
          pure: (function () {
              var $93 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($94) {
                  return ExceptT($93(Data_Either.Right.create($94)));
              };
          })(),
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var monadThrowExceptT = function (dictMonad) {
      return {
          throwError: (function () {
              var $103 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($104) {
                  return ExceptT($103(Data_Either.Left.create($104)));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonad);
          }
      };
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return {
              alt: function (v) {
                  return function (v1) {
                      return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                          if (rm instanceof Data_Either.Right) {
                              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                          };
                          if (rm instanceof Data_Either.Left) {
                              return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                                  if (rn instanceof Data_Either.Right) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                                  };
                                  if (rn instanceof Data_Either.Left) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                              });
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                      });
                  };
              },
              Functor0: function () {
                  return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
              }
          };
      };
  };
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function () {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];                
  var wrap = Safe_Coerce.coerce;
  var unwrap = Safe_Coerce.coerce;
  var over = function () {
      return function () {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["over"] = over;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.State"] = $PS["Control.Monad.State"] || {};
  var exports = $PS["Control.Monad.State"];
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["evalState"] = evalState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];  
  var state = function (dict) {
      return dict.state;
  };
  exports["state"] = state;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = {
      map: function (f) {
          return function (m) {
              return new Tuple(m.value0, f(m.value1));
          };
      }
  };
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var functorStateT = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                      })(v(s));
                  };
              };
          }
      };
  };
  var monadStateT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeStateT(dictMonad);
          },
          Bind1: function () {
              return bindStateT(dictMonad);
          }
      };
  };
  var bindStateT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (f) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                          var v3 = f(v1.value0);
                          return v3(v1.value1);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var applyStateT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadStateT(dictMonad)),
          Functor0: function () {
              return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeStateT = function (dictMonad) {
      return {
          pure: function (a) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var monadStateStateT = function (dictMonad) {
      return {
          state: function (f) {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          },
          Monad0: function () {
              return monadStateT(dictMonad);
          }
      };
  };
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var oneOfMap = function (dictFoldable) {
      return function (dictPlus) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $314 = Control_Alt.alt(dictPlus.Alt0());
                  return function ($315) {
                      return $314(f($315));
                  };
              })())(Control_Plus.empty(dictPlus));
          };
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["oneOf"] = oneOf;
  exports["oneOfMap"] = oneOfMap;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parTraverse = function (dictParallel) {
      return function (dictTraversable) {
          return function (f) {
              var $22 = Control_Parallel_Class.sequential(dictParallel);
              var $23 = Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())((function () {
                  var $25 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($26) {
                      return $25(f($26));
                  };
              })());
              return function ($24) {
                  return $22($23($24));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parTraverse"] = parTraverse;
  exports["parSequence_"] = parSequence_;
})(PS);
(function(exports) {
    

  exports.thenImpl = function(promise) {
    return function(errCB) {
      return function(succCB) {
        return function() {
          promise.then(succCB, errCB);
        };
      };
    };
  };
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];              
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  var applyIdentity = {
      apply: function (v) {
          return function (v1) {
              return v(v1);
          };
      },
      Functor0: function () {
          return functorIdentity;
      }
  };
  var bindIdentity = {
      bind: function (v) {
          return function (f) {
              return f(v);
          };
      },
      Apply0: function () {
          return applyIdentity;
      }
  };
  var applicativeIdentity = {
      pure: Identity,
      Apply0: function () {
          return applyIdentity;
      }
  };
  var monadIdentity = {
      Applicative0: function () {
          return applicativeIdentity;
      },
      Bind1: function () {
          return bindIdentity;
      }
  };
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];                      
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var semigroupNonEmptyList = {
      append: function (v) {
          return function (as$prime) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
          };
      }
  };
  var unfoldable1List = {
      unfoldr1: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v.value1 instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value1.value0;
                              $copy_memo = new Cons(v.value0, memo);
                              return;
                          };
                          if (v.value1 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      }
  };
  var unfoldableList = {
      unfoldr: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value0.value1;
                              $copy_memo = new Cons(v.value0.value0, memo);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      },
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function () {
          return functorList;
      }
  };
  var plusList = {
      empty: Nil.value,
      Alt0: function () {
          return altList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
  exports["plusList"] = plusList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports._parAffAlt = function (aff1) {
    return function (aff2) {
      return Aff.ParAlt(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function () {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function () {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var functorParAff = {
      map: $foreign["_parAffMap"]
  };
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();
  var applyParAff = {
      apply: $foreign["_parAffApply"],
      Functor0: function () {
          return functorParAff;
      }
  };
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };
  var effectCanceler = (function () {
      var $42 = Effect_Class.liftEffect(monadEffectAff);
      return function ($43) {
          return Canceler(Data_Function["const"]($42($43)));
      };
  })();
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
              });
          });
      };
  };
  var parallelAff = {
      parallel: Unsafe_Coerce.unsafeCoerce,
      sequential: $foreign["_sequential"],
      Monad0: function () {
          return monadAff;
      },
      Applicative1: function () {
          return applicativeParAff;
      }
  };
  var applicativeParAff = {
      pure: (function () {
          var $50 = Control_Parallel_Class.parallel(parallelAff);
          var $51 = Control_Applicative.pure(applicativeAff);
          return function ($52) {
              return $50($51($52));
          };
      })(),
      Apply0: function () {
          return applyParAff;
      }
  };
  var semigroupCanceler = {
      append: function (v) {
          return function (v1) {
              return function (err) {
                  return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
              };
          };
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = {
      mempty: nonCanceler,
      Semigroup0: function () {
          return semigroupCanceler;
      }
  };   
  var altParAff = {
      alt: $foreign["_parAffAlt"],
      Functor0: function () {
          return functorParAff;
      }
  };
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["killFiber"] = killFiber;
  exports["joinFiber"] = joinFiber;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["altParAff"] = altParAff;
  exports["parallelAff"] = parallelAff;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $171 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($172) {
          return Data_List_Types.NonEmptyList($171($172));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();                                            
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Promise"] = $PS["Control.Promise"] || {};
  var exports = $PS["Control.Promise"];
  var $foreign = $PS["Control.Promise"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var toAff$prime = function (customCoerce) {
      return function (p) {
          return Effect_Aff.makeAff(function (cb) {
              return Data_Functor.voidRight(Effect.functorEffect)(Data_Monoid.mempty(Effect_Aff.monoidCanceler))($foreign.thenImpl(p)(function ($1) {
                  return cb(Data_Either.Left.create(customCoerce($1)))();
              })(function ($2) {
                  return cb(Data_Either.Right.create($2))();
              }));
          });
      };
  };
  var coerce = function (fn) {
      return Data_Either.either(function (v) {
          return Effect_Exception.error("Promise failed, couldn't extract JS Error or String");
      })(Control_Category.identity(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Effect_Exception.error)(Foreign.readString(Data_Identity.monadIdentity)(fn)))));
  };
  var toAff = toAff$prime(coerce);
  var toAffE = function (f) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(toAff);
  };
  exports["toAffE"] = toAffE;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeUnionFn = function(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  };
})(PS["Record.Unsafe.Union"] = PS["Record.Unsafe.Union"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record.Unsafe.Union"] = $PS["Record.Unsafe.Union"] || {};
  var exports = $PS["Record.Unsafe.Union"];
  var $foreign = $PS["Record.Unsafe.Union"];
  exports["unsafeUnionFn"] = $foreign.unsafeUnionFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];
  var set = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (l) {
                  return function (b) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                      };
                  };
              };
          };
      };
  };
  var merge = function () {
      return function () {
          return function (l) {
              return function (r) {
                  return Record_Unsafe_Union.unsafeUnionFn(l, r);
              };
          };
      };
  };
  var insert = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function () {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
  exports["set"] = set;
  exports["insert"] = insert;
  exports["merge"] = merge;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Symbol = $PS["Data.Symbol"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var insert = function () {
      return function () {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  var buildFromScratch = Data_Function.flip(build)({});
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return build(f(a))(b);
          };
      };
  };
  exports["buildFromScratch"] = buildFromScratch;
  exports["insert"] = insert;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["ConvertableOptions"] = $PS["ConvertableOptions"] || {};
  var exports = $PS["ConvertableOptions"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Record = $PS["Record"];
  var Record_Builder = $PS["Record.Builder"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var defaultsRecord = function () {
      return function () {
          return {
              defaults: Data_Function.flip(Record.merge()())
          };
      };
  };
  var defaults = function (dict) {
      return dict.defaults;
  };
  var convertRecordOptionsNil = {
      convertRecordOptions: function (v) {
          return function (v1) {
              return function (v2) {
                  return Control_Category.identity(Record_Builder.categoryBuilder);
              };
          };
      }
  };
  var convertRecordOptions = function (dict) {
      return dict.convertRecordOptions;
  };
  var convertOptionsWithDefaults = function (dict) {
      return dict.convertOptionsWithDefaults;
  };
  var convertOptionsRecord = function () {
      return function (dictConvertRecordOptions) {
          return {
              convertOptions: function (t) {
                  return function (i) {
                      return Record_Builder.buildFromScratch(convertRecordOptions(dictConvertRecordOptions)(t)(Type_Proxy["Proxy"].value)(i));
                  };
              }
          };
      };
  };
  var convertOptions = function (dict) {
      return dict.convertOptions;
  };
  var convertOptionsWithDefaultsRecord = function (dictConvertOptions) {
      return function (dictDefaults) {
          return {
              convertOptionsWithDefaults: function (t) {
                  return function (def) {
                      var $15 = defaults(dictDefaults)(def);
                      var $16 = convertOptions(dictConvertOptions)(t);
                      return function ($17) {
                          return $15($16($17));
                      };
                  };
              }
          };
      };
  };
  var convertOption = function (dict) {
      return dict.convertOption;
  };
  var convertRecordOptionsCons = function (dictConvertRecordOptions) {
      return function (dictConvertOption) {
          return function () {
              return function () {
                  return function () {
                      return function (dictIsSymbol) {
                          return {
                              convertRecordOptions: function (t) {
                                  return function (v) {
                                      return function (r) {
                                          return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(dictIsSymbol)(Type_Proxy["Proxy"].value)(convertOption(dictConvertOption)(t)(Type_Proxy["Proxy"].value)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(r))))(convertRecordOptions(dictConvertRecordOptions)(t)(Type_Proxy["Proxy"].value)(r));
                                      };
                                  };
                              }
                          };
                      };
                  };
              };
          };
      };
  };
  exports["convertOptionsWithDefaults"] = convertOptionsWithDefaults;
  exports["convertOptionsWithDefaultsRecord"] = convertOptionsWithDefaultsRecord;
  exports["convertRecordOptionsNil"] = convertRecordOptionsNil;
  exports["convertRecordOptionsCons"] = convertRecordOptionsCons;
  exports["convertOptionsRecord"] = convertOptionsRecord;
  exports["defaultsRecord"] = defaultsRecord;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);                                   
  var unsafeIndex = function () {
      return $foreign.unsafeIndexImpl;
  };
  var singleton = function (a) {
      return [ a ];
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["deleteBy"] = deleteBy;
  exports["zip"] = zip;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];             
  var NonEmptyArray = function (x) {
      return x;
  };
  exports["NonEmptyArray"] = NonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];               
  var unsafeFromArray = Data_Array_NonEmpty_Internal.NonEmptyArray;
  var toArray = function (v) {
      return v;
  };
  var singleton = function ($56) {
      return unsafeFromArray(Data_Array.singleton($56));
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 159, column 1 - line 159, column 58): " + [ xs.constructor.name ]);
  };                                         
  var adaptAny = function (f) {
      return function ($74) {
          return f(toArray($74));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeIndex = function () {
      return adaptAny(Data_Array.unsafeIndex());
  };
  exports["fromArray"] = fromArray;
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["unsafeIndex"] = unsafeIndex;
})(PS);
(function(exports) {
  "use strict";


  // Typed Arrays


  function newArray (f) {
    return function newArray_ (a,mb,mc) {
      if (mb === null)
        return new f(a);
      var l = a.byteLength;
      var eb = f.BYTES_PER_ELEMENT;
      var off = Math.min(l, mb>>>0);
      if (mc === null)
        return new f(a,off);
      var len = Math.min((l - off) / eb, mc);
      return new f(a,off,len);
    };
  }                                              
  exports.newUint8Array = newArray(Uint8Array);

  exports.toArrayImpl = function(a) {
      var l = a.length;
      var ret = new Array(l);
      for (var i = 0; i < l; i++)
          ret[i] = a[i];
      return ret;
  }
})(PS["Data.ArrayBuffer.Typed"] = PS["Data.ArrayBuffer.Typed"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.ArrayBuffer.Typed"] = $PS["Data.ArrayBuffer.Typed"] || {};
  var exports = $PS["Data.ArrayBuffer.Typed"];
  var $foreign = $PS["Data.ArrayBuffer.Typed"];
  var typedArrayUint8 = {
      create: $foreign.newUint8Array,
      BinaryValue0: function () {
          return undefined;
      }
  };
  var toArray = function (dictTypedArray) {
      return function (a) {
          return function () {
              return $foreign.toArrayImpl(a);
          };
      };
  };
  exports["toArray"] = toArray;
  exports["typedArrayUint8"] = typedArrayUint8;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0.0,
      mul: $foreign.numMul,
      one: 1.0
  };
  var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
  };
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var sub = function (dict) {
      return dict.sub;
  };
  var ringNumber = {
      sub: $foreign.numSub,
      Semiring0: function () {
          return Data_Semiring.semiringNumber;
      }
  };
  var ringInt = {
      sub: $foreign.intSub,
      Semiring0: function () {
          return Data_Semiring.semiringInt;
      }
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $60 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($60) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["compare"] = compare;
  exports["max"] = max;
  exports["abs"] = abs;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var commutativeRingNumber = {
      Ring0: function () {
          return Data_Ring.ringNumber;
      }
  };
  var commutativeRingInt = {
      Ring0: function () {
          return Data_Ring.ringInt;
      }
  };
  exports["commutativeRingInt"] = commutativeRingInt;
  exports["commutativeRingNumber"] = commutativeRingNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var unInstant = function (v) {
      return v;
  };
  exports["unInstant"] = unInstant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.DivisionRing"] = $PS["Data.DivisionRing"] || {};
  var exports = $PS["Data.DivisionRing"];
  var Data_Ring = $PS["Data.Ring"];
  var divisionringNumber = {
      recip: function (x) {
          return 1.0 / x;
      },
      Ring0: function () {
          return Data_Ring.ringNumber;
      }
  };
  exports["divisionringNumber"] = divisionringNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var mod = function (dict) {
      return dict.mod;
  };
  var euclideanRingNumber = {
      degree: function (v) {
          return 1;
      },
      div: $foreign.numDiv,
      mod: function (v) {
          return function (v1) {
              return 0.0;
          };
      },
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingNumber;
      }
  };
  var euclideanRingInt = {
      degree: $foreign.intDegree,
      div: $foreign.intDiv,
      mod: $foreign.intMod,
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingInt;
      }
  };
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
  exports["euclideanRingNumber"] = euclideanRingNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Field"] = $PS["Data.Field"] || {};
  var exports = $PS["Data.Field"];                         
  var field = function (dictEuclideanRing) {
      return function (dictDivisionRing) {
          return {
              EuclideanRing0: function () {
                  return dictEuclideanRing;
              },
              DivisionRing1: function () {
                  return dictDivisionRing;
              }
          };
      };
  };
  exports["field"] = field;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];
  var partitionMap = function (dict) {
      return dict.partitionMap;
  };
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  var filter = function (dict) {
      return dict.filter;
  };
  exports["partitionMap"] = partitionMap;
  exports["filterMap"] = filterMap;
  exports["filter"] = filter;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = {
      mapWithIndex: $foreign.mapWithIndexArray,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var from = function (dict) {
      return dict.from;
  };
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
})(PS);
(function(exports) {
  // This Source Code Form is subject to the terms of the Mozilla Public
  // License, v. 2.0. If a copy of the MPL was not distributed with this
  // file, You can obtain one at http://mozilla.org/MPL/2.0/.

  "use strict";

  exports.hashString = function (s) {
      var h = 0;
      for (var i = 0; i < s.length; i++) {
          h = (31 * h + s.charCodeAt(i)) | 0;
      }
      return h;
  };
})(PS["Data.Hashable"] = PS["Data.Hashable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Hashable"] = $PS["Data.Hashable"] || {};
  var exports = $PS["Data.Hashable"];
  var $foreign = $PS["Data.Hashable"];
  var Data_Eq = $PS["Data.Eq"];
  var hashableString = {
      hash: $foreign.hashString,
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var hash = function (dict) {
      return dict.hash;
  };
  exports["hash"] = hash;
  exports["hashableString"] = hashableString;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  exports["traverseWithIndex"] = traverseWithIndex;
})(PS);
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });                                                            
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };                                                                                                    
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  }; 
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = {
      map: function (f) {
          return function (m) {
              return $foreign["_fmapObject"](m, f);
          };
      }
  };
  var functorWithIndexObject = {
      mapWithIndex: mapWithKey,
      Functor0: function () {
          return functorObject;
      }
  };
  var fromHomogeneous = function () {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = {
      foldl: function (f) {
          return fold(function (z) {
              return function (v) {
                  return f(z);
              };
          });
      },
      foldr: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return foldMap(dictMonoid)(Data_Function["const"](f));
          };
      }
  };
  var foldableWithIndexObject = {
      foldlWithIndex: function (f) {
          return fold(Data_Function.flip(f));
      },
      foldrWithIndex: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return foldMap(dictMonoid);
      },
      Foldable0: function () {
          return foldableObject;
      }
  };
  var traversableWithIndexObject = {
      traverseWithIndex: function (dictApplicative) {
          return function (f) {
              return function (ms) {
                  return fold(function (acc) {
                      return function (k) {
                          return function (v) {
                              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                          };
                      };
                  })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
              };
          };
      },
      FunctorWithIndex0: function () {
          return functorWithIndexObject;
      },
      FoldableWithIndex1: function () {
          return foldableWithIndexObject;
      },
      Traversable2: function () {
          return traversableObject;
      }
  };
  var traversableObject = {
      traverse: function (dictApplicative) {
          var $42 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
          return function ($43) {
              return $42(Data_Function["const"]($43));
          };
      },
      sequence: function (dictApplicative) {
          return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function () {
          return functorObject;
      },
      Foldable1: function () {
          return foldableObject;
      }
  };
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  exports["insert"] = insert;
  exports["fromHomogeneous"] = fromHomogeneous;
  exports["delete"] = $$delete;
  exports["values"] = values;
  exports["foldableObject"] = foldableObject;
  exports["traversableObject"] = traversableObject;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Homogeneous.Record"] = $PS["Data.Homogeneous.Record"] || {};
  var exports = $PS["Data.Homogeneous.Record"];
  var Foreign_Object = $PS["Foreign.Object"];
  var traversableHomogeneous = Foreign_Object.traversableObject;
  var homogeneous = function () {
      return function (r) {
          return r;
      };
  };
  var fromHomogeneous = function () {
      return function (v) {
          return v;
      };
  };
  exports["homogeneous"] = homogeneous;
  exports["fromHomogeneous"] = fromHomogeneous;
  exports["traversableHomogeneous"] = traversableHomogeneous;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pow"] = $foreign.pow;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["remainder"] = $foreign.remainder;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
  exports["pow"] = $foreign.pow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];
  var Control_Category = $PS["Control.Category"];        
  var profunctorFn = {
      dimap: function (a2b) {
          return function (c2d) {
              return function (b2c) {
                  return function ($8) {
                      return c2d(b2c(a2b($8)));
                  };
              };
          };
      }
  };
  var dimap = function (dict) {
      return dict.dimap;
  };
  var lcmap = function (dictProfunctor) {
      return function (a2b) {
          return dimap(dictProfunctor)(a2b)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["dimap"] = dimap;
  exports["lcmap"] = lcmap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  exports["iso"] = iso;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Iso.Newtype"] = $PS["Data.Lens.Iso.Newtype"] || {};
  var exports = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var _Newtype = function () {
      return function () {
          return function (dictProfunctor) {
              return Data_Lens_Iso.iso(Data_Newtype.unwrap())(Data_Newtype.wrap())(dictProfunctor);
          };
      };
  };
  exports["_Newtype"] = _Newtype;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var strongFn = {
      first: function (a2b) {
          return function (v) {
              return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
          };
      },
      second: Data_Functor.map(Data_Tuple.functorTuple),
      Profunctor0: function () {
          return Data_Profunctor.profunctorFn;
      }
  };
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Record"] = $PS["Data.Lens.Record"] || {};
  var exports = $PS["Data.Lens.Record"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Record = $PS["Record"];                
  var prop = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (l) {
                  return function (dictStrong) {
                      return Data_Lens_Lens.lens(Record.get(dictIsSymbol)()(l))(Data_Function.flip(Record.set(dictIsSymbol)()()(l)))(dictStrong);
                  };
              };
          };
      };
  };
  exports["prop"] = prop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];             
  var over = function (l) {
      return l;
  };
  exports["over"] = over;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];            
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  exports["unfoldr"] = unfoldr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $764 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($765) {
                                  return Data_Maybe.Just.create($764($765));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["keys"] = keys;
  exports["union"] = union;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var singleton = function (a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
  };
  var semigroupSet = function (dictOrd) {
      return {
          append: union(dictOrd)
      };
  };
  var isEmpty = function (v) {
      return Data_Map_Internal.isEmpty(v);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };                  
  var foldableSet = {
      foldMap: function (dictMonoid) {
          return function (f) {
              var $72 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
              return function ($73) {
                  return $72(toList($73));
              };
          };
      },
      foldl: function (f) {
          return function (x) {
              var $74 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
              return function ($75) {
                  return $74(toList($75));
              };
          };
      },
      foldr: function (f) {
          return function (x) {
              var $76 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
              return function ($77) {
                  return $76(toList($77));
              };
          };
      }
  };
  var empty = Data_Map_Internal.empty;
  var monoidSet = function (dictOrd) {
      return {
          mempty: empty,
          Semigroup0: function () {
              return semigroupSet(dictOrd);
          }
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["monoidSet"] = monoidSet;
  exports["semigroupSet"] = semigroupSet;
  exports["foldableSet"] = foldableSet;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var showInt = {
      show: $foreign.showIntImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.intercalate = function (separator) {
    return function (xs) {
      var len = xs.length;
      if (len === 0) return "";

      var res = xs[0];
      for (var i = 1; i < len; i++) {
        res = res + separator + xs[i];
      }
      return res;
    };
  };
})(PS["Data.Show.Generic"] = PS["Data.Show.Generic"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Show.Generic"] = $PS["Data.Show.Generic"] || {};
  var exports = $PS["Data.Show.Generic"];
  var $foreign = $PS["Data.Show.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var genericShowArgsNoArguments = {
      genericShowArgs: function (v) {
          return [  ];
      }
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return {
              "genericShow'": function (v) {
                  var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var v1 = genericShowArgs(dictGenericShowArgs)(v);
                  if (v1.length === 0) {
                      return ctor;
                  };
                  return "(" + ($foreign.intercalate(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
              }
          };
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  };
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return {
              "genericShow'": function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return genericShow$prime(dictGenericShow)(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return genericShow$prime(dictGenericShow1)(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Seconds = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  };                            
  var durationSeconds = {
      fromDuration: Data_Newtype.over()()(Seconds)(function (v) {
          return v * 1000.0;
      }),
      toDuration: Data_Newtype.over()()(Milliseconds)(function (v) {
          return v / 1000.0;
      })
  };
  exports["toDuration"] = toDuration;
  exports["durationSeconds"] = durationSeconds;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Typelevel.Undefined"] = $PS["Data.Typelevel.Undefined"] || {};
  var exports = $PS["Data.Typelevel.Undefined"];
  var Data_Unit = $PS["Data.Unit"];                
  var $$undefined = Data_Unit.unit;
  exports["undefined"] = $$undefined;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Typelevel.Num.Sets"] = $PS["Data.Typelevel.Num.Sets"] || {};
  var exports = $PS["Data.Typelevel.Num.Sets"];
  var Data_Typelevel_Undefined = $PS["Data.Typelevel.Undefined"];
  var toInt = function (dict) {
      return dict.toInt;
  };
  var toInt$prime = function (dictNat) {
      return function (v) {
          return toInt(dictNat)(Data_Typelevel_Undefined["undefined"]);
      };
  };
  var natD8 = {
      toInt: function (v) {
          return 8;
      }
  };
  var posD8 = {
      Nat0: function () {
          return natD8;
      }
  };
  var natD7 = {
      toInt: function (v) {
          return 7;
      }
  };
  var posD7 = {
      Nat0: function () {
          return natD7;
      }
  };
  var natD6 = {
      toInt: function (v) {
          return 6;
      }
  };
  var posD6 = {
      Nat0: function () {
          return natD6;
      }
  };
  var natD5 = {
      toInt: function (v) {
          return 5;
      }
  };
  var posD5 = {
      Nat0: function () {
          return natD5;
      }
  };
  var natD4 = {
      toInt: function (v) {
          return 4;
      }
  };
  var posD4 = {
      Nat0: function () {
          return natD4;
      }
  };
  var natD3 = {
      toInt: function (v) {
          return 3;
      }
  };
  var posD3 = {
      Nat0: function () {
          return natD3;
      }
  };
  var natD2 = {
      toInt: function (v) {
          return 2;
      }
  };
  var posD2 = {
      Nat0: function () {
          return natD2;
      }
  };
  var natD1 = {
      toInt: function (v) {
          return 1;
      }
  };
  var posD1 = {
      Nat0: function () {
          return natD1;
      }
  };
  var natD0 = {
      toInt: function (v) {
          return 0;
      }
  };
  exports["toInt"] = toInt;
  exports["toInt'"] = toInt$prime;
  exports["natD0"] = natD0;
  exports["natD1"] = natD1;
  exports["natD2"] = natD2;
  exports["natD3"] = natD3;
  exports["natD4"] = natD4;
  exports["natD5"] = natD5;
  exports["natD6"] = natD6;
  exports["natD7"] = natD7;
  exports["natD8"] = natD8;
  exports["posD1"] = posD1;
  exports["posD2"] = posD2;
  exports["posD3"] = posD3;
  exports["posD4"] = posD4;
  exports["posD5"] = posD5;
  exports["posD6"] = posD6;
  exports["posD7"] = posD7;
  exports["posD8"] = posD8;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Typelevel.Num.Ops"] = $PS["Data.Typelevel.Num.Ops"] || {};
  var exports = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];                  
  var typelevelSucc = function (dictPos) {
      return function () {
          return function (dictDivMod10) {
              return function () {
                  return function (dictDivMod101) {
                      return {
                          Nat0: dictDivMod10.Nat1,
                          Pos1: function () {
                              return dictPos;
                          }
                      };
                  };
              };
          };
      };
  };
  var trichD7D8 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD7;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var trichD6D8 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD6;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var trichD5D8 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD5;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var trichD4D8 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD4;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var trichD4D5 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD4;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD5;
      }
  };
  var trichD3D8 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD3;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var trichD3D5 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD3;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD5;
      }
  };
  var trichD2D8 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD2;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var trichD2D5 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD2;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD5;
      }
  };
  var trichD1D8 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD1;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var trichD1D5 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD1;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD5;
      }
  };
  var trichD0D8 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var trichD0D5 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD5;
      }
  };
  var divMod10D8D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var divMod10D7D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD7;
      }
  };
  var divMod10D6D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD6;
      }
  };
  var divMod10D5D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD5;
      }
  };
  var divMod10D4D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD4;
      }
  };
  var divMod10D3D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD3;
      }
  };
  var divMod10D2D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD2;
      }
  };
  var divMod10D1D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD1;
      }
  };
  var divMod10D0D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD0;
      }
  };
  exports["typelevelSucc"] = typelevelSucc;
  exports["divMod10D0D0"] = divMod10D0D0;
  exports["divMod10D1D0"] = divMod10D1D0;
  exports["divMod10D2D0"] = divMod10D2D0;
  exports["divMod10D3D0"] = divMod10D3D0;
  exports["divMod10D4D0"] = divMod10D4D0;
  exports["divMod10D5D0"] = divMod10D5D0;
  exports["divMod10D6D0"] = divMod10D6D0;
  exports["divMod10D7D0"] = divMod10D7D0;
  exports["divMod10D8D0"] = divMod10D8D0;
  exports["trichD0D5"] = trichD0D5;
  exports["trichD0D8"] = trichD0D8;
  exports["trichD1D5"] = trichD1D5;
  exports["trichD1D8"] = trichD1D8;
  exports["trichD2D5"] = trichD2D5;
  exports["trichD2D8"] = trichD2D8;
  exports["trichD3D5"] = trichD3D5;
  exports["trichD3D8"] = trichD3D8;
  exports["trichD4D5"] = trichD4D5;
  exports["trichD4D8"] = trichD4D8;
  exports["trichD5D8"] = trichD5D8;
  exports["trichD6D8"] = trichD6D8;
  exports["trichD7D8"] = trichD7D8;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Typelevel.Num.Reps"] = $PS["Data.Typelevel.Num.Reps"] || {};
  var exports = $PS["Data.Typelevel.Num.Reps"];
  var Data_Typelevel_Undefined = $PS["Data.Typelevel.Undefined"];
  var d7 = Data_Typelevel_Undefined["undefined"];
  var d6 = Data_Typelevel_Undefined["undefined"];
  var d5 = Data_Typelevel_Undefined["undefined"];
  var d4 = Data_Typelevel_Undefined["undefined"];
  var d3 = Data_Typelevel_Undefined["undefined"];
  var d2 = Data_Typelevel_Undefined["undefined"];
  var d1 = Data_Typelevel_Undefined["undefined"];
  var d0 = Data_Typelevel_Undefined["undefined"];
  exports["d0"] = d0;
  exports["d1"] = d1;
  exports["d2"] = d2;
  exports["d3"] = d3;
  exports["d4"] = d4;
  exports["d5"] = d5;
  exports["d6"] = d6;
  exports["d7"] = d7;
})(PS);
(function(exports) {
  "use strict";

  exports.toInt = function (uval) {
      return uval | 0;
  };

  exports.toNumber = function (uval) {
      return uval;
  };
})(PS["Data.UInt"] = PS["Data.UInt"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.UInt"] = $PS["Data.UInt"] || {};
  var exports = $PS["Data.UInt"];
  var $foreign = $PS["Data.UInt"];
  exports["toInt"] = $foreign.toInt;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Variant"] = $PS["Data.Variant"] || {};
  var exports = $PS["Data.Variant"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var onMatch = function () {
      return function () {
          return function () {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var inj = function () {
      return function (dictIsSymbol) {
          return function (p) {
              return function (value) {
                  return {
                      type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                      value: value
                  };
              };
          };
      };
  };
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith("Data.Variant: pattern match failure [" + (r.type + "]"));
  };
  var match = function () {
      return function () {
          return function () {
              return function (r) {
                  return onMatch()()()(r)(case_);
              };
          };
      };
  };
  exports["inj"] = inj;
  exports["match"] = match;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Variant.Maybe"] = $PS["Data.Variant.Maybe"] || {};
  var exports = $PS["Data.Variant.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Maybe = function (x) {
      return x;
  };                            
  var nothing = Data_Variant.inj()({
      reflectSymbol: function () {
          return "nothing";
      }
  })(Type_Proxy["Proxy"].value)(Data_Unit.unit);
  var just = (function () {
      var $96 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "just";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($97) {
          return Maybe($96($97));
      };
  })();
  exports["just"] = just;
  exports["nothing"] = nothing;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Vec"] = $PS["Data.Vec"] || {};
  var exports = $PS["Data.Vec"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Type_Proxy = $PS["Type.Proxy"];                                               
  var traversableVec = Data_Traversable.traversableArray;
  var toArray = function (v) {
      return v;
  };
  var range = function (dictNat) {
      return function (dictNat1) {
          return function () {
              return function () {
                  return function () {
                      return function (dictSucc) {
                          return function (a) {
                              return function (b) {
                                  return Data_Array.range(Data_Typelevel_Num_Sets.toInt(dictNat)(a))(Data_Typelevel_Num_Sets.toInt(dictNat1)(b));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var index = function (dictNat) {
      return function () {
          return function (v) {
              return function (i) {
                  return v[Data_Typelevel_Num_Sets.toInt(dictNat)(i)];
              };
          };
      };
  };
  var functorWithIndexVec = Data_FunctorWithIndex.functorWithIndexArray;
  var functorVec = Data_Functor.functorArray;                              
  var foldableVec = Data_Foldable.foldableArray;
  var fill = function (dictNat) {
      return function (f) {
          var s = Data_Typelevel_Num_Sets["toInt'"](dictNat)(Type_Proxy["Proxy"].value);
          var range_ = (function () {
              if (s === 0) {
                  return [  ];
              };
              return Data_Array.range(0)(s - 1 | 0);
          })();
          return Data_Functor.map(Data_Functor.functorArray)(f)(range_);
      };
  };
  var empty = [  ];
  var cons = function (dictSucc) {
      return function (x) {
          return function (v) {
              return Data_Array.cons(x)(v);
          };
      };
  };
  var singleton = function (x) {
      return cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(x)(empty);
  };
  exports["empty"] = empty;
  exports["cons"] = cons;
  exports["singleton"] = singleton;
  exports["fill"] = fill;
  exports["toArray"] = toArray;
  exports["index"] = index;
  exports["functorVec"] = functorVec;
  exports["foldableVec"] = foldableVec;
  exports["functorWithIndexVec"] = functorWithIndexVec;
  exports["traversableVec"] = traversableVec;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Attribute"] = $PS["Deku.Attribute"] || {};
  var exports = $PS["Deku.Attribute"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Variant = $PS["Data.Variant"];
  var Effect = $PS["Effect"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Cb = function (x) {
      return x;
  };
  var Attribute = function (x) {
      return x;
  };                                                
  var unsafeUnAttribute = Safe_Coerce.coerce();
  var unsafeAttribute = Attribute;
  var prop$prime = Data_Variant.inj()({
      reflectSymbol: function () {
          return "prop";
      }
  })(Type_Proxy["Proxy"].value);
  var cb$prime = Data_Variant.inj()({
      reflectSymbol: function () {
          return "cb";
      }
  })(Type_Proxy["Proxy"].value);
  var cb = (function () {
      var $26 = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Effect.functorEffect)(Data_Function["const"](true)));
      return function ($27) {
          return Cb($26($27));
      };
  })();
  var attr = function (dict) {
      return dict.attr;
  };
  exports["attr"] = attr;
  exports["unsafeUnAttribute"] = unsafeUnAttribute;
  exports["unsafeAttribute"] = unsafeAttribute;
  exports["prop'"] = prop$prime;
  exports["cb'"] = cb$prime;
  exports["cb"] = cb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Core"] = $PS["Deku.Core"] || {};
  var exports = $PS["Deku.Core"];
  var Elt = (function () {
      function Elt(value0) {
          this.value0 = value0;
      };
      Elt.create = function (value0) {
          return new Elt(value0);
      };
      return Elt;
  })();
  var SendToTop = (function () {
      function SendToTop() {

      };
      SendToTop.value = new SendToTop();
      return SendToTop;
  })();
  var Remove = (function () {
      function Remove() {

      };
      Remove.value = new Remove();
      return Remove;
  })();
  exports["Elt"] = Elt;
  exports["SendToTop"] = SendToTop;
  exports["Remove"] = Remove;
})(PS);
(function(exports) {
  "use strict";

  var AVar = function () {

    function MutableQueue () {
      this.head = null;
      this.last = null;
      this.size = 0;
    }

    function MutableCell (queue, value) {
      this.queue = queue;
      this.value = value;
      this.next  = null;
      this.prev  = null;
    }

    function AVar (value) {
      this.draining = false;
      this.error    = null;
      this.value    = value;
      this.takes    = new MutableQueue();
      this.reads    = new MutableQueue();
      this.puts     = new MutableQueue();
    }

    var EMPTY = {};

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function putLast (queue, value) {
      var cell = new MutableCell(queue, value);
      switch (queue.size) {
        case 0:
          queue.head = cell;
          break;
        case 1:
          cell.prev = queue.head;
          queue.head.next = cell;
          queue.last = cell;
          break;
        default:
          cell.prev = queue.last;
          queue.last.next = cell;
          queue.last = cell;
      }
      queue.size++;
      return cell;
    }

    function takeLast (queue) {
      var cell;
      switch (queue.size) {
        case 0:
          return null;
        case 1:
          cell = queue.head;
          queue.head = null;
          break;
        case 2:
          cell = queue.last;
          queue.head.next = null;
          queue.last = null;
          break;
        default:
          cell = queue.last;
          queue.last = cell.prev;
          queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function takeHead (queue) {
      var cell;
      switch (queue.size) {
        case 0:
          return null;
        case 1:
          cell = queue.head;
          queue.head = null;
          break;
        case 2:
          cell = queue.head;
          queue.last.prev = null;
          queue.head = queue.last;
          queue.last = null;
          break;
        default:
          cell = queue.head;
          queue.head = cell.next;
          queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function deleteCell (cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next  = null;
      cell.prev  = null;
    }

    function drainVar (util, avar) {
      if (avar.draining) {
        return;
      }

      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value, rsize;

      avar.draining = true;

      while (1) { // eslint-disable-line no-constant-condition
        p = null;
        r = null;
        t = null;
        value = avar.value;
        rsize = rs.size;

        if (avar.error !== null) {
          value = util.left(avar.error);
          while (p = takeHead(ps)) { // eslint-disable-line no-cond-assign
            runEff(p.cb(value));
          }
          while (r = takeHead(rs)) { // eslint-disable-line no-cond-assign
            runEff(r(value));
          }
          while (t = takeHead(ts)) { // eslint-disable-line no-cond-assign
            runEff(t(value));
          }
          break;
        }

        // Process the next put. We do not immediately invoke the callback
        // because we want to preserve ordering. If there are takes/reads
        // we want to run those first.
        if (value === EMPTY && (p = takeHead(ps))) {
          avar.value = value = p.value;
        }

        if (value !== EMPTY) {
          // We go ahead and queue up the next take for the same reasons as
          // above. Invoking the read callbacks can affect the mutable queue.
          t = takeHead(ts);
          // We only want to process the reads queued up before running these
          // callbacks so we guard on rsize.
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value)));
          }
        }

        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }

        // Callbacks could have queued up more items so we need to guard on the
        // actual mutable properties.
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      avar.draining = false;
    }

    AVar.EMPTY      = EMPTY;
    AVar.putLast    = putLast;
    AVar.takeLast   = takeLast;
    AVar.takeHead   = takeHead;
    AVar.deleteCell = deleteCell;
    AVar.drainVar   = drainVar;

    return AVar;
  }();

  exports.empty = function () {
    return new AVar(AVar.EMPTY);
  };

  exports._takeVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.takes, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._readVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.reads, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._tryPutVar = function (util, value, avar) {
    return function () {
      if (avar.value === AVar.EMPTY && avar.error === null) {
        avar.value = value;
        AVar.drainVar(util, avar);
        return true;
      } else {
        return false;
      }
    };
  };

  exports._tryTakeVar = function (util, avar) {
    return function () {
      var value = avar.value;
      if (value === AVar.EMPTY) {
        return util.nothing;
      } else {
        avar.value = AVar.EMPTY;
        AVar.drainVar(util, avar);
        return util.just(value);
      }
    };
  };
})(PS["Effect.AVar"] = PS["Effect.AVar"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.AVar"] = $PS["Effect.AVar"] || {};
  var exports = $PS["Effect.AVar"];
  var $foreign = $PS["Effect.AVar"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Killed = (function () {
      function Killed(value0) {
          this.value0 = value0;
      };
      Killed.create = function (value0) {
          return new Killed(value0);
      };
      return Killed;
  })();
  var Filled = (function () {
      function Filled(value0) {
          this.value0 = value0;
      };
      Filled.create = function (value0) {
          return new Filled(value0);
      };
      return Filled;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var ffiUtil = {
      left: Data_Either.Left.create,
      right: Data_Either.Right.create,
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
  };
  var read = function (avar) {
      return function (cb) {
          return $foreign["_readVar"](ffiUtil, avar, cb);
      };
  };
  var take = function (avar) {
      return function (cb) {
          return $foreign["_takeVar"](ffiUtil, avar, cb);
      };
  };
  var tryPut = function (value) {
      return function (avar) {
          return $foreign["_tryPutVar"](ffiUtil, value, avar);
      };
  };
  var tryTake = function (avar) {
      return $foreign["_tryTakeVar"](ffiUtil, avar);
  };
  exports["take"] = take;
  exports["tryTake"] = tryTake;
  exports["tryPut"] = tryPut;
  exports["read"] = read;
  exports["empty"] = $foreign.empty;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify"] = modify;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event"] = $PS["FRP.Event"] || {};
  var exports = $PS["FRP.Event"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var Event = function (x) {
      return x;
  };
  var subscribe = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var sampleOn = function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var c1 = v(function (a) {
                      return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
                  })();
                  var c2 = v1(function (f) {
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($54) {
                          return k(f($54));
                      }));
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
              };
          };
      };
  };
  var makeEvent = Event;
  var keepLatest = function (v) {
      return function (k) {
          return function __do() {
              var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
              var cancelOuter = v(function (inner) {
                  return function __do() {
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                      var c = subscribe(inner)(k)();
                      return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
                  };
              })();
              return function __do() {
                  Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                  return cancelOuter();
              };
          };
      };
  };
  var functorEvent = {
      map: function (f) {
          return function (v) {
              return function (k) {
                  return v(function ($55) {
                      return k(f($55));
                  });
              };
          };
      }
  };
  var fold = function (f) {
      return function (v) {
          return function (b) {
              return function (k) {
                  return function __do() {
                      var result = Effect_Ref["new"](b)();
                      return v(function (a) {
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                      })();
                  };
              };
          };
      };
  };
  var filter = function (p) {
      return function (v) {
          return function (k) {
              return v(function (a) {
                  var v1 = p(a);
                  if (v1 instanceof Data_Maybe.Just) {
                      return k(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 108, column 13 - line 110, column 27): " + [ v1.constructor.name ]);
              });
          };
      };
  };
  var filter$prime = function (f) {
      return filter(function (a) {
          var v = f(a);
          if (v) {
              return new Data_Maybe.Just(a);
          };
          if (!v) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at FRP.Event (line 66, column 13 - line 68, column 25): " + [ v.constructor.name ]);
      });
  };
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          event: function (k) {
              return function __do() {
                  Effect_Ref.modify(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return function __do() {
                      Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
                      return Data_Unit.unit;
                  };
              };
          },
          push: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  var fix = function (f) {
      var v = Effect_Unsafe.unsafePerformEffect(create);
      var v1 = f(v.event);
      return function (k) {
          return function __do() {
              var c1 = subscribe(v1.input)(v.push)();
              var c2 = subscribe(v1.output)(k)();
              return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
          };
      };
  };
  var memoize = function (e) {
      return function (f) {
          return makeEvent(function (k) {
              return function __do() {
                  var v = create();
                  k(f(v.event))();
                  return subscribe(e)(v.push)();
              };
          });
      };
  };
  var compactableEvent = {
      compact: filter(Control_Category.identity(Control_Category.categoryFn)),
      separate: function (xs) {
          return {
              left: filter(function (v) {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 49, column 13 - line 51, column 33): " + [ v.constructor.name ]);
              })(xs),
              right: filter(function (v) {
                  if (v instanceof Data_Either.Right) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Left) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 56, column 13 - line 58, column 32): " + [ v.constructor.name ]);
              })(xs)
          };
      }
  };
  var filterableEvent = {
      filter: filter$prime,
      filterMap: filter,
      partition: function (p) {
          return function (xs) {
              return {
                  yes: filter$prime(p)(xs),
                  no: filter$prime((function () {
                      var $56 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                      return function ($57) {
                          return $56(p($57));
                      };
                  })())(xs)
              };
          };
      },
      partitionMap: function (f) {
          return function (xs) {
              return {
                  left: Data_Filterable.filterMap(filterableEvent)((function () {
                      var $58 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                      return function ($59) {
                          return $58(f($59));
                      };
                  })())(xs),
                  right: Data_Filterable.filterMap(filterableEvent)(function ($60) {
                      return Data_Either.hush(f($60));
                  })(xs)
              };
          };
      },
      Compactable0: function () {
          return compactableEvent;
      },
      Functor1: function () {
          return functorEvent;
      }
  };
  var bus = function (f) {
      return makeEvent(function (k) {
          return function __do() {
              var v = create();
              k(f(v.push)(v.event))();
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      });
  };
  var bang = function (a) {
      return function (k) {
          return function __do() {
              k(a)();
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  var altEvent = {
      alt: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var c1 = v(k)();
                      var c2 = v1(k)();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var plusEvent = {
      empty: function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
      },
      Alt0: function () {
          return altEvent;
      }
  };
  var eventIsEvent = {
      fold: fold,
      keepLatest: keepLatest,
      sampleOn: sampleOn,
      fix: fix,
      bang: bang,
      Plus0: function () {
          return plusEvent;
      },
      Filterable1: function () {
          return filterableEvent;
      }
  };
  exports["create"] = create;
  exports["makeEvent"] = makeEvent;
  exports["subscribe"] = subscribe;
  exports["bang"] = bang;
  exports["bus"] = bus;
  exports["memoize"] = memoize;
  exports["functorEvent"] = functorEvent;
  exports["filterableEvent"] = filterableEvent;
  exports["altEvent"] = altEvent;
  exports["plusEvent"] = plusEvent;
  exports["eventIsEvent"] = eventIsEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Internal"] = $PS["Deku.Internal"] || {};
  var exports = $PS["Deku.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Core = $PS["Deku.Core"];
  var Effect = $PS["Effect"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Event = $PS["FRP.Event"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var Begin = (function () {
      function Begin() {

      };
      Begin.value = new Begin();
      return Begin;
  })();
  var Middle = (function () {
      function Middle() {

      };
      Middle.value = new Middle();
      return Middle;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var __internalDekuFlatten = function (parent) {
      return function (v) {
          return function (children) {
              return FRP_Event.makeEvent(function (k) {
                  return function __do() {
                      var cancelInner = Effect_Ref["new"](Foreign_Object.empty)();
                      var cancelOuter = FRP_Event.subscribe(children)(function (inner) {
                          return function __do() {
                              var myUnsubId = v.ids();
                              var myUnsub = Effect_Ref["new"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                              var eltsUnsubId = v.ids();
                              var eltsUnsub = Effect_Ref["new"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                              var myId = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                              var myImmediateCancellation = Effect_Ref["new"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                              var myScope = v.ids();
                              var stageRef = Effect_Ref["new"](Begin.value)();
                              var c0 = FRP_Event.subscribe(inner)(function (kid$prime) {
                                  return function __do() {
                                      var stage = Effect_Ref.read(stageRef)();
                                      if (kid$prime instanceof Deku_Core.SendToTop && stage instanceof Middle) {
                                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(myId))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($14) {
                                              return k(v.sendToTop((function (v1) {
                                                  return {
                                                      id: v1
                                                  };
                                              })($14)));
                                          }))();
                                      };
                                      if (kid$prime instanceof Deku_Core.Remove && stage instanceof Middle) {
                                          Effect_Ref.write(End.value)(stageRef)();
                                          var mic = Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(myId))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (old) {
                                              return k(v.disconnectElement({
                                                  id: old,
                                                  parent: parent,
                                                  scope: myScope
                                              }));
                                          })))(Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(myUnsub))))(Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(eltsUnsub))))(Effect_Ref.modify_(Foreign_Object["delete"](myUnsubId))(cancelInner)))(Effect_Ref.modify_(Foreign_Object["delete"](eltsUnsubId))(cancelInner));
                                          return Control_Apply.applySecond(Effect.applyEffect)(Effect_Ref.write(mic)(myImmediateCancellation))(mic)();
                                      };
                                      if (kid$prime instanceof Deku_Core.Elt && stage instanceof Begin) {
                                          Effect_Ref.write(Middle.value)(stageRef)();
                                          var av = Effect_AVar.empty();
                                          var c1 = FRP_Event.subscribe(kid$prime.value0({
                                              parent: parent,
                                              scope: myScope,
                                              raiseId: function (id) {
                                                  return Data_Functor["void"](Effect.functorEffect)(Effect_AVar.tryPut(id)(av));
                                              }
                                          })(v))(k)();
                                          var cncl = Effect_AVar.take(av)(function (q) {
                                              if (q instanceof Data_Either.Right) {
                                                  return function __do() {
                                                      Effect_Ref.write(new Data_Maybe.Just(q.value0))(myId)();
                                                      Effect_Ref.modify_(Foreign_Object.insert(eltsUnsubId)(c1))(cancelInner)();
                                                      return Effect_Ref.write(c1)(eltsUnsub)();
                                                  };
                                              };
                                              if (q instanceof Data_Either.Left) {
                                                  return Effect_Exception.throwException(q.value0);
                                              };
                                              throw new Error("Failed pattern match at Deku.Internal (line 82, column 44 - line 87, column 45): " + [ q.constructor.name ]);
                                          })();
                                          return cncl();
                                      };
                                      return Data_Unit.unit;
                                  };
                              })();
                              Effect_Ref.write(c0)(myUnsub)();
                              Effect_Ref.modify_(Foreign_Object.insert(myUnsubId)(c0))(cancelInner)();
                              return Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(myImmediateCancellation))();
                          };
                      })();
                      return function __do() {
                          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.fold(Foreign_Object.foldableObject)(Effect.monoidEffect(Data_Monoid.monoidUnit)))();
                          return cancelOuter();
                      };
                  };
              });
          };
      };
  };
  exports["__internalDekuFlatten"] = __internalDekuFlatten;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event.Class"] = $PS["FRP.Event.Class"] || {};
  var exports = $PS["FRP.Event.Class"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var sampleOn = function (dict) {
      return dict.sampleOn;
  };
  var keepLatest = function (dict) {
      return dict.keepLatest;
  };
  var fold = function (dict) {
      return dict.fold;
  };
  var mapAccum = function (dictIsEvent) {
      return function (f) {
          return function (xs) {
              return function (acc) {
                  return Data_Filterable.filterMap(dictIsEvent.Filterable1())(Data_Tuple.snd)(fold(dictIsEvent)(function (a) {
                      return function (v) {
                          return Data_Functor.map(Data_Tuple.functorTuple)(Control_Applicative.pure(Data_Maybe.applicativeMaybe))(f(a)(v.value0));
                      };
                  })(xs)(new Data_Tuple.Tuple(acc, Data_Maybe.Nothing.value)));
              };
          };
      };
  };
  var withLast = function (dictIsEvent) {
      return function (e) {
          var step = function (a) {
              return function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just({
                          now: a,
                          last: Data_Maybe.Nothing.value
                      });
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just({
                          now: a,
                          last: new Data_Maybe.Just(v.value0.now)
                      });
                  };
                  throw new Error("Failed pattern match at FRP.Event.Class (line 56, column 3 - line 56, column 50): " + [ a.constructor.name, v.constructor.name ]);
              };
          };
          return Data_Filterable.filterMap(dictIsEvent.Filterable1())(Control_Category.identity(Control_Category.categoryFn))(fold(dictIsEvent)(step)(e)(Data_Maybe.Nothing.value));
      };
  };
  var fix = function (dict) {
      return dict.fix;
  };
  var biSampleOn = function (dictIsEvent) {
      return function (a) {
          return function (b) {
              return Control_Alt.alt((dictIsEvent.Plus0()).Alt0())(sampleOn(dictIsEvent)(a)(b))(sampleOn(dictIsEvent)(b)(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Function.applyFlipped)(a)));
          };
      };
  };
  var bang = function (dict) {
      return dict.bang;
  };
  exports["fold"] = fold;
  exports["mapAccum"] = mapAccum;
  exports["withLast"] = withLast;
  exports["biSampleOn"] = biSampleOn;
  exports["sampleOn"] = sampleOn;
  exports["keepLatest"] = keepLatest;
  exports["bang"] = bang;
  exports["fix"] = fix;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Type.Equality"] = $PS["Type.Equality"] || {};
  var exports = $PS["Type.Equality"];
  var refl = {
      proof: function (a) {
          return a;
      },
      Coercible0: function () {
          return undefined;
      }
  };
  var proof = function (dict) {
      return dict.proof;
  };
  exports["proof"] = proof;
  exports["refl"] = refl;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Control"] = $PS["Deku.Control"] || {};
  var exports = $PS["Deku.Control"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Core = $PS["Deku.Core"];
  var Deku_Internal = $PS["Deku.Internal"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var Type_Equality = $PS["Type.Equality"];
  var plantEventEventStreamingE = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return {
              plant: function (i) {
                  return Type_Equality.proof(Type_Equality.refl)(Safe_Coerce.coerce()(i));
              }
          };
      };
  };
  var plantEventElementEventEve = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return {
              plant: function (i) {
                  return Type_Equality.proof(Type_Equality.refl)(Safe_Coerce.coerce()(FRP_Event.bang(Data_Functor.map(FRP_Event.functorEvent)(Deku_Core.Elt.create)(i))));
              }
          };
      };
  };
  var plantElementEventEventStr = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return {
              plant: function (i) {
                  return Type_Equality.proof(Type_Equality.refl)(Safe_Coerce.coerce()(FRP_Event.bang(FRP_Event.bang(Deku_Core.Elt.create(i)))));
              }
          };
      };
  };
  var plantArrayElementEventEve = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return {
              plant: function (i) {
                  return Type_Equality.proof(Type_Equality.refl)(Safe_Coerce.coerce()(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(FRP_Event.bang)(Data_Functor.map(Data_Functor.functorArray)(function ($104) {
                      return FRP_Event.bang(Deku_Core.Elt.create($104));
                  })(i))));
              }
          };
      };
  };
  var unsafeText = function (v) {
      return v.makeText;
  };
  var unsafeSetText = function (v) {
      return function (id) {
          return function (txt) {
              return Data_Functor.map(FRP_Event.functorEvent)(function ($105) {
                  return v.setText((function (v1) {
                      return {
                          id: id,
                          text: v1
                      };
                  })($105));
              })(txt);
          };
      };
  };
  var unsafeSetAttribute = function (v) {
      return function (id) {
          return function (atts) {
              return Data_Functor.map(FRP_Event.functorEvent)(function ($106) {
                  return v.setAttribute((function (v1) {
                      return {
                          id: id,
                          key: v1.key,
                          value: v1.value
                      };
                  })(Deku_Attribute.unsafeUnAttribute($106)));
              })(atts);
          };
      };
  };
  var unsafeElement = function (v) {
      return v.makeElement;
  };
  var text = function (txt) {
      var go = function (v) {
          return function (v1) {
              return FRP_Event.makeEvent(function (k) {
                  return function __do() {
                      var me = v1.ids();
                      v.raiseId(me)();
                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                          id: me
                      }))))(FRP_Event.subscribe(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ FRP_Event.bang(unsafeText(v1)({
                          id: me,
                          parent: v.parent,
                          scope: v.scope
                      })), unsafeSetText(v1)(me)(txt) ]))(k))();
                  };
              });
          };
      };
      return go;
  };
  var text_ = function (txt) {
      return text(FRP_Event.bang(txt));
  };
  var switcher = function (f) {
      return function (event) {
          var counter = function (ev) {
              var fn = function (a) {
                  return function (b) {
                      return new Data_Tuple.Tuple(b + 1 | 0, new Data_Tuple.Tuple(a, b));
                  };
              };
              return FRP_Event_Class.mapAccum(FRP_Event.eventIsEvent)(fn)(ev)(0);
          };
          return FRP_Event_Class.keepLatest(FRP_Event.eventIsEvent)(FRP_Event.memoize(counter(event))(function (cenv) {
              return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
                  return Control_Alt.alt(FRP_Event.altEvent)(FRP_Event.bang(new Deku_Core.Elt(f(v.value0))))(Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"](Deku_Core.Remove.value))(Data_Filterable.filter(FRP_Event.filterableEvent)((function () {
                      var $107 = Data_Eq.eq(Data_Eq.eqInt)(v.value1 + 1 | 0);
                      return function ($108) {
                          return $107(Data_Tuple.snd($108));
                      };
                  })())(cenv)));
              })(cenv);
          }));
      };
  };
  var plant = function (dict) {
      return dict.plant;
  };
  var elementify = function (tag) {
      return function (atts) {
          return function (children) {
              var go = function (v) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              v.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(FRP_Event.subscribe(Control_Alt.alt(FRP_Event.altEvent)(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ FRP_Event.bang(unsafeElement(v1)({
                                  id: me,
                                  parent: v.parent,
                                  scope: v.scope,
                                  tag: tag
                              })), unsafeSetAttribute(v1)(me)(atts) ]))(Deku_Internal["__internalDekuFlatten"](me)(v1)(children)))(k))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var deku = function (root) {
      return function (children) {
          return function (v) {
              return FRP_Event.makeEvent(function (k) {
                  return function __do() {
                      var me = v.ids();
                      return FRP_Event.subscribe(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event.bang(v.makeRoot({
                          id: me,
                          root: root
                      })))(Deku_Internal["__internalDekuFlatten"](me)(v)(Type_Equality.proof(Type_Equality.refl)(Safe_Coerce.coerce()(children)))))(k)();
                  };
              });
          };
      };
  };
  var dekuA = function (root) {
      return function (children) {
          return deku(root)(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(FRP_Event.bang)(Data_Functor.map(Data_Functor.functorArray)(function ($109) {
              return FRP_Event.bang(Deku_Core.Elt.create($109));
          })(children)));
      };
  };
  var blank = (function () {
      var go = function (v) {
          return function (v1) {
              return FRP_Event.makeEvent(function (k) {
                  return function __do() {
                      var me = v1.ids();
                      v.raiseId(me)();
                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                          id: me
                      }))))(FRP_Event.subscribe(FRP_Event.bang(v1.makeNoop({
                          id: me,
                          parent: v.parent,
                          scope: v.scope
                      })))(k))();
                  };
              });
          };
      };
      return go;
  })();
  exports["elementify"] = elementify;
  exports["text"] = text;
  exports["text_"] = text_;
  exports["dekuA"] = dekuA;
  exports["blank"] = blank;
  exports["plant"] = plant;
  exports["switcher"] = switcher;
  exports["plantEventEventStreamingE"] = plantEventEventStreamingE;
  exports["plantEventElementEventEve"] = plantEventElementEventEve;
  exports["plantElementEventEventStr"] = plantElementEventEventStr;
  exports["plantArrayElementEventEve"] = plantArrayElementEventEve;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM"] = $PS["Deku.DOM"] || {};
  var exports = $PS["Deku.DOM"];
  var Deku_Attribute = $PS["Deku.Attribute"];                        
  var Draw2D = (function () {
      function Draw2D() {

      };
      Draw2D.value = new Draw2D();
      return Draw2D;
  })();
  var attrCanvas_Draw2DContext2 = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "@canvas-hack@",
                  value: Deku_Attribute["cb'"](value)
              });
          };
      }
  };
  exports["Draw2D"] = Draw2D;
  exports["attrCanvas_Draw2DContext2"] = attrCanvas_Draw2DContext2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Checked"] = $PS["Deku.DOM.Attr.Checked"] || {};
  var exports = $PS["Deku.DOM.Attr.Checked"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Checked = (function () {
      function Checked() {

      };
      Checked.value = new Checked();
      return Checked;
  })();
  var attrInput_CheckedString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "checked",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Checked"] = Checked;
  exports["attrInput_CheckedString"] = attrInput_CheckedString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Controls"] = $PS["Deku.DOM.Attr.Controls"] || {};
  var exports = $PS["Deku.DOM.Attr.Controls"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Controls = (function () {
      function Controls() {

      };
      Controls.value = new Controls();
      return Controls;
  })();
  var attrAudio_ControlsString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "controls",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Controls"] = Controls;
  exports["attrAudio_ControlsString"] = attrAudio_ControlsString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Height"] = $PS["Deku.DOM.Attr.Height"] || {};
  var exports = $PS["Deku.DOM.Attr.Height"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Height = (function () {
      function Height() {

      };
      Height.value = new Height();
      return Height;
  })();
  var attrCanvas_HeightString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "height",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Height"] = Height;
  exports["attrCanvas_HeightString"] = attrCanvas_HeightString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Max"] = $PS["Deku.DOM.Attr.Max"] || {};
  var exports = $PS["Deku.DOM.Attr.Max"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Max = (function () {
      function Max() {

      };
      Max.value = new Max();
      return Max;
  })();
  var attrInput_MaxString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "max",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Max"] = Max;
  exports["attrInput_MaxString"] = attrInput_MaxString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Min"] = $PS["Deku.DOM.Attr.Min"] || {};
  var exports = $PS["Deku.DOM.Attr.Min"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Min = (function () {
      function Min() {

      };
      Min.value = new Min();
      return Min;
  })();
  var attrInput_MinString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "min",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Min"] = Min;
  exports["attrInput_MinString"] = attrInput_MinString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.OnClick"] = $PS["Deku.DOM.Attr.OnClick"] || {};
  var exports = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var OnClick = (function () {
      function OnClick() {

      };
      OnClick.value = new OnClick();
      return OnClick;
  })();
  var attrOnClickCb = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "click",
                  value: Deku_Attribute["cb'"](value)
              });
          };
      }
  };
  exports["OnClick"] = OnClick;
  exports["attrOnClickCb"] = attrOnClickCb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.OnInput"] = $PS["Deku.DOM.Attr.OnInput"] || {};
  var exports = $PS["Deku.DOM.Attr.OnInput"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var OnInput = (function () {
      function OnInput() {

      };
      OnInput.value = new OnInput();
      return OnInput;
  })();
  var attrOnInputCb = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "input",
                  value: Deku_Attribute["cb'"](value)
              });
          };
      }
  };
  exports["OnInput"] = OnInput;
  exports["attrOnInputCb"] = attrOnInputCb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Src"] = $PS["Deku.DOM.Attr.Src"] || {};
  var exports = $PS["Deku.DOM.Attr.Src"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Src = (function () {
      function Src() {

      };
      Src.value = new Src();
      return Src;
  })();
  var attrAudio_SrcString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "src",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Src"] = Src;
  exports["attrAudio_SrcString"] = attrAudio_SrcString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Step"] = $PS["Deku.DOM.Attr.Step"] || {};
  var exports = $PS["Deku.DOM.Attr.Step"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Step = (function () {
      function Step() {

      };
      Step.value = new Step();
      return Step;
  })();
  var attrInput_StepString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "step",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Step"] = Step;
  exports["attrInput_StepString"] = attrInput_StepString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Style"] = $PS["Deku.DOM.Attr.Style"] || {};
  var exports = $PS["Deku.DOM.Attr.Style"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Style = (function () {
      function Style() {

      };
      Style.value = new Style();
      return Style;
  })();
  var attrSpan_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrInput_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrDiv_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrCanvas_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrButton_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrAudio_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrA_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Style"] = Style;
  exports["attrA_StyleString"] = attrA_StyleString;
  exports["attrAudio_StyleString"] = attrAudio_StyleString;
  exports["attrButton_StyleString"] = attrButton_StyleString;
  exports["attrCanvas_StyleString"] = attrCanvas_StyleString;
  exports["attrDiv_StyleString"] = attrDiv_StyleString;
  exports["attrInput_StyleString"] = attrInput_StyleString;
  exports["attrSpan_StyleString"] = attrSpan_StyleString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Value"] = $PS["Deku.DOM.Attr.Value"] || {};
  var exports = $PS["Deku.DOM.Attr.Value"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Value = (function () {
      function Value() {

      };
      Value.value = new Value();
      return Value;
  })();
  var attrInput_ValueString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "value",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Value"] = Value;
  exports["attrInput_ValueString"] = attrInput_ValueString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Width"] = $PS["Deku.DOM.Attr.Width"] || {};
  var exports = $PS["Deku.DOM.Attr.Width"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Width = (function () {
      function Width() {

      };
      Width.value = new Width();
      return Width;
  })();
  var attrCanvas_WidthString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "width",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Width"] = Width;
  exports["attrCanvas_WidthString"] = attrCanvas_WidthString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Attr.Xtype"] = $PS["Deku.DOM.Attr.Xtype"] || {};
  var exports = $PS["Deku.DOM.Attr.Xtype"];
  var Deku_Attribute = $PS["Deku.Attribute"];                
  var Xtype = (function () {
      function Xtype() {

      };
      Xtype.value = new Xtype();
      return Xtype;
  })();
  var attrInput_XtypeString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "type",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  exports["Xtype"] = Xtype;
  exports["attrInput_XtypeString"] = attrInput_XtypeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.A"] = $PS["Deku.DOM.Elt.A"] || {};
  var exports = $PS["Deku.DOM.Elt.A"];
  var Deku_Control = $PS["Deku.Control"];          
  var a = function (dictPlant) {
      return function (attributes) {
          return function (seed) {
              return Deku_Control.elementify("a")(attributes)(Deku_Control.plant(dictPlant)(seed));
          };
      };
  };
  exports["a"] = a;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Audio"] = $PS["Deku.DOM.Elt.Audio"] || {};
  var exports = $PS["Deku.DOM.Elt.Audio"];
  var Deku_Control = $PS["Deku.Control"];          
  var audio = function (dictPlant) {
      return function (attributes) {
          return function (seed) {
              return Deku_Control.elementify("audio")(attributes)(Deku_Control.plant(dictPlant)(seed));
          };
      };
  };
  exports["audio"] = audio;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Button"] = $PS["Deku.DOM.Elt.Button"] || {};
  var exports = $PS["Deku.DOM.Elt.Button"];
  var Deku_Control = $PS["Deku.Control"];          
  var button = function (dictPlant) {
      return function (attributes) {
          return function (seed) {
              return Deku_Control.elementify("button")(attributes)(Deku_Control.plant(dictPlant)(seed));
          };
      };
  };
  exports["button"] = button;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Canvas"] = $PS["Deku.DOM.Elt.Canvas"] || {};
  var exports = $PS["Deku.DOM.Elt.Canvas"];
  var Deku_Control = $PS["Deku.Control"];          
  var canvas = function (dictPlant) {
      return function (attributes) {
          return function (seed) {
              return Deku_Control.elementify("canvas")(attributes)(Deku_Control.plant(dictPlant)(seed));
          };
      };
  };
  exports["canvas"] = canvas;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Code"] = $PS["Deku.DOM.Elt.Code"] || {};
  var exports = $PS["Deku.DOM.Elt.Code"];
  var Control_Plus = $PS["Control.Plus"];
  var Deku_Control = $PS["Deku.Control"];
  var FRP_Event = $PS["FRP.Event"];                
  var code = function (dictPlant) {
      return function (attributes) {
          return function (seed) {
              return Deku_Control.elementify("code")(attributes)(Deku_Control.plant(dictPlant)(seed));
          };
      };
  };
  var code_ = function (dictPlant) {
      return code(dictPlant)(Control_Plus.empty(FRP_Event.plusEvent));
  };
  exports["code_"] = code_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Div"] = $PS["Deku.DOM.Elt.Div"] || {};
  var exports = $PS["Deku.DOM.Elt.Div"];
  var Control_Plus = $PS["Control.Plus"];
  var Deku_Control = $PS["Deku.Control"];
  var FRP_Event = $PS["FRP.Event"];                
  var div = function (dictPlant) {
      return function (attributes) {
          return function (seed) {
              return Deku_Control.elementify("div")(attributes)(Deku_Control.plant(dictPlant)(seed));
          };
      };
  };
  var div_ = function (dictPlant) {
      return div(dictPlant)(Control_Plus.empty(FRP_Event.plusEvent));
  };
  exports["div"] = div;
  exports["div_"] = div_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Input"] = $PS["Deku.DOM.Elt.Input"] || {};
  var exports = $PS["Deku.DOM.Elt.Input"];
  var Deku_Control = $PS["Deku.Control"];          
  var input = function (dictPlant) {
      return function (attributes) {
          return function (seed) {
              return Deku_Control.elementify("input")(attributes)(Deku_Control.plant(dictPlant)(seed));
          };
      };
  };
  exports["input"] = input;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Pre"] = $PS["Deku.DOM.Elt.Pre"] || {};
  var exports = $PS["Deku.DOM.Elt.Pre"];
  var Control_Plus = $PS["Control.Plus"];
  var Deku_Control = $PS["Deku.Control"];
  var FRP_Event = $PS["FRP.Event"];                
  var pre = function (dictPlant) {
      return function (attributes) {
          return function (seed) {
              return Deku_Control.elementify("pre")(attributes)(Deku_Control.plant(dictPlant)(seed));
          };
      };
  };
  var pre_ = function (dictPlant) {
      return pre(dictPlant)(Control_Plus.empty(FRP_Event.plusEvent));
  };
  exports["pre_"] = pre_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.DOM.Elt.Span"] = $PS["Deku.DOM.Elt.Span"] || {};
  var exports = $PS["Deku.DOM.Elt.Span"];
  var Control_Plus = $PS["Control.Plus"];
  var Deku_Control = $PS["Deku.Control"];
  var FRP_Event = $PS["FRP.Event"];                
  var span = function (dictPlant) {
      return function (attributes) {
          return function (seed) {
              return Deku_Control.elementify("span")(attributes)(Deku_Control.plant(dictPlant)(seed));
          };
      };
  };
  var span_ = function (dictPlant) {
      return span(dictPlant)(Control_Plus.empty(FRP_Event.plusEvent));
  };
  exports["span"] = span;
  exports["span_"] = span_;
})(PS);
(function(exports) {
  var makeid = function (length) {
	  var result = "";
	  var characters =
		  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	  var charactersLength = characters.length;
	  for (var i = 0; i < length; i++) {
		  result += characters.charAt(Math.floor(Math.random() * charactersLength));
	  }
	  return result;
  };

  var connectXToY_ = function (x) {
	  return function (y) {
		  return function (state) {
			  return function () {
				  if (y === "@portal@") { return }
				  state.units[y].main.appendChild(state.units[x].main);
			  };
		  };
	  };
  };
  var makeElement = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  if (!state.scopes[a.scope]) {
				  state.scopes[a.scope] = [];
			  }
			  state.scopes[a.scope].push(ptr);
			  state.units[ptr] = {
				  listeners: {},
				  parent: a.parent,
				  scope: a.scope,
				  main: document.createElement(a.tag),
			  };
			  if (a.parent === state.terminus) {
				  state.terminalPtrs.push(a.id);
			  }
			  connectXToY_(ptr)(a.parent)(state)();
		  };
	  };
  };
  exports.makeElement = makeElement;
  exports.makeText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  if (!state.scopes[a.scope]) {
				  state.scopes[a.scope] = [];
			  }
			  state.scopes[a.scope].push(ptr);
			  state.units[ptr] = {
				  main: document.createTextNode(""),
				  parent: a.parent,
				  scope: a.scope
			  };
			  connectXToY_(ptr)(a.parent)(state)();
		  };
	  };
  };
  exports.makeFFIDOMSnapshot = function () {
	  return {
		  units: {},
		  scopes: {},
		  unqidfr: makeid(10),
	  };
  };
  exports.setAttribute_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var avv = a.value.value;
			  if (a.value.type === "cb") {
				  if (a.key === "@canvas-hack@") {
					  const cxt = state.units[ptr].main.getContext("2d");
					  avv(cxt)();
				  } else {
					  if (state.units[ptr].listeners[a.key]) {
						  state.units[ptr].main.removeEventListener(
							  a.key,
							  state.units[ptr].listeners[a.key]
						  );
					  }
					  var el = (e) => avv(e)();
					  state.units[ptr].main.addEventListener(a.key, el);
					  state.units[ptr].listeners[a.key] = el;
				  }
			  } else {
				  if (state.units[ptr].main.tagName === "INPUT" && a.key === "value") {
					  state.units[ptr].main.value = avv;
				  } else if (
					  state.units[ptr].main.tagName === "INPUT" &&
					  a.key === "checked"
				  ) {
					  state.units[ptr].main.checked = avv === "true";
				  } else {
					  state.units[ptr].main.setAttribute(a.key, avv);
				  }
			  }
		  };
	  };
  };
  exports.setText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr].main.nodeValue = a.text; //.replace(/\n/g, "<br>");
		  };
	  };
  };

  var makePursx_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var html = a.html;
			  var verb = a.verb;
			  var cache = a.cache;
			  var parent = a.parent;
			  var scope = a.scope;
			  if (a.parent === state.terminus) {
				  state.terminalPtrs.push(a.id);
			  }
			  var entries = Object.entries(cache);
			  for (var i = 0; i < entries.length; i++) {
				  var key = entries[i][0];
				  if (entries[i][1] === true) {
					  // it is an attribute
					  html = html.replace(
						  verb + key + verb,
						  "data-deku-attr-internal=" + '"' + key + '"'
					  );
				  } else {
					  html = html.replace(
						  verb + key + verb,
						  '<span style="display:contents;" data-deku-elt-internal=' +
							  '"' +
							  key +
							  '"></span>'
					  );
				  }
			  }
			  var tmp = document.createElement("div");
			  tmp.innerHTML = html.trim();
			  if (!state.scopes[a.dkScope]) {
				  state.scopes[a.dkScope] = [];
			  }
			  state.scopes[a.dkScope].push(ptr);
			  state.units[ptr] = {
				  listeners: {},
				  scope: a.dkScope,
				  parent: parent,
				  main: tmp.firstChild,
			  };
			  tmp.querySelectorAll("[data-deku-attr-internal]").forEach(function (e) {
				  var key = e.getAttribute("data-deku-attr-internal");
				  state.units[key + scope] = {
					  listeners: {},
					  main: e,
					  scope: a.dkScope,
				  };
				  state.scopes[a.dkScope].push(key + scope);
			  });
			  tmp.querySelectorAll("[data-deku-elt-internal]").forEach(function (e) {
				  var key = e.getAttribute("data-deku-elt-internal");
				  state.units[key + scope] = {
					  listeners: {},
					  main: e,
					  scope: a.dkScope,
				  };
				  state.scopes[a.dkScope].push(key + scope);
			  });
			  connectXToY_(ptr)(parent)(state)();
		  };
	  };
  };
  exports.makePursx_ = makePursx_;
  exports.makeRoot_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  main: a.root,
			  };
		  };
	  };
  };
  exports.makeNoop_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  noop: true,
			  };
		  };
	  };
  };
  exports.giveNewParent_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var parent = a.parent;
			  state.units[ptr].containingScope = a.scope;
			  state.units[parent].main.prepend(state.units[ptr].main);
		  };
	  };
  };
  exports.disconnectElement_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  if (state.units[ptr].noop) {
				  return;
			  }
			  if (
				  state.units[ptr].containingScope && state.units[ptr].containingScope !==
				  a.scope
			  ) {
				  return;
			  }

			  state.units[ptr].main.remove();
		  };
	  };
  };
  exports.deleteFromCache_ = function (a) {
	  return function (state) {
		  return function () {
			  delete state.units[a.id];
		  };
	  };
  };
  exports.sendToTop_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr].main.parentNode.prepend(state.units[ptr].main);
		  };
	  };
  };
})(PS["Deku.Interpret"] = PS["Deku.Interpret"] || {});
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  var Data_Int = $PS["Data.Int"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var n = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * n + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
  exports["random"] = $foreign.random;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Interpret"] = $PS["Deku.Interpret"] || {};
  var exports = $PS["Deku.Interpret"];
  var $foreign = $PS["Deku.Interpret"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Random = $PS["Effect.Random"];                
  var effectfulDOMInterpret = {
      ids: Data_Functor.map(Effect.functorEffect)(Data_Show.show(Data_Show.showNumber))(Effect_Random.random),
      makeElement: $foreign.makeElement,
      makeRoot: $foreign.makeRoot_,
      makeText: $foreign.makeText_,
      makePursx: $foreign.makePursx_,
      setAttribute: $foreign.setAttribute_,
      setText: $foreign.setText_,
      sendToTop: $foreign.sendToTop_,
      makeNoop: $foreign.makeNoop_,
      deleteFromCache: $foreign.deleteFromCache_,
      giveNewParent: $foreign.giveNewParent_,
      disconnectElement: $foreign.disconnectElement_
  };
  exports["effectfulDOMInterpret"] = effectfulDOMInterpret;
  exports["makeFFIDOMSnapshot"] = $foreign.makeFFIDOMSnapshot;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deku.Pursx"] = $PS["Deku.Pursx"] || {};
  var exports = $PS["Deku.Pursx"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Internal = $PS["Deku.Internal"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];
  var pursxToElementNil = {
      pursxToElement: function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      cache: Foreign_Object.empty,
                      element: function (v3) {
                          return function (v4) {
                              return Control_Plus.empty(FRP_Event.plusEvent);
                          };
                      }
                  };
              };
          };
      }
  };
  var pursxToElement = function (dict) {
      return dict.pursxToElement;
  };
  var pursxToElementConsAttr = function () {
      return function (dictPursxToElement) {
          return function (dictIsSymbol) {
              return {
                  pursxToElement: function (pxScope) {
                      return function (v) {
                          return function (r) {
                              var v1 = pursxToElement(dictPursxToElement)(pxScope)(Type_Proxy["Proxy"].value)(r);
                              return {
                                  cache: Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(true)(v1.cache),
                                  element: function (parent) {
                                      return function (v2) {
                                          return Control_Alt.alt(FRP_Event.altEvent)(Data_Functor.map(FRP_Event.functorEvent)(Data_Profunctor.lcmap(Data_Profunctor.profunctorFn)(Deku_Attribute.unsafeUnAttribute)(function (v3) {
                                              return v2.setAttribute({
                                                  id: Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value) + pxScope,
                                                  key: v3.key,
                                                  value: v3.value
                                              });
                                          }))(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(r)))(v1.element(parent)(v2));
                                      };
                                  }
                              };
                          };
                      };
                  }
              };
          };
      };
  };
  var pursxToElementConsElt = function () {
      return function (dictPursxToElement) {
          return function (dictIsSymbol) {
              return {
                  pursxToElement: function (pxScope) {
                      return function (v) {
                          return function (r) {
                              var v1 = Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(r);
                              var v2 = pursxToElement(dictPursxToElement)(pxScope)(Type_Proxy["Proxy"].value)(r);
                              return {
                                  cache: Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(false)(v2.cache),
                                  element: function (info) {
                                      return function (di) {
                                          return Control_Alt.alt(FRP_Event.altEvent)(Deku_Internal["__internalDekuFlatten"](Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value) + pxScope)(di)(v1))(v2.element(info)(di));
                                      };
                                  }
                              };
                          };
                      };
                  }
              };
          };
      };
  };                                    
  var nut = function (dictPlant) {
      return function (seed) {
          return Deku_Control.plant(dictPlant)(seed);
      };
  };
  var makePursx$prime = function (dictIsSymbol) {
      return function (dictIsSymbol1) {
          return function () {
              return function () {
                  return function (dictPursxToElement) {
                      return function (verb) {
                          return function (html) {
                              return function (r) {
                                  var go = function (v) {
                                      return function (v1) {
                                          return FRP_Event.makeEvent(function (k1) {
                                              return function __do() {
                                                  var me = v1.ids();
                                                  var pxScope = v1.ids();
                                                  v.raiseId(me)();
                                                  var v2 = pursxToElement(dictPursxToElement)(pxScope)(Type_Proxy["Proxy"].value)(r);
                                                  return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k1(v1.deleteFromCache({
                                                      id: me
                                                  }))))(FRP_Event.subscribe(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event.bang(v1.makePursx({
                                                      id: me,
                                                      parent: v.parent,
                                                      cache: v2.cache,
                                                      scope: pxScope,
                                                      dkScope: v.scope,
                                                      html: Data_Symbol.reflectSymbol(dictIsSymbol)(html),
                                                      verb: Data_Symbol.reflectSymbol(dictIsSymbol1)(verb)
                                                  })))(v2.element(v)(v1)))(k1))();
                                              };
                                          });
                                      };
                                  };
                                  return go;
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var makePursx = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (dictPursxToElement) {
                  return makePursx$prime(dictIsSymbol)({
                      reflectSymbol: function () {
                          return "~";
                      }
                  })()()(dictPursxToElement)(Type_Proxy["Proxy"].value);
              };
          };
      };
  };
  exports["nut"] = nut;
  exports["makePursx"] = makePursx;
  exports["makePursx'"] = makePursx$prime;
  exports["pursxToElementConsElt"] = pursxToElementConsElt;
  exports["pursxToElementConsAttr"] = pursxToElementConsAttr;
  exports["pursxToElementNil"] = pursxToElementNil;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);
(function(exports) {
  /* no-redeclare global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };

  exports.clearTimeout = function (id) {
    return function () {
      clearTimeout(id);
    };
  };
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Timer"] = $PS["Effect.Timer"] || {};
  var exports = $PS["Effect.Timer"];
  var $foreign = $PS["Effect.Timer"];
  var Data_Ord = $PS["Data.Ord"];
  var eqTimeoutId = {
      eq: function (x) {
          return function (y) {
              return x === y;
          };
      }
  };
  var ordTimeoutId = {
      compare: function (x) {
          return function (y) {
              return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
          };
      },
      Eq0: function () {
          return eqTimeoutId;
      }
  };
  exports["ordTimeoutId"] = ordTimeoutId;
  exports["setTimeout"] = $foreign.setTimeout;
  exports["clearTimeout"] = $foreign.clearTimeout;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Behavior"] = $PS["FRP.Behavior"] || {};
  var exports = $PS["FRP.Behavior"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];                
  var ABehavior = function (x) {
      return x;
  };
  var step = function (dictIsEvent) {
      return function (a) {
          return function (e) {
              return FRP_Event_Class.sampleOn(dictIsEvent)(Control_Alt.alt((dictIsEvent.Plus0()).Alt0())(FRP_Event_Class.bang(dictIsEvent)(a))(e));
          };
      };
  };
  var sample = function (v) {
      return function (e) {
          return v(e);
      };
  };
  var functorABehavior = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (e) {
                      return v(Data_Functor.map(dictFunctor)(function (v1) {
                          return function ($66) {
                              return v1(f($66));
                          };
                      })(e));
                  };
              };
          }
      };
  };
  var sampleBy = function (dictIsEvent) {
      return function (f) {
          return function (b) {
              return function (e) {
                  return sample(Data_Functor.map(functorABehavior((dictIsEvent.Filterable1()).Functor1()))(f)(b))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Function.applyFlipped)(e));
              };
          };
      };
  };
  var sample_ = function (dictIsEvent) {
      return sampleBy(dictIsEvent)(Data_Function["const"]);
  };
  var behavior = ABehavior;
  var switcher = function (b0) {
      return function (e) {
          return behavior(function (s) {
              return FRP_Event_Class.keepLatest(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(sample(b0)(s)))(Data_Functor.map(FRP_Event.functorEvent)(function (b) {
                  return sample(b)(s);
              })(e)));
          });
      };
  };
  var applyABehavior = function (dictFunctor) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (e) {
                      return v1(v(Data_Functor.map(dictFunctor)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(e)));
                  };
              };
          },
          Functor0: function () {
              return functorABehavior(dictFunctor);
          }
      };
  };
  exports["behavior"] = behavior;
  exports["step"] = step;
  exports["sample"] = sample;
  exports["sampleBy"] = sampleBy;
  exports["sample_"] = sample_;
  exports["switcher"] = switcher;
  exports["functorABehavior"] = functorABehavior;
  exports["applyABehavior"] = applyABehavior;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports.requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["document"] = $foreign.document;
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
})(PS);
(function(exports) {
  "use strict";

  exports.clientX = function (e) {
    return e.clientX;
  };

  exports.clientY = function (e) {
    return e.clientY;
  };

  exports.button = function (e) {
    return e.button;
  };
})(PS["Web.UIEvent.MouseEvent"] = PS["Web.UIEvent.MouseEvent"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.UIEvent.MouseEvent"] = $PS["Web.UIEvent.MouseEvent"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent"];
  var $foreign = $PS["Web.UIEvent.MouseEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                        
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("MouseEvent");
  exports["fromEvent"] = fromEvent;
  exports["clientX"] = $foreign.clientX;
  exports["clientY"] = $foreign.clientY;
  exports["button"] = $foreign.button;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event.Mouse"] = $PS["FRP.Event.Mouse"] || {};
  var exports = $PS["FRP.Event.Mouse"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_MouseEvent = $PS["Web.UIEvent.MouseEvent"];
  var withButtons = function (v) {
      return function (e) {
          return FRP_Event.makeEvent(function (k) {
              return FRP_Event.subscribe(e)(function (value) {
                  return function __do() {
                      var buttonsValue = Effect_Ref.read(v.buttons)();
                      return k({
                          value: value,
                          buttons: buttonsValue
                      })();
                  };
              });
          });
      };
  };
  var getMouse = function __do() {
      var position = Effect_Ref["new"](Data_Maybe.Nothing.value)();
      var buttons = Effect_Ref["new"](Data_Set.empty)();
      var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
      var mouseMoveListener = Web_Event_EventTarget.eventListener(function (e) {
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
              return Effect_Ref.write(new Data_Maybe.Just({
                  x: Web_UIEvent_MouseEvent.clientX(me),
                  y: Web_UIEvent_MouseEvent.clientY(me)
              }))(position);
          })(Web_UIEvent_MouseEvent.fromEvent(e));
      })();
      var mouseDownListener = Web_Event_EventTarget.eventListener(function (e) {
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
              return Effect_Ref.modify(Data_Set.insert(Data_Ord.ordInt)(Web_UIEvent_MouseEvent.button(me)))(buttons);
          })(Web_UIEvent_MouseEvent.fromEvent(e));
      })();
      var mouseUpListener = Web_Event_EventTarget.eventListener(function (e) {
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
              return Effect_Ref.modify(Data_Set["delete"](Data_Ord.ordInt)(Web_UIEvent_MouseEvent.button(me)))(buttons);
          })(Web_UIEvent_MouseEvent.fromEvent(e));
      })();
      Web_Event_EventTarget.addEventListener(Data_Newtype.wrap()("mousemove"))(mouseMoveListener)(false)(target)();
      Web_Event_EventTarget.addEventListener(Data_Newtype.wrap()("mousedown"))(mouseDownListener)(false)(target)();
      Web_Event_EventTarget.addEventListener(Data_Newtype.wrap()("mouseup"))(mouseUpListener)(false)(target)();
      var dispose = function __do() {
          Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap()("mousemove"))(mouseMoveListener)(false)(target)();
          Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap()("mousedown"))(mouseDownListener)(false)(target)();
          return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap()("mouseup"))(mouseUpListener)(false)(target)();
      };
      return {
          position: position,
          buttons: buttons,
          dispose: dispose
      };
  };
  var down = FRP_Event.makeEvent(function (k) {
      return function __do() {
          var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
          var mouseDownListener = Web_Event_EventTarget.eventListener(function (e) {
              return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
                  return k(Web_UIEvent_MouseEvent.button(me));
              })(Web_UIEvent_MouseEvent.fromEvent(e));
          })();
          Web_Event_EventTarget.addEventListener(Data_Newtype.wrap()("mousedown"))(mouseDownListener)(false)(target)();
          return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap()("mousedown"))(mouseDownListener)(false)(target);
      };
  });
  exports["getMouse"] = getMouse;
  exports["down"] = down;
  exports["withButtons"] = withButtons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Behavior.Mouse"] = $PS["FRP.Behavior.Mouse"] || {};
  var exports = $PS["FRP.Behavior.Mouse"];
  var Data_Functor = $PS["Data.Functor"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Mouse = $PS["FRP.Event.Mouse"];
  var buttons = function (m) {
      return FRP_Behavior.behavior(function (e) {
          return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
              return v.value(v.buttons);
          })(FRP_Event_Mouse.withButtons(m)(e));
      });
  };
  exports["buttons"] = buttons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event.Time"] = $PS["FRP.Event.Time"] || {};
  var exports = $PS["FRP.Event.Time"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Now = $PS["Effect.Now"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Timer = $PS["Effect.Timer"];
  var FRP_Event = $PS["FRP.Event"];                            
  var withTime = function (e) {
      return FRP_Event.makeEvent(function (k) {
          return FRP_Event.subscribe(e)(function (value) {
              return function __do() {
                  var time = Effect_Now.now();
                  return k({
                      time: time,
                      value: value
                  })();
              };
          });
      });
  };
  var delay = function (n) {
      return function (e) {
          return FRP_Event.makeEvent(function (k) {
              return function __do() {
                  var tid = Effect_Ref["new"](Data_Monoid.mempty(Data_Set.monoidSet(Effect_Timer.ordTimeoutId)))();
                  var canceler = FRP_Event.subscribe(e)(function (a) {
                      return function __do() {
                          var localId = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                          var id = Effect_Timer.setTimeout(n)(function __do() {
                              k(a)();
                              var lid = Effect_Ref.read(localId)();
                              return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(function (id) {
                                  return Effect_Ref.modify_(Data_Set["delete"](Effect_Timer.ordTimeoutId)(id))(tid);
                              })(lid)();
                          })();
                          Effect_Ref.write(new Data_Maybe.Just(id))(localId)();
                          return Effect_Ref.modify_(Data_Semigroup.append(Data_Set.semigroupSet(Effect_Timer.ordTimeoutId))(Data_Set.singleton(id)))(tid)();
                      };
                  })();
                  return function __do() {
                      var ids = Effect_Ref.read(tid)();
                      Data_Foldable.for_(Effect.applicativeEffect)(Data_Set.foldableSet)(ids)(Effect_Timer.clearTimeout)();
                      return canceler();
                  };
              };
          });
      };
  };
  exports["withTime"] = withTime;
  exports["delay"] = delay;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Behavior.Time"] = $PS["FRP.Behavior.Time"] || {};
  var exports = $PS["FRP.Behavior.Time"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Time = $PS["FRP.Event.Time"];                
  var instant = FRP_Behavior.behavior(function (e) {
      return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
          return v.value(v.time);
      })(FRP_Event_Time.withTime(e));
  });
  var seconds = Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))((function () {
      var $4 = Data_Time_Duration.toDuration(Data_Time_Duration.durationSeconds);
      return function ($5) {
          return $4(Data_DateTime_Instant.unInstant($5));
      };
  })())(instant);
  exports["seconds"] = seconds;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event.Animate"] = $PS["FRP.Event.Animate"] || {};
  var exports = $PS["FRP.Event.Animate"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var animationFrameEvent = FRP_Event.makeEvent(function (k) {
      return function __do() {
          var w = Web_HTML.window();
          var running = Effect_Ref["new"](true)();
          var fx = Data_Functor["void"](Effect.functorEffect)(Data_Function.flip(Web_HTML_Window.requestAnimationFrame)(w)(function __do() {
              var r$prime = Effect_Ref.read(running)();
              return Control_Applicative.when(Effect.applicativeEffect)(r$prime)(function __do() {
                  k(Data_Unit.unit)();
                  return fx();
              })();
          }));
          fx();
          return Effect_Ref.write(false)(running);
      };
  });
  exports["animationFrameEvent"] = animationFrameEvent;
})(PS);
(function(exports) {
  const _____$__$_$$_vbus = "_____$__$_$$_vbus";
  exports.unsafeMarkAsVbus = (a) => {
	  a[_____$__$_$$_vbus] = _____$__$_$$_vbus;
	  return a;
  };
  exports.unsafeDestroyS = (s) => () => {
	  for (const key in s) {
		  delete s[key];
	  }
  };
  exports.unsafePE = (u) => () => {
	  const doAssigns = (s, p, e, u) => {
		  const ok = Object.keys(u);
		  for (var i = 0; i < ok.length; i++) {
			  if (
				  u[ok[i]] instanceof Object &&
				  u[ok[i]][_____$__$_$$_vbus] === _____$__$_$$_vbus
			  ) {
				  const p0 = {};
				  const e0 = {};
				  doAssigns(s, p0, e0, u[ok[i]]);
				  p[ok[i]] = p0;
				  e[ok[i]] = e0;
			  } else {
				  const rn = `${Math.random()}`;
				  s[rn] = {};
				  p[ok[i]] = (v) => () => {
					  const rnk = Object.keys(s[rn]);
					  for (var j = 0; j < rnk.length; j++) {
						  s[rn][rnk[j]](v)();
					  }
				  };
				  e[ok[i]] = (f) => () => {
					  const k = `${Math.random()}`;
					  s[rn][k] = f;
					  return () => {
						  delete s[rn][k];
					  };
				  };
			  }
		  }
	  };
	  const s = {};
	  const p = {};
	  const e = {};
	  doAssigns(s, p, e, u);
	  return { p: p, e: e, s: s };
  };
})(PS["FRP.Event.VBus"] = PS["FRP.Event.VBus"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FRP.Event.VBus"] = $PS["FRP.Event.VBus"] || {};
  var exports = $PS["FRP.Event.VBus"];
  var $foreign = $PS["FRP.Event.VBus"];
  var Data_Unit = $PS["Data.Unit"];
  var FRP_Event = $PS["FRP.Event"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var vbusNil = {
      vb: function (v) {
          return function (v1) {
              return function (v2) {
                  return {};
              };
          };
      }
  };
  var vb = function (dict) {
      return dict.vb;
  };
  var vbus = function () {
      return function (dictVBus) {
          return function (v) {
              return function (f) {
                  var vbd = vb(dictVBus)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                  return FRP_Event.makeEvent(function (k) {
                      return function __do() {
                          var upe = $foreign.unsafePE(vbd)();
                          k(f(upe.p)(upe.e))();
                          return $foreign.unsafeDestroyS(upe.s);
                      };
                  });
              };
          };
      };
  };
  var vbusCons1 = function (dictIsSymbol) {
      return function () {
          return function () {
              return function () {
                  return function (dictVBus) {
                      return function (dictVBus1) {
                          return function () {
                              return function () {
                                  return function () {
                                      return function () {
                                          return {
                                              vb: function (v) {
                                                  return function (v1) {
                                                      return function (v2) {
                                                          return Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)($foreign.unsafeMarkAsVbus(vb(dictVBus)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)))(vb(dictVBus1)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value));
                                                      };
                                                  };
                                              }
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var vbusCons2 = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (dictVBus) {
                  return function () {
                      return function () {
                          return function () {
                              return function () {
                                  return {
                                      vb: function (v) {
                                          return function (v1) {
                                              return function (v2) {
                                                  return Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(Data_Unit.unit)(vb(dictVBus)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value));
                                              };
                                          };
                                      }
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["vbus"] = vbus;
  exports["vbusNil"] = vbusNil;
  exports["vbusCons1"] = vbusCons1;
  exports["vbusCons2"] = vbusCons2;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.width, r.height);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["fill"] = $foreign.fill;
  exports["arc"] = $foreign.arc;
  exports["fillRect"] = $foreign.fillRect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Random.LCG"] = $PS["Random.LCG"] || {};
  var exports = $PS["Random.LCG"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var $$Math = $PS["Math"];
  var unSeed = function (v) {
      return v;
  };
  var seedMin = 1;
  var lcgM = 2147483647;
  var seedMax = lcgM - 1 | 0;
  var mkSeed = function (x) {
      var ensureBetween = function (min) {
          return function (max) {
              return function (n) {
                  var rangeSize = max - min | 0;
                  var n$prime = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(n)(rangeSize);
                  var $13 = n$prime < min;
                  if ($13) {
                      return n$prime + max | 0;
                  };
                  return n$prime;
              };
          };
      };
      return ensureBetween(seedMin)(seedMax)(x);
  };                                                                                                         
  var lcgC = 0;
  var lcgA = 48271;
  var lcgPerturb = function (d) {
      return function (v) {
          return Data_Maybe.fromJust()(Data_Int.fromNumber($$Math.remainder(Data_Int.toNumber(lcgA) * Data_Int.toNumber(v) + Data_Int.toNumber(d))(Data_Int.toNumber(lcgM))));
      };
  };
  var lcgNext = lcgPerturb(lcgC);
  exports["mkSeed"] = mkSeed;
  exports["unSeed"] = unSeed;
  exports["lcgM"] = lcgM;
  exports["lcgNext"] = lcgNext;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Test.QuickCheck.Gen"] = $PS["Test.QuickCheck.Gen"] || {};
  var exports = $PS["Test.QuickCheck.Gen"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var $$Math = $PS["Math"];
  var Random_LCG = $PS["Random.LCG"];
  var unGen = function (v) {
      return v;
  };                                      
  var lcgStep = (function () {
      var f = function (s) {
          return new Data_Tuple.Tuple(Random_LCG.unSeed(s.newSeed), (function () {
              var $32 = {};
              for (var $33 in s) {
                  if ({}.hasOwnProperty.call(s, $33)) {
                      $32[$33] = s[$33];
                  };
              };
              $32.newSeed = Random_LCG.lcgNext(s.newSeed);
              return $32;
          })());
      };
      return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(f);
  })();                                              
  var functorGen = Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity);
  var uniform = Data_Functor.map(functorGen)(function (n) {
      return Data_Int.toNumber(n) / Data_Int.toNumber(Random_LCG.lcgM);
  })(lcgStep);
  var evalGen = function ($49) {
      return Control_Monad_State.evalState(unGen($49));
  };
  var bindGen = Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity);
  var applyGen = Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity);
  var chooseInt$prime = function (a) {
      return function (b) {
          var numB = Data_Int.toNumber(b);
          var numA = Data_Int.toNumber(a);
          var clamp = function (x) {
              return numA + $$Math.remainder(x)((numB - numA) + 1);
          };
          var choose31BitPosNumber = Data_Functor.map(functorGen)(Data_Int.toNumber)(lcgStep);
          var choose32BitPosNumber = Control_Apply.apply(applyGen)(Data_Functor.map(functorGen)(Data_Semiring.add(Data_Semiring.semiringNumber))(choose31BitPosNumber))(Data_Functor.map(functorGen)(Data_Semiring.mul(Data_Semiring.semiringNumber)(2.0))(choose31BitPosNumber));
          return Data_Functor.map(functorGen)(function ($55) {
              return Data_Int.floor(clamp($55));
          })(choose32BitPosNumber);
      };
  };
  var chooseInt = function (a) {
      return function (b) {
          var $46 = a <= b;
          if ($46) {
              return chooseInt$prime(a)(b);
          };
          return chooseInt$prime(b)(a);
      };
  };
  var applicativeGen = Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity);
  var elements = function (xs) {
      return Control_Bind.bind(bindGen)(chooseInt(0)(Data_Array_NonEmpty.length(xs) - 1 | 0))(function (n) {
          return Control_Applicative.pure(applicativeGen)(Data_Array_NonEmpty.unsafeIndex()(xs)(n));
      });
  };
  exports["elements"] = elements;
  exports["evalGen"] = evalGen;
  exports["uniform"] = uniform;
  exports["functorGen"] = functorGen;
  exports["applyGen"] = applyGen;
  exports["applicativeGen"] = applicativeGen;
  exports["bindGen"] = bindGen;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Test.QuickCheck.Arbitrary"] = $PS["Test.QuickCheck.Arbitrary"] || {};
  var exports = $PS["Test.QuickCheck.Arbitrary"];
  var Test_QuickCheck_Gen = $PS["Test.QuickCheck.Gen"];
  var arbitrary = function (dict) {
      return dict.arbitrary;
  };
  var arbNumber = {
      arbitrary: Test_QuickCheck_Gen.uniform
  };
  exports["arbitrary"] = arbitrary;
  exports["arbNumber"] = arbNumber;
})(PS);
(function(exports) {
  var makeid = function (length) {
	  var result = "";
	  var characters =
		  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	  var charactersLength = characters.length;
	  for (var i = 0; i < length; i++) {
		  result += characters.charAt(Math.floor(Math.random() * charactersLength));
	  }
	  return result;
  };
  var NUMERIC = "numeric";
  var SUDDEN = "sudden";
  var CANCELLATION = "cancellation";
  var NO_RAMP = "step";
  var LINEAR_RAMP = "linear";
  var EXPONENTIAL_RAMP = "exponential";
  var ENVELOPE = "envelope";
  var isCancellation = function (a) {
	  return a.type === CANCELLATION;
  };
  var protoSetter = function (thingee, deprecatedTimeToSet, param) {
	  if (param.type === SUDDEN) {
		  thingee.value = param.value.n;
	  } else {
		  if (param.type === NUMERIC) {
			  thingee[
				  param.value.t.type === NO_RAMP
					  ? "setValueAtTime"
					  : param.value.t.type === LINEAR_RAMP
					  ? "linearRampToValueAtTime"
					  : param.value.t.type === EXPONENTIAL_RAMP
					  ? "exponentialRampToValueAtTime"
					  : "linearRampToValueAtTime"
			  ](param.value.n, deprecatedTimeToSet + param.value.o);
		  } else if (isCancellation(param)) {
			  param.value.hold
				  ? thingee.cancelAndHoldAtTime(deprecatedTimeToSet + param.value.o)
				  : thingee.cancelScheduledValues(deprecatedTimeToSet + param.value.o);
		  } else if (param.type === ENVELOPE) {
			  // envelope is last option
			  const tm = deprecatedTimeToSet + param.value.o;
			  thingee.cancelScheduledValues(Math.max(0.0, tm));
			  thingee.setValueCurveAtTime(param.value.p, tm, param.value.d);
		  } else {
			  throw new Error("No idea what to do with " + JSON.stringify(param));
		  }
	  }
  };
  var workletSetter = function (unit, paramName, deprecatedTimeToSet, param) {
	  return protoSetter(
		  unit.parameters.get(paramName),
		  deprecatedTimeToSet,
		  param
	  );
  };
  var genericSetter = function (unit, name, deprecatedTimeToSet, param) {
	  return protoSetter(unit[name], deprecatedTimeToSet, param);
  };
  var addToScope = function (ptr, scope, state) {
	  if (!state.scopes[scope.value]) {
		  state.scopes[scope.value] = [];
	  }
	  state.scopes[scope.value].push(ptr);
	  state.units[ptr].scope = scope;
  };
  var doDeferredConnections = function (ptr, state) {
	  if (state.toConnect[ptr]) {
		  state.toConnect[ptr].forEach(function (conn) {
			  if (conn.w) {
				  if (state.units[conn.w]) {
					  conn.f();
				  } else {
					  if (!state.toConnect[conn.w]) {
						  state.toConnect[conn.w] = [];
					  }
					  state.toConnect[conn.w].push({ f: conn.f });
				  }
			  } else {
				  conn.f();
			  }
		  });
		  delete state.toConnect[ptr];
	  }
  };
  var mConnectXToY_ = function (x, y, state) {
	  if (y.type === "just") {
		  connectXToY_(x, y.value, state);
	  }
  };
  var connectXToY_ = function (x, y, state) {
	  var connectF = function () {
		  state.units[x].outgoing.push(y);
		  state.units[y].incoming.push(x);
		  if (!state.units[x].pendingOn) {
			  state.units[x].main.connect(state.units[y].main);
			  if (state.units[y].se) {
				  state.units[x].main.connect(state.units[y].se);
			  }
		  }
	  };
	  if (!state.units[x]) {
		  if (!state.toConnect[x]) {
			  state.toConnect[x] = [];
		  }
		  var conn = { f: connectF };
		  if (y !== x && !state.units[y]) {
			  conn.w = y;
		  }
		  state.toConnect[x].push(conn);
		  return;
	  }
	  if (!state.units[y]) {
		  if (!state.toConnect[y]) {
			  state.toConnect[y] = [];
		  }
		  var conn = { f: connectF };
		  if (y !== x && !state.units[x]) {
			  conn.w = x;
		  }
		  state.toConnect[y].push(conn);
		  return;
	  }
	  connectF();
  };

  exports.deleteFromCache_ = function (a) {
	  return function (state) {
		  return function () {
			  delete state.units[a.id];
		  };
	  };
  };
  exports.connectXToY_ = function (parameters) {
	  return function (state) {
		  return function () {
			  connectXToY_(parameters["from"], parameters["to"], state);
		  };
	  };
  };
  var disconnectXFromY_ = function (x) {
	  return function (y) {
		  return function (state) {
			  return function () {
				  state.units[x].outgoing = state.units[x].outgoing.filter(function (i) {
					  return !(i === y);
				  });
				  state.units[y].incoming = state.units[y].incoming.filter(function (i) {
					  return !(i === x);
				  });
				  state.units[x].main.disconnect(state.units[y].main);
				  if (state.units[y].se) {
					  state.units[x].main.disconnect(state.units[y].se);
				  }
				  if (state.units[ptr].scope === "@fan@") {
					  return;
				  }
				  const scope = state.units[ptr].scope;
				  state.scopes[scope].forEach((scp) => {
					  delete state.units[scp];
				  });
				  delete state.scopes[scope];
			  };
		  };
	  };
  };
  exports.disconnectXFromY_ = function (a) {
	  return function (state) {
		  return function () {
			  return disconnectXFromY_(a.from)(a.to)(state)();
		  };
	  };
  };
  // allpass
  exports.makeAllpass_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "allpass",
					  Q: a.q,
					  frequency: a.frequency,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // analyser
  exports.makeAnalyser_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var analyserSideEffectFunction = a.cb;
			  var dest = new AnalyserNode(state.context, a);
			  // unsubscribe is effect unit
			  var unsubscribe = analyserSideEffectFunction(dest)();
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  analyserOrig: analyserSideEffectFunction,
				  analyser: unsubscribe,
				  main: state.context.createGain(),
				  se: dest,
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // audio worklet node
  exports.makeAudioWorkletNode_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var opts = a.options;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: new AudioWorkletNode(state.context, opts.name, {
					  numberOfInputs: opts.numberOfInputs,
					  numberOfOutputs: opts.numberOfOutputs,
					  outputChannelCount: opts.outputChannelCount,
					  parameterData: opts.parameterData,
					  processorOptions: opts.processorOptions,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // bandpass
  exports.makeBandpass_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "bandpass",
					  Q: a.q,
					  frequency: a.frequency,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // constant
  exports.makeConstant_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new ConstantSourceNode(context, i);
			  };
			  var resume = { offset: a.offset };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  main: createClosure(state.context, resume), // needed so that setters don't error out, even though not started yet
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  exports.makeConvolver_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: new ConvolverNode(state.context, { buffer: a.buffer }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // delay
  exports.makeDelay_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new DelayNode(state.context, {
					  delayTime: a.delayTime,
					  maxDelayTime: a.maxDelayTime,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // dynamicsCompressor
  exports.makeDynamicsCompressor_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new DynamicsCompressorNode(state.context, {
					  knee: a.knee,
					  ratio: a.ratio,
					  threshold: a.threshold,
					  attack: a.attack,
					  release: a.release,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // gain
  var makeGain_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new GainNode(state.context, {
					  gain: a.gain,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };
  exports.makeGain_ = makeGain_;
  // highpass
  exports.makeHighpass_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "highpass",
					  Q: a.q,
					  frequency: a.frequency,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // highshelf
  exports.makeHighshelf_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "highshelf",
					  frequency: a.frequency,
					  gain: a.gain,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  exports.makeIIRFilter_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: new IIRFilterNode(state.context, {
					  feedforward: a.feedforward,
					  feedback: a.feedback,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // loopBuf
  exports.makeLoopBuf_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new AudioBufferSourceNode(context, i);
			  };
			  var resume = {
				  loop: true,
				  buffer: a.buffer,
				  loopStart: a.loopStart,
				  loopEnd: a.loopEnd,
				  playbackRate: a.playbackRate,
			  };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  main: createClosure(state.context, resume), // needed so that setters don't error out, even though not started yet
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // lowpass
  exports.makeLowpass_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "lowpass",
					  Q: a.q,
					  frequency: a.frequency,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // lowshelf
  exports.makeLowshelf_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "lowshelf",
					  frequency: a.frequency,
					  gain: a.gain,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // media element

  exports.makeMediaElement_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var elt = a.element;
			  var createClosure = function () {
				  var unit = state.context.createMediaElementSource(elt);
				  return unit;
			  };
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  createClosure: createClosure,
				  resumeClosure: {},
				  main: createClosure(),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // microphone
  exports.makeMicrophone_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[a.id] = {
				  main: state.context.createMediaStreamSource(a.microphone),
				  outgoing: [a.parent],
				  incoming: [],
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // notch
  exports.makeNotch_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "notch",
					  frequency: a.frequency,
					  Q: a.q,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // peaking
  exports.makePeaking_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new BiquadFilterNode(state.context, {
					  type: "peaking",
					  frequency: a.frequency,
					  Q: a.q,
					  gain: a.gain,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // periodic osc
  exports.makePeriodicOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  var opts = {
					  frequency: i.frequency,
					  periodicWave:
						  i.spec.type === "wave"
							  ? i.spec.value
							  : makePeriodicWaveImpl(state.context)(i.spec.value.real)(
									  i.spec.value.img
							    )(),
				  };
				  var o = new OscillatorNode(context, opts);
				  return o;
			  };
			  var resume = { frequency: a.frequency, type: "custom", spec: a.spec };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  main: createClosure(state.context, resume), // needed so that setters don't error out, even though not started yet
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // playBuf
  exports.makePlayBuf_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  var opts = {
					  loop: i.loop,
					  buffer: i.buffer,
					  playbackRate: i.playbackRate,
				  };
				  return new AudioBufferSourceNode(context, opts);
			  };
			  var resume = {
				  loop: false,
				  buffer: a.buffer,
				  playbackRate: a.playbackRate,
				  bufferOffset: a.bufferOffset,
				  duration: a.duration,
			  };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  main: createClosure(state.context, resume), // needed so that setters don't error out, even though not started yet
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset,
			  // 		a.bufferOffset,
			  // 		a.duration.type === "just" ? a.duration.value : undefined
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // recorder
  exports.makeRecorder_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var mediaRecorderSideEffectFn = a.cb;
			  var dest = state.context.createMediaStreamDestination();
			  var mediaRecorder = new MediaRecorder(dest.stream);
			  mediaRecorderSideEffectFn(mediaRecorder)();
			  mediaRecorder.start();
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  recorderOrig: mediaRecorderSideEffectFn,
				  recorder: mediaRecorder,
				  main: state.context.createGain(),
				  se: dest,
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // sawtooth osc
  exports.makeSawtoothOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new OscillatorNode(context, i);
			  };
			  var resume = { frequency: a.frequency, type: "sawtooth" };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  main: createClosure(state.context, resume), // needed so that setters don't error out, even though not started yet
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // sine osc
  exports.makeSinOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new OscillatorNode(context, i);
			  };
			  var resume = { frequency: a.frequency, type: "sine" };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  main: createClosure(state.context, resume), // needed so that setters don't error out, even though not started yet
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // make speaker
  exports.makeSpeaker_ = function (a) {
	  return function (state) {
		  return function () {
			  state.units[a.id] = {
				  outgoing: [],
				  incoming: [],
				  main: state.context.createGain(),
				  se: state.context.destination,
			  };
		  };
	  };
  };
  // pan
  exports.makeStereoPanner_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new StereoPannerNode(state.context, {
					  pan: a.pan,
				  }),
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
		  };
	  };
  };

  // square osc
  exports.makeSquareOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new OscillatorNode(context, i);
			  };
			  var resume = { frequency: a.frequency, type: "square" };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  main: createClosure(state.context, resume), // needed so that setters don't error out, even though not started yet
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };

  // triangle osc
  exports.makeTriangleOsc_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  // var onOff = a.onOff;
			  var createClosure = function (context, i) {
				  return new OscillatorNode(context, i);
			  };
			  var resume = { frequency: a.frequency, type: "triangle" };
			  state.units[ptr] = {
				  //outgoing: [a.parent],
				  outgoing: [],
				  incoming: [],
				  resume: resume,
				  createClosure: createClosure,
				  onOff: false,
				  pendingOn: true,
				  main: createClosure(state.context, resume), // needed so that setters don't error out, even though not started yet
			  };
			  addToScope(ptr, a.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, a.parent, state);
			  // var oo = isOn(onOff.onOff);
			  // if (oo) {
			  // 	state.units[ptr].main.start(
			  // 		state.deprecatedWriteHead + onOff.timeOffset
			  // 	);
			  // }
			  // state.units[ptr].onOff = oo;
		  };
	  };
  };
  // wave shaper
  exports.makeWaveShaper_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.curve;
			  var b = aa.oversample;
			  state.units[ptr] = {
				  outgoing: [a.parent],
				  incoming: [],
				  main: new WaveShaperNode(state.context, {
					  curve: a,
					  oversample: b.type,
				  }),
			  };
			  addToScope(ptr, aa.scope, state);
			  doDeferredConnections(ptr, state);
			  mConnectXToY_(ptr, aa.parent, state);
		  };
	  };
  };

  // set analyser

  exports.setAnalyserNodeCb_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.cb;
			  if (state.units[ptr].analyserOrig === a) {
				  return;
			  }
			  // first, unsubscribe
			  state.units[ptr].analyser && state.units[ptr].analyser();
			  state.units[ptr].analyser = a(state.units[ptr].se)();
			  state.units[ptr].analyserOrig = a;
		  };
	  };
  };

  // recorder

  // setting makes us stop the previous one if it exists
  exports.setMediaRecorderCb_ = function (aa) {
	  return function (state) {
		  return function () {
			  var a = aa.cb;
			  var ptr = aa.id;
			  if (state.units[ptr].recorderOrig === a) {
				  return;
			  }
			  state.units[ptr].recorder && state.units[ptr].recorder.stop();
			  var mediaRecorderSideEffectFn = a;
			  state.units[ptr].recorderOrig = a;
			  var mediaRecorder = new MediaRecorder(state.units[ptr].se);
			  mediaRecorderSideEffectFn(mediaRecorder)();
			  mediaRecorder.start();
		  };
	  };
  };

  // waveshaper curve
  exports.setWaveShaperCurve_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.curve;
			  state.units[ptr].main.curve = a;
		  };
	  };
  };
  exports.setAudioWorkletParameter_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.paramName;
			  var b = aa.paramValue;
			  workletSetter(state.units[ptr].main, a, state.deprecatedWriteHead, b);
		  };
	  };
  };
  const recalcResume = function (a, u, v) {
	  if (u.resume) {
		  if (a.value.n !== undefined) {
			  u.resume[v] = a.value.n;
		  }
	  }
  };
  exports.setGain_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.gain;
			  genericSetter(
				  state.units[ptr].main,
				  "gain",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "gain");
		  };
	  };
  };

  exports.setQ_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.q;
			  genericSetter(state.units[ptr].main, "Q", state.deprecatedWriteHead, a);
			  recalcResume(a, state.units[ptr], "Q");
		  };
	  };
  };
  exports.setBuffer_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.buffer;
			  if (state.units[ptr].resume) {
				  state.units[ptr].resume.buffer = a;
			  }
		  };
	  };
  };
  exports.setConvolverBuffer_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var buffer = aa.buffer;
			  state.units[ptr].main.buffer = buffer;
		  };
	  };
  };
  exports.setPeriodicOsc_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.spec;
			  if (state.units[ptr].resume) {
				  state.units[ptr].resume.spec = a;
			  }
		  };
	  };
  };
  exports.setPan_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.pan;
			  genericSetter(state.units[ptr].main, "pan", state.deprecatedWriteHead, a);
			  recalcResume(a, state.units[ptr], "pan");
		  };
	  };
  };
  exports.setThreshold_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.threshold;
			  genericSetter(
				  state.units[ptr].main,
				  "threshold",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "threshold");
		  };
	  };
  };
  exports.setLoopStart_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.loopStart;
			  state.units[ptr].main.loopStart = a;
			  state.units[ptr].resume.loopStart = a;
		  };
	  };
  };
  exports.setLoopEnd_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.loopEnd;
			  state.units[ptr].main.loopEnd = a;
			  state.units[ptr].resume.loopEnd = a;
		  };
	  };
  };
  exports.setBufferOffset_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.bufferOffset;
			  state.units[ptr].resume.bufferOffset = a;
		  };
	  };
  };
  exports.setDuration_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.duration;
			  state.units[ptr].duration = a;
		  };
	  };
  };
  exports.setRelease_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.release;
			  genericSetter(
				  state.units[ptr].main,
				  "release",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "release");
		  };
	  };
  };
  exports.setOffset_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.offset;
			  genericSetter(
				  state.units[ptr].main,
				  "offset",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "offset");
		  };
	  };
  };

  exports.setRatio_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.ratio;
			  genericSetter(
				  state.units[ptr].main,
				  "ratio",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "ratio");
		  };
	  };
  };
  exports.setAttack_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.attack;
			  genericSetter(
				  state.units[ptr].main,
				  "attack",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "attack");
		  };
	  };
  };
  exports.setKnee_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.knee;
			  genericSetter(
				  state.units[ptr].main,
				  "knee",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "knee");
		  };
	  };
  };
  exports.setDelay_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.delayTime;
			  genericSetter(
				  state.units[ptr].main,
				  "delayTime",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "delayTime");
		  };
	  };
  };
  exports.setPlaybackRate_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.playbackRate;
			  genericSetter(
				  state.units[ptr].main,
				  "playbackRate",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "playbackRate");
		  };
	  };
  };
  exports.setFrequency_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var a = aa.frequency;
			  genericSetter(
				  state.units[ptr].main,
				  "frequency",
				  state.deprecatedWriteHead,
				  a
			  );
			  recalcResume(a, state.units[ptr], "frequency");
		  };
	  };
  };
  ///////////
  exports.setOnOff_ = function (aa) {
	  return function (state) {
		  return function () {
			  var ptr = aa.id;
			  var onOff = aa.onOff;
			  if (onOff.x.type === "on") {
				  setOn_(ptr)(onOff)(state)();
			  } else if (onOff.x.type === "off") {
				  setOff_(ptr)(onOff)(state)();
			  } else if (onOff.x.type === "offOn") {
				  setOff_(ptr)({ x: { type: "off" }, o: 0.0 })(state)();
				  setOn_(ptr)({ x: { type: "on" }, o: onOff.o })(state)();
			  }
		  };
	  };
  };

  var setOn_ = function (ptr) {
	  return function (onOffInstr) {
		  return function (state) {
			  return function () {
				  if (state.units[ptr].onOff) {
					  return;
				  }
				  state.units[ptr].pendingOn = false;
				  state.units[ptr].onOff = true;
				  state.units[ptr].main = state.units[ptr].createClosure(
					  state.context,
					  state.units[ptr].resume
				  );
				  for (var i = 0; i < state.units[ptr].outgoing.length; i++) {
					  var ogi = state.units[ptr].outgoing[i];
					  state.units[ptr].main.connect(state.units[ogi].main);
					  if (state.units[ogi].se) {
						  state.units[ptr].main.connect(state.units[ogi].se);
					  }
				  }
				  if (state.units[ptr].resume && state.units[ptr].resume.bufferOffset) {
					  if (state.units[ptr].resume.duration.type === "just") {
						  state.units[ptr].main.start(
							  state.deprecatedWriteHead + onOffInstr.o,
							  state.units[ptr].resume.bufferOffset,
							  state.units[ptr].resume.duration.value
						  );
					  } else {
						  state.units[ptr].main.start(
							  state.deprecatedWriteHead + onOffInstr.o,
							  state.units[ptr].resume.bufferOffset
						  );
					  }
				  } else if (
					  state.units[ptr].resume &&
					  state.units[ptr].resume.loopStart
				  ) {
					  state.units[ptr].main.start(
						  state.deprecatedWriteHead + onOffInstr.o,
						  state.units[ptr].resume.loopStart
					  );
				  } else {
					  state.units[ptr].main.start(state.deprecatedWriteHead + onOffInstr.o);
				  }
			  };
		  };
	  };
  };

  var setOff_ = function (ptr) {
	  return function (onOffInstr) {
		  return function (state) {
			  return function () {
				  if (!state.units[ptr].onOff) {
					  return;
				  }
				  state.units[ptr].onOff = false;
				  var oldMain = state.units[ptr].main;
				  var oldOutgoing = state.units[ptr].outgoing.slice();
				  // defer disconnection until stop has happened
				  oldMain.addEventListener("ended", () => {
					  oldMain.disconnect();
				  });
				  oldMain.stop(state.deprecatedWriteHead + onOffInstr.o);
			  };
		  };
	  };
  };
  ///////////
  // various and sundry... mostly sundry... //
  exports.makeFloatArray = function (fa) {
	  return function () {
		  var r = new Float32Array(fa.length);
		  for (var i = 0; i < fa.length; i++) {
			  r[i] = fa[i];
		  }
		  return r;
	  };
  };

  exports.stopMediaRecorder = function (mediaRecorder) {
	  return function () {
		  mediaRecorder.stop();
	  };
  };
  // currently, there is no unsubscription logic to the media recorder
  // in the case where a second subscriber is called, it will simply
  // overwrite the first subscriber
  // because of this, care needs to be taken in calling the "setMediaRecorderCb" function
  // it will unset the previous one, which will result in the recording starting from the moment
  // of being set
  // if it is set in a loop, then there will effectively be no recording, as it will only capture the
  // last couple milliseconds of the loop
  exports.mediaRecorderToBlob = function (mimeType) {
	  return function (handler) {
		  return function (mediaRecorder) {
			  return function () {
				  var chunks = [];
				  mediaRecorder.ondataavailable = function (evt) {
					  chunks.push(evt.data);
				  };

				  mediaRecorder.onstop = function () {
					  var blob = new Blob(chunks, { type: mimeType });
					  handler(blob)();
					  chunks = null;
				  };
			  };
		  };
	  };
  };
  exports.getBrowserMediaStreamImpl = function (audio) {
	  return function (video) {
		  return function () {
			  return navigator.mediaDevices.getUserMedia({
				  audio: audio,
				  video: video,
			  });
		  };
	  };
  };

  // https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData
  exports.getByteFrequencyData = function (analyserNode) {
	  return function () {
		  var dataArray = new Uint8Array(analyserNode.frequencyBinCount);
		  analyserNode.getByteFrequencyData(dataArray);
		  return dataArray;
	  };
  };
  exports.constant0Hack_ = function (context) {
	  return function () {
		  var constant = context.createConstantSource();
		  constant.offset.value = 0.0;
		  constant.connect(context.destination);
		  constant.start();
		  return function () {
			  constant.stop();
			  constant.disconnect(context.destination);
		  };
	  };
  };

  var makePeriodicWaveImpl = function (ctx) {
	  return function (real_) {
		  return function (imag_) {
			  return function () {
				  var real = new Float32Array(real_.length);
				  var imag = new Float32Array(imag_.length);
				  for (var i = 0; i < real_.length; i++) {
					  real[i] = real_[i];
				  }
				  for (var i = 0; i < imag_.length; i++) {
					  imag[i] = imag_[i];
				  }
				  return ctx.createPeriodicWave(real, imag, {
					  disableNormalization: true,
				  });
			  };
		  };
	  };
  };                                                  
  exports.makeFFIAudioSnapshot = function (audioCtx) {
	  return function () {
		  return {
			  context: audioCtx,
			  deprecatedWriteHead: 0.0,
			  units: {},
			  unqidfr: makeid(10),
			  scopes: {},
			  unsu: {},
			  toConnect: {},
		  };
	  };
  };

  exports.close_ = function (audioCtx) {
	  return function () {
		  audioCtx.close();
	  };
  };
  exports.fetchArrayBuffer = function (s) {
	  return function () {
		  {
			  return fetch(s).then(
				  function (b) {
					  return b.arrayBuffer();
				  },
				  function (e) {
					  console.error("Error fetching buffer", e);
					  return Promise.reject(e);
				  }
			  );
		  }
	  };
  };
  exports.decodeAudioDataFromArrayBuffer = function (ctx) {
	  return function (b) {
		  return function () {
			  return ctx.decodeAudioData(b);
		  };
	  };
  };
  exports.context_ = function () {
	  return new (window.AudioContext || window.webkitAudioContext)();
  };
  exports.contextState_ = function (audioCtx) {
	  return function () {
		  return audioCtx.state;
	  };
  };
  exports.getAudioClockTime = function (ctx) {
	  return function () {
		  return ctx.currentTime;
	  };
  };
})(PS["WAGS.Interpret"] = PS["WAGS.Interpret"] || {});
(function(exports) {
  "use strict";

  exports.createObjectURL = function (blob) {
    return function () {
      return URL.createObjectURL(blob);
    };
  };
})(PS["Web.File.Url"] = PS["Web.File.Url"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.File.Url"] = $PS["Web.File.Url"] || {};
  var exports = $PS["Web.File.Url"];
  var $foreign = $PS["Web.File.Url"];
  exports["createObjectURL"] = $foreign.createObjectURL;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Interpret"] = $PS["WAGS.Interpret"] || {};
  var exports = $PS["WAGS.Interpret"];
  var $foreign = $PS["WAGS.Interpret"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Promise = $PS["Control.Promise"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_File_Url = $PS["Web.File.Url"];
  var mediaRecorderToUrl = function (s) {
      return function (cb) {
          return function (mr) {
              return Data_Function.flip($foreign.mediaRecorderToBlob(s))(mr)((function () {
                  var $32 = Control_Bind.bindFlipped(Effect.bindEffect)(cb);
                  return function ($33) {
                      return $32(Web_File_Url.createObjectURL($33));
                  };
              })());
          };
      };
  };
  var effectfulAudioInterpret = {
      ids: Data_Functor.map(Effect.functorEffect)(Data_Show.show(Data_Show.showNumber))(Effect_Random.random),
      deleteFromCache: $foreign.deleteFromCache_,
      disconnectXFromY: $foreign.disconnectXFromY_,
      connectXToY: $foreign.connectXToY_,
      makeAllpass: $foreign.makeAllpass_,
      makeAnalyser: $foreign.makeAnalyser_,
      makeAudioWorkletNode: $foreign.makeAudioWorkletNode_,
      makeBandpass: $foreign.makeBandpass_,
      makeConstant: $foreign.makeConstant_,
      makeConvolver: $foreign.makeConvolver_,
      makeDelay: $foreign.makeDelay_,
      makeDynamicsCompressor: $foreign.makeDynamicsCompressor_,
      makeGain: $foreign.makeGain_,
      makeHighpass: $foreign.makeHighpass_,
      makeHighshelf: $foreign.makeHighshelf_,
      makeIIRFilter: $foreign.makeIIRFilter_,
      makeLoopBuf: $foreign.makeLoopBuf_,
      makeLowpass: $foreign.makeLowpass_,
      makeLowshelf: $foreign.makeLowshelf_,
      makeMediaElement: $foreign.makeMediaElement_,
      makeMicrophone: $foreign.makeMicrophone_,
      makeNotch: $foreign.makeNotch_,
      makePeaking: $foreign.makePeaking_,
      makePeriodicOsc: $foreign.makePeriodicOsc_,
      makePlayBuf: $foreign.makePlayBuf_,
      makeRecorder: $foreign.makeRecorder_,
      makeSawtoothOsc: $foreign.makeSawtoothOsc_,
      makeSinOsc: $foreign.makeSinOsc_,
      makeSpeaker: $foreign.makeSpeaker_,
      setDuration: $foreign.setDuration_,
      makeSquareOsc: $foreign.makeSquareOsc_,
      makeStereoPanner: $foreign.makeStereoPanner_,
      makeTriangleOsc: $foreign.makeTriangleOsc_,
      makeWaveShaper: $foreign.makeWaveShaper_,
      setAnalyserNodeCb: $foreign.setAnalyserNodeCb_,
      setMediaRecorderCb: $foreign.setMediaRecorderCb_,
      setWaveShaperCurve: $foreign.setWaveShaperCurve_,
      setAudioWorkletParameter: $foreign.setAudioWorkletParameter_,
      setBuffer: $foreign.setBuffer_,
      setConvolverBuffer: $foreign.setConvolverBuffer_,
      setPeriodicOsc: $foreign.setPeriodicOsc_,
      setOnOff: $foreign.setOnOff_,
      setBufferOffset: $foreign.setBufferOffset_,
      setLoopStart: $foreign.setLoopStart_,
      setLoopEnd: $foreign.setLoopEnd_,
      setRatio: $foreign.setRatio_,
      setOffset: $foreign.setOffset_,
      setAttack: $foreign.setAttack_,
      setGain: $foreign.setGain_,
      setQ: $foreign.setQ_,
      setPan: $foreign.setPan_,
      setThreshold: $foreign.setThreshold_,
      setRelease: $foreign.setRelease_,
      setKnee: $foreign.setKnee_,
      setDelay: $foreign.setDelay_,
      setPlaybackRate: $foreign.setPlaybackRate_,
      setFrequency: $foreign.setFrequency_
  };
  var decodeAudioDataFromUri = function (ctx) {
      return function (s) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Promise.toAffE($foreign.fetchArrayBuffer(s)))((function () {
              var $34 = $foreign.decodeAudioDataFromArrayBuffer(ctx);
              return function ($35) {
                  return Control_Promise.toAffE($34($35));
              };
          })());
      };
  };
  var contextState = function (dictMonadEffect) {
      var $36 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($37) {
          return $36($foreign.contextState_($37));
      };
  };
  var context = function (dictMonadEffect) {
      return Effect_Class.liftEffect(dictMonadEffect)($foreign.context_);
  };
  var constant0Hack = function (dictMonadEffect) {
      var $40 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($41) {
          return $40($foreign.constant0Hack_($41));
      };
  };
  var close = function (dictMonadEffect) {
      return function (ctx) {
          return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
              var st = contextState(Effect_Class.monadEffectEffect)(ctx)();
              return Control_Applicative.when(Effect.applicativeEffect)(st !== "closed")($foreign.close_(ctx))();
          });
      };
  };
  var browserMediaStreamToBrowserMicrophone = Unsafe_Coerce.unsafeCoerce;
  var browserMediaStreamToBrowserCamera = Unsafe_Coerce.unsafeCoerce;
  var getMicrophoneAndCamera = function (audio) {
      return function (video) {
          return Data_Functor.map(Effect_Aff.functorAff)(function (i) {
              return {
                  microphone: (function () {
                      if (audio) {
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(browserMediaStreamToBrowserMicrophone(i));
                      };
                      return Data_Maybe.Nothing.value;
                  })(),
                  camera: (function () {
                      if (video) {
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(browserMediaStreamToBrowserCamera(i));
                      };
                      return Data_Maybe.Nothing.value;
                  })()
              };
          })(Control_Promise.toAffE($foreign.getBrowserMediaStreamImpl(audio)(video)));
      };
  };
  exports["mediaRecorderToUrl"] = mediaRecorderToUrl;
  exports["decodeAudioDataFromUri"] = decodeAudioDataFromUri;
  exports["context"] = context;
  exports["constant0Hack"] = constant0Hack;
  exports["contextState"] = contextState;
  exports["close"] = close;
  exports["getMicrophoneAndCamera"] = getMicrophoneAndCamera;
  exports["effectfulAudioInterpret"] = effectfulAudioInterpret;
  exports["getByteFrequencyData"] = $foreign.getByteFrequencyData;
  exports["getAudioClockTime"] = $foreign.getAudioClockTime;
  exports["stopMediaRecorder"] = $foreign.stopMediaRecorder;
  exports["makeFloatArray"] = $foreign.makeFloatArray;
  exports["makeFFIAudioSnapshot"] = $foreign.makeFFIAudioSnapshot;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Clock"] = $PS["WAGS.Clock"] || {};
  var exports = $PS["WAGS.Clock"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Timer = $PS["Effect.Timer"];
  var FRP_Event = $PS["FRP.Event"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var withACTime = function (ctx) {
      return function (e) {
          return FRP_Event.makeEvent(function (k) {
              return FRP_Event.subscribe(e)(function (value) {
                  return function __do() {
                      var acTime = WAGS_Interpret.getAudioClockTime(ctx)();
                      return k({
                          acTime: acTime,
                          value: value
                      })();
                  };
              });
          });
      };
  };
  var interval = function (ctx) {
      return function (iN) {
          return function (e) {
              var mkTimeout = function (k) {
                  return function (n) {
                      return function (cref) {
                          return function (iref) {
                              return function (vref) {
                                  return function (rt) {
                                      return function __do() {
                                          var go0 = Effect_Ref.read(cref)();
                                          return Control_Applicative.when(Effect.applicativeEffect)(go0)(function __do() {
                                              var t = WAGS_Interpret.getAudioClockTime(ctx)();
                                              var tid = Effect_Timer.setTimeout(Data_Int.round(Data_Ord.max(Data_Ord.ordNumber)(n - t - 4.0e-2)(1.0e-2) * 1000.0))(function __do() {
                                                  var go1 = Effect_Ref.read(cref)();
                                                  return Control_Applicative.when(Effect.applicativeEffect)(go1)(function __do() {
                                                      Effect_Ref.write(n)(vref)();
                                                      k(n)();
                                                      return mkTimeout(k)(n + rt)(cref)(iref)(vref)(rt)();
                                                  })();
                                              })();
                                              return Effect_Ref.write(new Data_Maybe.Just(tid))(iref)();
                                          })();
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
              return FRP_Event.makeEvent(function (k) {
                  return function __do() {
                      var cref = Effect_Ref["new"](true)();
                      var iref = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var acTime = WAGS_Interpret.getAudioClockTime(ctx)();
                      var vref = Effect_Ref["new"](acTime + iN)();
                      mkTimeout(k)(iN)(cref)(iref)(vref)(iN)();
                      var unsub = FRP_Event.subscribe(e)(function (newN) {
                          return function __do() {
                              Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(iref))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Effect_Timer.clearTimeout))();
                              var cT = Effect_Ref.read(vref)();
                              return mkTimeout(k)(cT + newN)(cref)(iref)(vref)(newN)();
                          };
                      })();
                      return Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(unsub)(Effect_Ref.write(false)(cref)))(Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(iref))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Effect_Timer.clearTimeout)));
                  };
              });
          };
      };
  };
  exports["withACTime"] = withACTime;
  exports["interval"] = interval;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Core"] = $PS["WAGS.Core"] || {};
  var exports = $PS["WAGS.Core"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var Effect = $PS["Effect"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Begin = (function () {
      function Begin() {

      };
      Begin.value = new Begin();
      return Begin;
  })();
  var Middle = (function () {
      function Middle() {

      };
      Middle.value = new Middle();
      return Middle;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var TTT7 = (function () {
      function TTT7() {

      };
      TTT7.value = new TTT7();
      return TTT7;
  })();
  var TTT8 = (function () {
      function TTT8() {

      };
      TTT8.value = new TTT8();
      return TTT8;
  })();
  var TTT9 = (function () {
      function TTT9() {

      };
      TTT9.value = new TTT9();
      return TTT9;
  })();
  var TTT10 = (function () {
      function TTT10() {

      };
      TTT10.value = new TTT10();
      return TTT10;
  })();
  var TTT11 = (function () {
      function TTT11() {

      };
      TTT11.value = new TTT11();
      return TTT11;
  })();
  var TTT12 = (function () {
      function TTT12() {

      };
      TTT12.value = new TTT12();
      return TTT12;
  })();
  var TTT13 = (function () {
      function TTT13() {

      };
      TTT13.value = new TTT13();
      return TTT13;
  })();
  var InitializeTriangleOsc = function (x) {
      return x;
  };
  var InitializeStereoPanner = function (x) {
      return x;
  };
  var InitializeSquareOsc = function (x) {
      return x;
  };
  var InitializeSinOsc = function (x) {
      return x;
  };
  var InitializeSawtoothOsc = function (x) {
      return x;
  };
  var InitializeRecorder = function (x) {
      return x;
  };
  var InitializeMicrophone = function (x) {
      return x;
  };
  var InitializeGain = function (x) {
      return x;
  };
  var InitializeConvolver = function (x) {
      return x;
  };
  var InitializeConstant = function (x) {
      return x;
  };
  var Speakers = (function () {
      function Speakers() {

      };
      Speakers.value = new Speakers();
      return Speakers;
  })();
  var Discrete = (function () {
      function Discrete() {

      };
      Discrete.value = new Discrete();
      return Discrete;
  })();
  var ClampedMax = (function () {
      function ClampedMax() {

      };
      ClampedMax.value = new ClampedMax();
      return ClampedMax;
  })();
  var Max = (function () {
      function Max() {

      };
      Max.value = new Max();
      return Max;
  })();
  var Explicit = (function () {
      function Explicit() {

      };
      Explicit.value = new Explicit();
      return Explicit;
  })();
  var Sound = (function () {
      function Sound(value0) {
          this.value0 = value0;
      };
      Sound.create = function (value0) {
          return new Sound(value0);
      };
      return Sound;
  })();
  var Silence = (function () {
      function Silence() {

      };
      Silence.value = new Silence();
      return Silence;
  })();
  var mixNodeAudible = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return function (dictTypeEquals2) {
              return {
                  mix: function (i) {
                      return Data_Variant.inj()({
                          reflectSymbol: function () {
                              return "node";
                          }
                      })(Type_Proxy["Proxy"].value)(i);
                  }
              };
          };
      };
  };
  var mixEventEventChannelAudib = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return function (dictTypeEquals2) {
              return {
                  mix: function (i) {
                      return Data_Variant.inj()({
                          reflectSymbol: function () {
                              return "dynamicChannels";
                          }
                      })(Type_Proxy["Proxy"].value)(i);
                  }
              };
          };
      };
  };
  var mixEventAudibleAudible = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return function (dictTypeEquals2) {
              return {
                  mix: function (i) {
                      return Data_Variant.inj()({
                          reflectSymbol: function () {
                              return "eventfulNode";
                          }
                      })(Type_Proxy["Proxy"].value)(i);
                  }
              };
          };
      };
  };
  var mixArrayNodeAudible = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return function (dictTypeEquals2) {
              return {
                  mix: function (i) {
                      return Data_Variant.inj()({
                          reflectSymbol: function () {
                              return "fixedChannels";
                          }
                      })(Type_Proxy["Proxy"].value)(i);
                  }
              };
          };
      };
  };
  var mix = function (dict) {
      return dict.mix;
  };   
  var _twoX = Data_Variant.inj()({
      reflectSymbol: function () {
          return "2x";
      }
  })(Type_Proxy["Proxy"].value)(Data_Unit.unit);
  var __internalWagsFlatten = function (parent) {
      return function (v) {
          return function (v1) {
              var node = function (v2) {
                  return v2({
                      parent: parent,
                      scope: "trivial",
                      raiseId: Data_Monoid.mempty(Data_Monoid.monoidFn(Effect.monoidEffect(Data_Monoid.monoidUnit)))
                  })(v);
              };
              return Data_Variant.match()()()({
                  fixedChannels: function (v2) {
                      return Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(node)(v2);
                  },
                  eventfulNode: function (v2) {
                      return FRP_Event_Class.keepLatest(FRP_Event.eventIsEvent)(Data_Functor.map(FRP_Event.functorEvent)(__internalWagsFlatten(parent)(v))(v2));
                  },
                  node: node,
                  dynamicChannels: function (v2) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var cancelInner = Effect_Ref["new"](Foreign_Object.empty)();
                              var cancelOuter = FRP_Event.subscribe(v2)(function (inner) {
                                  return function __do() {
                                      var myUnsubId = v.ids();
                                      var myUnsub = Effect_Ref["new"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                                      var eltsUnsubId = v.ids();
                                      var eltsUnsub = Effect_Ref["new"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                                      var myId = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                                      var myImmediateCancellation = Effect_Ref["new"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                                      var myScope = v.ids();
                                      var stageRef = Effect_Ref["new"](Begin.value)();
                                      var c0 = FRP_Event.subscribe(inner)(function (kid$prime) {
                                          return function __do() {
                                              var stage = Effect_Ref.read(stageRef)();
                                              if (kid$prime instanceof Silence && stage instanceof Middle) {
                                                  Effect_Ref.write(End.value)(stageRef)();
                                                  var mic = Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(myId))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (old) {
                                                      return k(v.disconnectXFromY({
                                                          from: old,
                                                          to: parent
                                                      }));
                                                  })))(Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(myUnsub))))(Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(eltsUnsub))))(Effect_Ref.modify_(Foreign_Object["delete"](myUnsubId))(cancelInner)))(Effect_Ref.modify_(Foreign_Object["delete"](eltsUnsubId))(cancelInner));
                                                  return Control_Apply.applySecond(Effect.applyEffect)(Effect_Ref.write(mic)(myImmediateCancellation))(mic)();
                                              };
                                              if (kid$prime instanceof Sound && stage instanceof Begin) {
                                                  Effect_Ref.write(Middle.value)(stageRef)();
                                                  var av = Effect_AVar.empty();
                                                  var c1 = FRP_Event.subscribe(kid$prime.value0({
                                                      parent: parent,
                                                      scope: myScope,
                                                      raiseId: function (id) {
                                                          return Data_Functor["void"](Effect.functorEffect)(Effect_AVar.tryPut(id)(av));
                                                      }
                                                  })(v))(k)();
                                                  var cncl = Effect_AVar.take(av)(function (q) {
                                                      if (q instanceof Data_Either.Right) {
                                                          return function __do() {
                                                              Effect_Ref.write(new Data_Maybe.Just(q.value0))(myId)();
                                                              Effect_Ref.modify_(Foreign_Object.insert(eltsUnsubId)(c1))(cancelInner)();
                                                              return Effect_Ref.write(c1)(eltsUnsub)();
                                                          };
                                                      };
                                                      if (q instanceof Data_Either.Left) {
                                                          return Effect_Exception.throwException(q.value0);
                                                      };
                                                      throw new Error("Failed pattern match at WAGS.Core (line 1046, column 46 - line 1051, column 47): " + [ q.constructor.name ]);
                                                  })();
                                                  return cncl();
                                              };
                                              return Data_Unit.unit;
                                          };
                                      })();
                                      Effect_Ref.write(c0)(myUnsub)();
                                      Effect_Ref.modify_(Foreign_Object.insert(myUnsubId)(c0))(cancelInner)();
                                      return Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(myImmediateCancellation))();
                                  };
                              })();
                              return function __do() {
                                  Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.fold(Foreign_Object.foldableObject)(Effect.monoidEffect(Data_Monoid.monoidUnit)))();
                                  return cancelOuter();
                              };
                          };
                      });
                  }
              })(v1);
          };
      };
  };
  exports["mix"] = mix;
  exports["Sound"] = Sound;
  exports["Silence"] = Silence;
  exports["_twoX"] = _twoX;
  exports["TTT7"] = TTT7;
  exports["TTT8"] = TTT8;
  exports["TTT9"] = TTT9;
  exports["TTT10"] = TTT10;
  exports["TTT11"] = TTT11;
  exports["TTT12"] = TTT12;
  exports["TTT13"] = TTT13;
  exports["ClampedMax"] = ClampedMax;
  exports["Max"] = Max;
  exports["Explicit"] = Explicit;
  exports["Speakers"] = Speakers;
  exports["Discrete"] = Discrete;
  exports["InitializeConstant"] = InitializeConstant;
  exports["InitializeConvolver"] = InitializeConvolver;
  exports["InitializeGain"] = InitializeGain;
  exports["InitializeMicrophone"] = InitializeMicrophone;
  exports["InitializeRecorder"] = InitializeRecorder;
  exports["InitializeSawtoothOsc"] = InitializeSawtoothOsc;
  exports["InitializeSinOsc"] = InitializeSinOsc;
  exports["InitializeSquareOsc"] = InitializeSquareOsc;
  exports["InitializeStereoPanner"] = InitializeStereoPanner;
  exports["InitializeTriangleOsc"] = InitializeTriangleOsc;
  exports["__internalWagsFlatten"] = __internalWagsFlatten;
  exports["mixEventEventChannelAudib"] = mixEventEventChannelAudib;
  exports["mixEventAudibleAudible"] = mixEventAudibleAudible;
  exports["mixNodeAudible"] = mixNodeAudible;
  exports["mixArrayNodeAudible"] = mixArrayNodeAudible;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Common"] = $PS["WAGS.Common"] || {};
  var exports = $PS["WAGS.Common"];
  var Control_Category = $PS["Control.Category"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Variant = $PS["Data.Variant"];
  var Data_Variant_Maybe = $PS["Data.Variant.Maybe"];
  var Data_Vec = $PS["Data.Vec"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Core = $PS["WAGS.Core"];                
  var WaveShaperOptions = (function () {
      function WaveShaperOptions() {

      };
      WaveShaperOptions.value = new WaveShaperOptions();
      return WaveShaperOptions;
  })();
  var PlayBufOptions = (function () {
      function PlayBufOptions() {

      };
      PlayBufOptions.value = new PlayBufOptions();
      return PlayBufOptions;
  })();
  var PeriodicOscOptions = (function () {
      function PeriodicOscOptions() {

      };
      PeriodicOscOptions.value = new PeriodicOscOptions();
      return PeriodicOscOptions;
  })();
  var PeakingOptions = (function () {
      function PeakingOptions() {

      };
      PeakingOptions.value = new PeakingOptions();
      return PeakingOptions;
  })();
  var NotchOptions = (function () {
      function NotchOptions() {

      };
      NotchOptions.value = new NotchOptions();
      return NotchOptions;
  })();
  var LowshelfOptions = (function () {
      function LowshelfOptions() {

      };
      LowshelfOptions.value = new LowshelfOptions();
      return LowshelfOptions;
  })();
  var LowpassOptions = (function () {
      function LowpassOptions() {

      };
      LowpassOptions.value = new LowpassOptions();
      return LowpassOptions;
  })();
  var LoopBufOptions = (function () {
      function LoopBufOptions() {

      };
      LoopBufOptions.value = new LoopBufOptions();
      return LoopBufOptions;
  })();
  var HighshelfOptions = (function () {
      function HighshelfOptions() {

      };
      HighshelfOptions.value = new HighshelfOptions();
      return HighshelfOptions;
  })();
  var HighpassOptions = (function () {
      function HighpassOptions() {

      };
      HighpassOptions.value = new HighpassOptions();
      return HighpassOptions;
  })();
  var DynamicsCompressorOptions = (function () {
      function DynamicsCompressorOptions() {

      };
      DynamicsCompressorOptions.value = new DynamicsCompressorOptions();
      return DynamicsCompressorOptions;
  })();
  var DelayOptions = (function () {
      function DelayOptions() {

      };
      DelayOptions.value = new DelayOptions();
      return DelayOptions;
  })();
  var BandpassOptions = (function () {
      function BandpassOptions() {

      };
      BandpassOptions.value = new BandpassOptions();
      return BandpassOptions;
  })();
  var AllpassOptions = (function () {
      function AllpassOptions() {

      };
      AllpassOptions.value = new AllpassOptions();
      return AllpassOptions;
  })();
  var periodicOscSpecableVecNum = function (dictPos) {
      return {
          toPeriodicOscSpec: function (v) {
              return Data_Variant.inj()({
                  reflectSymbol: function () {
                      return "realImg";
                  }
              })(Type_Proxy["Proxy"].value)({
                  real: Data_Vec.toArray(v.value0),
                  img: Data_Vec.toArray(v.value1)
              });
          }
      };
  };
  var initialTriangleOscNumber = {
      toInitializeTriangleOsc: function ($265) {
          return WAGS_Core.InitializeTriangleOsc((function (v) {
              return {
                  frequency: v
              };
          })($265));
      }
  };
  var initialStereoPannerNumber = {
      toInitializeStereoPanner: function ($266) {
          return WAGS_Core.InitializeStereoPanner((function (v) {
              return {
                  pan: v
              };
          })($266));
      }
  };
  var initialSquareOscNumber = {
      toInitializeSquareOsc: function ($267) {
          return WAGS_Core.InitializeSquareOsc((function (v) {
              return {
                  frequency: v
              };
          })($267));
      }
  };
  var initialSinOscNumber = {
      toInitializeSinOsc: function ($268) {
          return WAGS_Core.InitializeSinOsc((function (v) {
              return {
                  frequency: v
              };
          })($268));
      }
  };
  var initialSawtoothOscNumber = {
      toInitializeSawtoothOsc: function ($269) {
          return WAGS_Core.InitializeSawtoothOsc((function (v) {
              return {
                  frequency: v
              };
          })($269));
      }
  };
  var initialRecorderMediaRecor = {
      toInitializeRecorder: function ($270) {
          return WAGS_Core.InitializeRecorder((function (v) {
              return {
                  cb: v
              };
          })($270));
      }
  };
  var initialMicrophoneBrowserM = {
      toInitializeMicrophone: function ($271) {
          return WAGS_Core.InitializeMicrophone((function (v) {
              return {
                  microphone: v
              };
          })($271));
      }
  };
  var initialIIRFilterVecNumber = function (dictTypeEquals) {
      return function (dictTypeEquals1) {
          return {
              toInitializeIIRFilter: function (v) {
                  return function (v1) {
                      return function (v2) {
                          return {
                              feedforward: Type_Equality.proof(Type_Equality.refl)(Safe_Coerce.coerce()(v.value0)),
                              feedback: Type_Equality.proof(Type_Equality.refl)(Safe_Coerce.coerce()(v.value1))
                          };
                      };
                  };
              }
          };
      };
  };
  var initialGainNumber = {
      toInitializeGain: function ($272) {
          return WAGS_Core.InitializeGain((function (v) {
              return {
                  gain: v
              };
          })($272));
      }
  };
  var initialConvolverBrowserAu = {
      toInitializeConvolver: function ($273) {
          return WAGS_Core.InitializeConvolver((function (v) {
              return {
                  buffer: v
              };
          })($273));
      }
  };
  var initialConstantNumber = {
      toInitializeConstant: function ($274) {
          return WAGS_Core.InitializeConstant((function (v) {
              return {
                  offset: v
              };
          })($274));
      }
  };
  var convertOptionWaveShaperOp1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionPlayBufOptio = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionPlayBufOptio1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionPlayBufOptio2 = {
      convertOption: function (v) {
          return function (v1) {
              return Data_Variant_Maybe.just;
          };
      }
  };
  var convertOptionPlayBufOptio3 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionPeriodicOscO = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionPeakingOptio = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionPeakingOptio1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionPeakingOptio2 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionNotchOptions = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionNotchOptions1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionLowshelfOpti = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionLowshelfOpti1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionLowpassOptio = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionLowpassOptio1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionLoopBufOptio = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionLoopBufOptio1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionLoopBufOptio2 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionLoopBufOptio4 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionHighshelfOpt = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionHighshelfOpt1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionHighpassOpti = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionHighpassOpti1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionDelayOptions = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionDelayOptions1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionBandpassOpti = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionBandpassOpti1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionAllpassOptio = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionAllpassOptio1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var toPeriodicOscSpec = function (dict) {
      return dict.toPeriodicOscSpec;
  };
  var convertOptionPeriodicOscO1 = function (dictPeriodicOscSpecable) {
      return {
          convertOption: function (v) {
              return function (v1) {
                  return toPeriodicOscSpec(dictPeriodicOscSpecable);
              };
          }
      };
  };
  var toInitializeWaveShaper = function (dict) {
      return dict.toInitializeWaveShaper;
  };
  var toInitializeTriangleOsc = function (dict) {
      return dict.toInitializeTriangleOsc;
  };
  var toInitializeStereoPanner = function (dict) {
      return dict.toInitializeStereoPanner;
  };
  var toInitializeSquareOsc = function (dict) {
      return dict.toInitializeSquareOsc;
  };
  var toInitializeSinOsc = function (dict) {
      return dict.toInitializeSinOsc;
  };
  var toInitializeSawtoothOsc = function (dict) {
      return dict.toInitializeSawtoothOsc;
  };
  var toInitializeRecorder = function (dict) {
      return dict.toInitializeRecorder;
  };
  var toInitializePlayBuf = function (dict) {
      return dict.toInitializePlayBuf;
  };
  var toInitializePeriodicOsc = function (dict) {
      return dict.toInitializePeriodicOsc;
  };
  var toInitializePeaking = function (dict) {
      return dict.toInitializePeaking;
  };
  var toInitializeNotch = function (dict) {
      return dict.toInitializeNotch;
  };
  var toInitializeMicrophone = function (dict) {
      return dict.toInitializeMicrophone;
  };
  var toInitializeLowshelf = function (dict) {
      return dict.toInitializeLowshelf;
  };
  var toInitializeLowpass = function (dict) {
      return dict.toInitializeLowpass;
  };
  var toInitializeLoopBuf = function (dict) {
      return dict.toInitializeLoopBuf;
  };
  var toInitializeIIRFilter = function (dict) {
      return dict.toInitializeIIRFilter;
  };
  var toInitializeHighshelf = function (dict) {
      return dict.toInitializeHighshelf;
  };
  var toInitializeHighpass = function (dict) {
      return dict.toInitializeHighpass;
  };
  var toInitializeGain = function (dict) {
      return dict.toInitializeGain;
  };
  var toInitializeDynamicsCompressor = function (dict) {
      return dict.toInitializeDynamicsCompressor;
  };
  var toInitializeDelay = function (dict) {
      return dict.toInitializeDelay;
  };
  var toInitializeConvolver = function (dict) {
      return dict.toInitializeConvolver;
  };
  var toInitializeConstant = function (dict) {
      return dict.toInitializeConstant;
  };
  var toInitializeBandpass = function (dict) {
      return dict.toInitializeBandpass;
  };
  var toInitializeAllpass = function (dict) {
      return dict.toInitializeAllpass;
  };
  var defaultWaveShaper = {
      oversample: WAGS_Core["_twoX"]
  };
  var initialWaveShaperRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeWaveShaper: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(WaveShaperOptions.value)(defaultWaveShaper)(provided);
          }
      };
  };
  var initialWaveShaperBrowserF = {
      toInitializeWaveShaper: (function () {
          var $275 = toInitializeWaveShaper(initialWaveShaperRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(convertOptionWaveShaperOp1)()()()({
              reflectSymbol: function () {
                  return "curve";
              }
          })))(ConvertableOptions.defaultsRecord()())));
          return function ($276) {
              return $275((function (v) {
                  return {
                      curve: v
                  };
              })($276));
          };
      })()
  };
  var defaultPlayBuf = {
      bufferOffset: 0.0,
      playbackRate: 1.0,
      duration: Data_Variant_Maybe.nothing
  };
  var initialPlayBufRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializePlayBuf: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(PlayBufOptions.value)(defaultPlayBuf)(provided);
          }
      };
  };
  var initialPlayBufBrowserAudi = {
      toInitializePlayBuf: (function () {
          var $277 = toInitializePlayBuf(initialPlayBufRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(convertOptionPlayBufOptio)()()()({
              reflectSymbol: function () {
                  return "buffer";
              }
          })))(ConvertableOptions.defaultsRecord()())));
          return function ($278) {
              return $277((function (v) {
                  return {
                      buffer: v
                  };
              })($278));
          };
      })()
  };
  var defaultPeriodicOsc = {};
  var initialPeriodicOscRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializePeriodicOsc: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(PeriodicOscOptions.value)(defaultPeriodicOsc)(provided);
          }
      };
  };
  var defaultPeaking = {
      q: 1.0,
      gain: 0.0
  };
  var initialPeakingRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializePeaking: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(PeakingOptions.value)(defaultPeaking)(provided);
          }
      };
  };
  var defaultNotch = {
      q: 1.0
  };
  var initialNotchRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeNotch: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(NotchOptions.value)(defaultNotch)(provided);
          }
      };
  };
  var defaultLowshelf = {
      gain: 0.0
  };
  var initialLowshelfRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeLowshelf: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(LowshelfOptions.value)(defaultLowshelf)(provided);
          }
      };
  };
  var defaultLowpass = {
      q: 1.0
  };
  var initialLowpassRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeLowpass: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(LowpassOptions.value)(defaultLowpass)(provided);
          }
      };
  };
  var initialLowpassInitialAudi = {
      toInitializeLowpass: (function () {
          var $285 = toInitializeLowpass(initialLowpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(convertOptionLowpassOptio1)()()()({
              reflectSymbol: function () {
                  return "frequency";
              }
          })))(ConvertableOptions.defaultsRecord()())));
          return function ($286) {
              return $285((function (v) {
                  return {
                      frequency: v
                  };
              })($286));
          };
      })()
  };
  var defaultLoopBuf = {
      loopStart: 0.0,
      loopEnd: 0.0,
      playbackRate: 1.0,
      duration: Data_Variant_Maybe.nothing
  };
  var initialLoopBufRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeLoopBuf: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(LoopBufOptions.value)(defaultLoopBuf)(provided);
          }
      };
  };
  var initialLoopBufBrowserAudi = {
      toInitializeLoopBuf: (function () {
          var $287 = toInitializeLoopBuf(initialLoopBufRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(convertOptionLoopBufOptio)()()()({
              reflectSymbol: function () {
                  return "buffer";
              }
          })))(ConvertableOptions.defaultsRecord()())));
          return function ($288) {
              return $287((function (v) {
                  return {
                      buffer: v
                  };
              })($288));
          };
      })()
  };
  var defaultHighshelf = {
      gain: 0.0
  };
  var initialHighshelfRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeHighshelf: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(HighshelfOptions.value)(defaultHighshelf)(provided);
          }
      };
  };
  var defaultHighpass = {
      q: 1.0
  };
  var initialHighpassRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeHighpass: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(HighpassOptions.value)(defaultHighpass)(provided);
          }
      };
  };
  var initialHighpassInitialAud = {
      toInitializeHighpass: (function () {
          var $291 = toInitializeHighpass(initialHighpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(convertOptionHighpassOpti1)()()()({
              reflectSymbol: function () {
                  return "frequency";
              }
          })))(ConvertableOptions.defaultsRecord()())));
          return function ($292) {
              return $291((function (v) {
                  return {
                      frequency: v
                  };
              })($292));
          };
      })()
  };
  var defaultDynamicsCompressor = {
      ratio: 12.0,
      attack: 3.0e-3,
      release: 0.25,
      knee: 30.0,
      threshold: -24.0
  };
  var initialDynamicsCompressor1 = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeDynamicsCompressor: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(DynamicsCompressorOptions.value)(defaultDynamicsCompressor)(provided);
          }
      };
  };
  var defaultDelay = {
      maxDelayTime: 1.0
  };
  var initialDelayRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeDelay: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(DelayOptions.value)(defaultDelay)(provided);
          }
      };
  };
  var initialDelayInitialAudioP = {
      toInitializeDelay: (function () {
          var $293 = toInitializeDelay(initialDelayRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(convertOptionDelayOptions1)()()()({
              reflectSymbol: function () {
                  return "delayTime";
              }
          })))(ConvertableOptions.defaultsRecord()())));
          return function ($294) {
              return $293((function (v) {
                  return {
                      delayTime: v
                  };
              })($294));
          };
      })()
  };
  var defaultBandpass = {
      q: 1.0
  };
  var initialBandpassRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeBandpass: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(BandpassOptions.value)(defaultBandpass)(provided);
          }
      };
  };
  var initialBandpassInitialAud = {
      toInitializeBandpass: (function () {
          var $295 = toInitializeBandpass(initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(convertOptionBandpassOpti1)()()()({
              reflectSymbol: function () {
                  return "frequency";
              }
          })))(ConvertableOptions.defaultsRecord()())));
          return function ($296) {
              return $295((function (v) {
                  return {
                      frequency: v
                  };
              })($296));
          };
      })()
  };
  var defaultAllpass = {
      q: 1.0
  };
  var initialAllpassRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeAllpass: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(AllpassOptions.value)(defaultAllpass)(provided);
          }
      };
  };
  var initialAllpassInitialAudi = {
      toInitializeAllpass: (function () {
          var $297 = toInitializeAllpass(initialAllpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(convertOptionAllpassOptio1)()()()({
              reflectSymbol: function () {
                  return "frequency";
              }
          })))(ConvertableOptions.defaultsRecord()())));
          return function ($298) {
              return $297((function (v) {
                  return {
                      frequency: v
                  };
              })($298));
          };
      })()
  };
  exports["toInitializeAllpass"] = toInitializeAllpass;
  exports["toInitializeBandpass"] = toInitializeBandpass;
  exports["toInitializeConstant"] = toInitializeConstant;
  exports["toInitializeConvolver"] = toInitializeConvolver;
  exports["toInitializeDelay"] = toInitializeDelay;
  exports["toInitializeDynamicsCompressor"] = toInitializeDynamicsCompressor;
  exports["toInitializeGain"] = toInitializeGain;
  exports["toInitializeHighpass"] = toInitializeHighpass;
  exports["toInitializeHighshelf"] = toInitializeHighshelf;
  exports["toInitializeIIRFilter"] = toInitializeIIRFilter;
  exports["toInitializeLoopBuf"] = toInitializeLoopBuf;
  exports["toInitializeLowpass"] = toInitializeLowpass;
  exports["toInitializeLowshelf"] = toInitializeLowshelf;
  exports["toInitializeMicrophone"] = toInitializeMicrophone;
  exports["toInitializeNotch"] = toInitializeNotch;
  exports["toInitializePeaking"] = toInitializePeaking;
  exports["toInitializePeriodicOsc"] = toInitializePeriodicOsc;
  exports["toInitializePlayBuf"] = toInitializePlayBuf;
  exports["toInitializeRecorder"] = toInitializeRecorder;
  exports["toInitializeSawtoothOsc"] = toInitializeSawtoothOsc;
  exports["toInitializeSinOsc"] = toInitializeSinOsc;
  exports["toInitializeSquareOsc"] = toInitializeSquareOsc;
  exports["toInitializeStereoPanner"] = toInitializeStereoPanner;
  exports["toInitializeTriangleOsc"] = toInitializeTriangleOsc;
  exports["toInitializeWaveShaper"] = toInitializeWaveShaper;
  exports["convertOptionAllpassOptio1"] = convertOptionAllpassOptio1;
  exports["convertOptionAllpassOptio"] = convertOptionAllpassOptio;
  exports["initialAllpassInitialAudi"] = initialAllpassInitialAudi;
  exports["initialAllpassRecord"] = initialAllpassRecord;
  exports["convertOptionBandpassOpti1"] = convertOptionBandpassOpti1;
  exports["convertOptionBandpassOpti"] = convertOptionBandpassOpti;
  exports["initialBandpassInitialAud"] = initialBandpassInitialAud;
  exports["initialBandpassRecord"] = initialBandpassRecord;
  exports["initialConstantNumber"] = initialConstantNumber;
  exports["initialConvolverBrowserAu"] = initialConvolverBrowserAu;
  exports["initialIIRFilterVecNumber"] = initialIIRFilterVecNumber;
  exports["convertOptionDelayOptions1"] = convertOptionDelayOptions1;
  exports["convertOptionDelayOptions"] = convertOptionDelayOptions;
  exports["initialDelayInitialAudioP"] = initialDelayInitialAudioP;
  exports["initialDelayRecord"] = initialDelayRecord;
  exports["initialDynamicsCompressor1"] = initialDynamicsCompressor1;
  exports["initialGainNumber"] = initialGainNumber;
  exports["convertOptionHighpassOpti1"] = convertOptionHighpassOpti1;
  exports["convertOptionHighpassOpti"] = convertOptionHighpassOpti;
  exports["initialHighpassInitialAud"] = initialHighpassInitialAud;
  exports["initialHighpassRecord"] = initialHighpassRecord;
  exports["convertOptionHighshelfOpt1"] = convertOptionHighshelfOpt1;
  exports["convertOptionHighshelfOpt"] = convertOptionHighshelfOpt;
  exports["initialHighshelfRecord"] = initialHighshelfRecord;
  exports["convertOptionLoopBufOptio4"] = convertOptionLoopBufOptio4;
  exports["convertOptionLoopBufOptio2"] = convertOptionLoopBufOptio2;
  exports["convertOptionLoopBufOptio1"] = convertOptionLoopBufOptio1;
  exports["convertOptionLoopBufOptio"] = convertOptionLoopBufOptio;
  exports["initialLoopBufBrowserAudi"] = initialLoopBufBrowserAudi;
  exports["initialLoopBufRecord"] = initialLoopBufRecord;
  exports["convertOptionLowpassOptio1"] = convertOptionLowpassOptio1;
  exports["convertOptionLowpassOptio"] = convertOptionLowpassOptio;
  exports["initialLowpassInitialAudi"] = initialLowpassInitialAudi;
  exports["initialLowpassRecord"] = initialLowpassRecord;
  exports["convertOptionLowshelfOpti1"] = convertOptionLowshelfOpti1;
  exports["convertOptionLowshelfOpti"] = convertOptionLowshelfOpti;
  exports["initialLowshelfRecord"] = initialLowshelfRecord;
  exports["initialMicrophoneBrowserM"] = initialMicrophoneBrowserM;
  exports["convertOptionNotchOptions1"] = convertOptionNotchOptions1;
  exports["convertOptionNotchOptions"] = convertOptionNotchOptions;
  exports["initialNotchRecord"] = initialNotchRecord;
  exports["initialStereoPannerNumber"] = initialStereoPannerNumber;
  exports["convertOptionPeakingOptio2"] = convertOptionPeakingOptio2;
  exports["convertOptionPeakingOptio1"] = convertOptionPeakingOptio1;
  exports["convertOptionPeakingOptio"] = convertOptionPeakingOptio;
  exports["initialPeakingRecord"] = initialPeakingRecord;
  exports["convertOptionPlayBufOptio3"] = convertOptionPlayBufOptio3;
  exports["convertOptionPlayBufOptio2"] = convertOptionPlayBufOptio2;
  exports["convertOptionPlayBufOptio1"] = convertOptionPlayBufOptio1;
  exports["convertOptionPlayBufOptio"] = convertOptionPlayBufOptio;
  exports["initialPlayBufBrowserAudi"] = initialPlayBufBrowserAudi;
  exports["initialPlayBufRecord"] = initialPlayBufRecord;
  exports["convertOptionPeriodicOscO"] = convertOptionPeriodicOscO;
  exports["periodicOscSpecableVecNum"] = periodicOscSpecableVecNum;
  exports["convertOptionPeriodicOscO1"] = convertOptionPeriodicOscO1;
  exports["initialPeriodicOscRecord"] = initialPeriodicOscRecord;
  exports["initialSawtoothOscNumber"] = initialSawtoothOscNumber;
  exports["initialSquareOscNumber"] = initialSquareOscNumber;
  exports["initialRecorderMediaRecor"] = initialRecorderMediaRecor;
  exports["initialSinOscNumber"] = initialSinOscNumber;
  exports["initialTriangleOscNumber"] = initialTriangleOscNumber;
  exports["initialWaveShaperBrowserF"] = initialWaveShaperBrowserF;
})(PS);
(function(exports) {
  exports.mutAr = (a) => () => {
	  return a.slice();
  };
  exports.unsafeUpdateMutAr = (i) => (v) => (a) => () => {
	  a[i] = v;
  };
  exports.readAr = (a) => () => {
	  return a.slice();
  };
})(PS["WAGS.Control"] = PS["WAGS.Control"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Control"] = $PS["WAGS.Control"] || {};
  var exports = $PS["WAGS.Control"];
  var $foreign = $PS["WAGS.Control"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Int = $PS["Data.Int"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Typelevel_Num_Reps = $PS["Data.Typelevel.Num.Reps"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var Data_Variant_Maybe = $PS["Data.Variant.Maybe"];
  var Data_Vec = $PS["Data.Vec"];
  var Effect = $PS["Effect"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Core = $PS["WAGS.Core"];
  var AnalyserOptions = (function () {
      function AnalyserOptions() {

      };
      AnalyserOptions.value = new AnalyserOptions();
      return AnalyserOptions;
  })();
  var convertOptionAnalyserOpti = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var convertOptionAnalyserOpti1 = {
      convertOption: function (v) {
          return function (v1) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
      }
  };
  var waveShaper = function (dictInitialWaveShaper) {
      return function (dictMix) {
          return function (i$prime) {
              return function (elts) {
                  var v = WAGS_Common.toInitializeWaveShaper(dictInitialWaveShaper)(i$prime);
                  var go = function (parent) {
                      return function (v1) {
                          return FRP_Event.makeEvent(function (k) {
                              return function __do() {
                                  var me = v1.ids();
                                  parent.raiseId(me)();
                                  return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                      id: me
                                  }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeWaveShaper({
                                      id: me,
                                      parent: Data_Variant_Maybe.just(parent.parent),
                                      scope: parent.scope,
                                      curve: v.curve,
                                      oversample: v.oversample
                                  })))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                              };
                          });
                      };
                  };
                  return go;
              };
          };
      };
  };
  var toInitializePlayBuf = function (dict) {
      return dict.toInitializePlayBuf;
  };
  var toInitializeAnalyser = function (dict) {
      return dict.toInitializeAnalyser;
  };
  var speaker = function (dictMix) {
      return function (elts) {
          return function (v) {
              return FRP_Event.makeEvent(function (k) {
                  return function __do() {
                      var id = v.ids();
                      k(v.makeSpeaker({
                          id: id
                      }))();
                      return FRP_Event.subscribe(WAGS_Core["__internalWagsFlatten"](id)(v)(WAGS_Core.mix(dictMix)(elts)))(k)();
                  };
              });
          };
      };
  };
  var speaker2 = function (dictMix) {
      return speaker(dictMix);
  };
  var recorder = function (dictInitialRecorder) {
      return function (i$prime) {
          return function (elt) {
              var v = WAGS_Common.toInitializeRecorder(dictInitialRecorder)(i$prime);
              var go = function (parent) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              parent.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeRecorder({
                                  id: me,
                                  parent: Data_Variant_Maybe.just(parent.parent),
                                  scope: parent.scope,
                                  cb: v.cb
                              })))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(elt)))))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var peaking = function (dictInitialPeaking) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializePeaking(dictInitialPeaking)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makePeaking({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          frequency: v.frequency,
                                          q: v.q,
                                          gain: v.gain
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              frequency: function (g) {
                                                  return v1.setFrequency({
                                                      id: me,
                                                      frequency: g
                                                  });
                                              },
                                              q: function (g) {
                                                  return v1.setQ({
                                                      id: me,
                                                      q: g
                                                  });
                                              },
                                              gain: function (g) {
                                                  return v1.setGain({
                                                      id: me,
                                                      gain: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var peaking_ = function (dictInitialPeaking) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return peaking(dictInitialPeaking)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var pan = function (dictInitialStereoPanner) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeStereoPanner(dictInitialStereoPanner)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeStereoPanner({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          pan: v.pan
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              pan: function (g) {
                                                  return v1.setPan({
                                                      id: me,
                                                      pan: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var pan_ = function (dictInitialStereoPanner) {
      return function (dictMix) {
          return function (i) {
              return pan(dictInitialStereoPanner)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent));
          };
      };
  };
  var notch = function (dictInitialNotch) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeNotch(dictInitialNotch)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeNotch({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          frequency: v.frequency,
                                          q: v.q
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              frequency: function (g) {
                                                  return v1.setFrequency({
                                                      id: me,
                                                      frequency: g
                                                  });
                                              },
                                              q: function (g) {
                                                  return v1.setQ({
                                                      id: me,
                                                      q: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var notch_ = function (dictInitialNotch) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return notch(dictInitialNotch)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var lowshelf = function (dictInitialLowshelf) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeLowshelf(dictInitialLowshelf)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeLowshelf({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          frequency: v.frequency,
                                          gain: v.gain
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              frequency: function (g) {
                                                  return v1.setFrequency({
                                                      id: me,
                                                      frequency: g
                                                  });
                                              },
                                              gain: function (g) {
                                                  return v1.setGain({
                                                      id: me,
                                                      gain: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var lowshelf_ = function (dictInitialLowshelf) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return lowshelf(dictInitialLowshelf)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var lowpass = function (dictInitialLowpass) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeLowpass(dictInitialLowpass)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeLowpass({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          frequency: v.frequency,
                                          q: v.q
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              frequency: function (g) {
                                                  return v1.setFrequency({
                                                      id: me,
                                                      frequency: g
                                                  });
                                              },
                                              q: function (g) {
                                                  return v1.setQ({
                                                      id: me,
                                                      q: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var lowpass_ = function (dictInitialLowpass) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return lowpass(dictInitialLowpass)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var internalFan = function (isGlobal) {
      return function (scopeF) {
          return function (gaga) {
              return function (closure) {
                  var go = function (psr) {
                      return function (v) {
                          return FRP_Event.makeEvent(function (k) {
                              return function __do() {
                                  var av = $foreign.mutAr(Data_Functor.map(Data_Functor.functorArray)(Data_Function["const"](""))(Data_Vec.toArray(gaga)))();
                                  var actualized = Data_Foldable.oneOf(Data_Vec.foldableVec)(FRP_Event.plusEvent)(Data_FunctorWithIndex.mapWithIndex(Data_Vec.functorWithIndexVec)(function (ix) {
                                      return function (v1) {
                                          return v1({
                                              parent: "@fan@",
                                              scope: scopeF(psr.scope),
                                              raiseId: function (id) {
                                                  return $foreign.unsafeUpdateMutAr(ix)(id)(av);
                                              }
                                          })(v);
                                      };
                                  })(gaga));
                                  var u0 = FRP_Event.subscribe(actualized)(k)();
                                  var av2 = Effect_AVar.empty();
                                  var idz = Data_Functor.map(Effect.functorEffect)(Unsafe_Coerce.unsafeCoerce)($foreign.readAr(av))();
                                  var injectable = Data_Functor.map(Data_Vec.functorVec)(function (id) {
                                      return function (v1) {
                                          return function (v2) {
                                              return FRP_Event.makeEvent(function (k2) {
                                                  return function __do() {
                                                      v1.raiseId(id)();
                                                      k2(v2.connectXToY({
                                                          from: id,
                                                          to: v1.parent
                                                      }))();
                                                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                                  };
                                              });
                                          };
                                      };
                                  })(idz);
                                  var realized = WAGS_Core["__internalWagsFlatten"](psr.parent)(v)(closure(injectable)(function (v1) {
                                      return v1;
                                  }));
                                  var u = FRP_Event.subscribe(realized)(k)();
                                  Data_Functor["void"](Effect.functorEffect)(Effect_AVar.tryPut(u)(av2))();
                                  return function __do() {
                                      u0();
                                      Control_Applicative.when(Effect.applicativeEffect)(!isGlobal)(Effect.foreachE(Data_Vec.toArray(idz))(function (id) {
                                          return k(v.deleteFromCache({
                                              id: id
                                          }));
                                      }))();
                                      var cncl2 = Effect_AVar.take(av2)(function (q) {
                                          if (q instanceof Data_Either.Right) {
                                              return q.value0;
                                          };
                                          if (q instanceof Data_Either.Left) {
                                              return Effect_Exception.throwException(q.value0);
                                          };
                                          throw new Error("Failed pattern match at WAGS.Control (line 1574, column 36 - line 1576, column 35): " + [ q.constructor.name ]);
                                      })();
                                      return cncl2();
                                  };
                              };
                          });
                      };
                  };
                  return go;
              };
          };
      };
  };
  var iirFilter$prime = function () {
      return function () {
          return function (dictInitialIIRFilter) {
              return function (dictMix) {
                  return function (fwd) {
                      return function (bk) {
                          return function (i$prime) {
                              return function (elts) {
                                  var v = WAGS_Common.toInitializeIIRFilter(dictInitialIIRFilter)(i$prime)(fwd)(bk);
                                  var go = function (parent) {
                                      return function (v1) {
                                          return FRP_Event.makeEvent(function (k) {
                                              return function __do() {
                                                  var me = v1.ids();
                                                  parent.raiseId(me)();
                                                  return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                                      id: me
                                                  }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeIIRFilter({
                                                      id: me,
                                                      parent: Data_Variant_Maybe.just(parent.parent),
                                                      scope: parent.scope,
                                                      feedforward: Data_Vec.toArray(v.feedforward),
                                                      feedback: Data_Vec.toArray(v.feedback)
                                                  })))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                              };
                                          });
                                      };
                                  };
                                  return go;
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var iirFilter = function () {
      return function () {
          return function (dictMix) {
              return function (dictInitialIIRFilter) {
                  return function (dictMix1) {
                      return iirFilter$prime()()(dictInitialIIRFilter)(dictMix)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                  };
              };
          };
      };
  };
  var highshelf = function (dictInitialHighshelf) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeHighshelf(dictInitialHighshelf)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeHighshelf({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          frequency: v.frequency,
                                          gain: v.gain
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              frequency: function (g) {
                                                  return v1.setFrequency({
                                                      id: me,
                                                      frequency: g
                                                  });
                                              },
                                              gain: function (g) {
                                                  return v1.setGain({
                                                      id: me,
                                                      gain: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var highshelf_ = function (dictInitialHighshelf) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return highshelf(dictInitialHighshelf)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var highpass = function (dictInitialHighpass) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeHighpass(dictInitialHighpass)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeHighpass({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          frequency: v.frequency,
                                          q: v.q
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              frequency: function (g) {
                                                  return v1.setFrequency({
                                                      id: me,
                                                      frequency: g
                                                  });
                                              },
                                              q: function (g) {
                                                  return v1.setQ({
                                                      id: me,
                                                      q: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var highpass_ = function (dictInitialHighpass) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return highpass(dictInitialHighpass)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var gain = function (dictInitialGain) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeGain(dictInitialGain)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeGain({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          gain: v.gain
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              gain: function (g) {
                                                  return v1.setGain({
                                                      id: me,
                                                      gain: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var gain_ = function (dictInitialGain) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return gain(dictInitialGain)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var fix = function (f) {
      var go = function (i) {
          return function (v) {
              return FRP_Event.makeEvent(function (k) {
                  return function __do() {
                      var av = Effect_AVar.empty();
                      var v1 = f(function (ii) {
                          return function (v2) {
                              return FRP_Event.makeEvent(function (k1) {
                                  return function __do() {
                                      Data_Functor["void"](Effect.functorEffect)(Effect_AVar.read(av)(function (v3) {
                                          if (v3 instanceof Data_Either.Left) {
                                              return Effect_Exception.throwException(v3.value0);
                                          };
                                          if (v3 instanceof Data_Either.Right) {
                                              return Control_Applicative.when(Effect.applicativeEffect)(v3.value0 !== ii.parent)(Control_Apply.applySecond(Effect.applyEffect)(ii.raiseId(v3.value0))(k1(v.connectXToY({
                                                  from: v3.value0,
                                                  to: ii.parent
                                              }))));
                                          };
                                          throw new Error("Failed pattern match at WAGS.Control (line 1628, column 29 - line 1631, column 104): " + [ v3.constructor.name ]);
                                      }))();
                                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                  };
                              });
                          };
                      });
                      return FRP_Event.subscribe(v1({
                          parent: i.parent,
                          scope: i.scope,
                          raiseId: function (s) {
                              return function __do() {
                                  i.raiseId(s)();
                                  return Data_Functor["void"](Effect.functorEffect)(Effect_AVar.tryPut(s)(av))();
                              };
                          }
                      })(v))(k)();
                  };
              });
          };
      };
      return go;
  };                                                                        
  var fan = function (e) {
      return internalFan(false)(Control_Category.identity(Control_Category.categoryFn))(e);
  };
  var fan1 = function (e) {
      return function (f) {
          return fan(Data_Vec.singleton(e))(Data_Profunctor.lcmap(Data_Profunctor.profunctorFn)(Data_Function.flip(Data_Vec.index(Data_Typelevel_Num_Sets.natD0)())(Data_Typelevel_Num_Reps.d0))(f));
      };
  };
  var dynamicsCompressor = function (dictInitialDynamicsCompressor) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeDynamicsCompressor(dictInitialDynamicsCompressor)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeDynamicsCompressor({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          threshold: v.threshold,
                                          ratio: v.ratio,
                                          knee: v.knee,
                                          attack: v.attack,
                                          release: v.release
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              threshold: function (threshold) {
                                                  return v1.setThreshold({
                                                      id: me,
                                                      threshold: threshold
                                                  });
                                              },
                                              ratio: function (ratio) {
                                                  return v1.setRatio({
                                                      id: me,
                                                      ratio: ratio
                                                  });
                                              },
                                              knee: function (knee) {
                                                  return v1.setKnee({
                                                      id: me,
                                                      knee: knee
                                                  });
                                              },
                                              attack: function (attack) {
                                                  return v1.setAttack({
                                                      id: me,
                                                      attack: attack
                                                  });
                                              },
                                              release: function (release) {
                                                  return v1.setRelease({
                                                      id: me,
                                                      release: release
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var dynamicsCompressor_ = function (dictInitialDynamicsCompressor) {
      return function (dictMix) {
          return function (i) {
              return dynamicsCompressor(dictInitialDynamicsCompressor)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent));
          };
      };
  };
  var delay = function (dictInitialDelay) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeDelay(dictInitialDelay)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeDelay({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          delayTime: v.delayTime,
                                          maxDelayTime: v.maxDelayTime
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              delayTime: function (g) {
                                                  return v1.setDelay({
                                                      id: me,
                                                      delayTime: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var delay_ = function (dictInitialDelay) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return delay(dictInitialDelay)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var defaultAnalyser = {
      cb: function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
      },
      fftSize: WAGS_Core.TTT11.value,
      maxDecibels: -30.0,
      minDecibels: -100.0,
      smoothingTimeConstant: 0.8,
      channelCount: 2,
      channelCountMode: WAGS_Core.Max.value,
      channelInterpretation: WAGS_Core.Speakers.value
  };
  var initialAnalyserRecord = function (dictConvertOptionsWithDefaults) {
      return {
          toInitializeAnalyser: function (provided) {
              return ConvertableOptions.convertOptionsWithDefaults(dictConvertOptionsWithDefaults)(AnalyserOptions.value)(defaultAnalyser)(provided);
          }
      };
  };
  var convolver = function (dictInitialConvolver) {
      return function (dictMix) {
          return function (i$prime) {
              return function (elts) {
                  var v = WAGS_Common.toInitializeConvolver(dictInitialConvolver)(i$prime);
                  var go = function (parent) {
                      return function (v1) {
                          return FRP_Event.makeEvent(function (k) {
                              return function __do() {
                                  var me = v1.ids();
                                  parent.raiseId(me)();
                                  return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                      id: me
                                  }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeConvolver({
                                      id: me,
                                      parent: Data_Variant_Maybe.just(parent.parent),
                                      scope: parent.scope,
                                      buffer: v.buffer
                                  })))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                              };
                          });
                      };
                  };
                  return go;
              };
          };
      };
  };
  var bandpass = function (dictInitialBandpass) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeBandpass(dictInitialBandpass)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeBandpass({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          frequency: v.frequency,
                                          q: v.q
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              frequency: function (g) {
                                                  return v1.setFrequency({
                                                      id: me,
                                                      frequency: g
                                                  });
                                              },
                                              q: function (g) {
                                                  return v1.setQ({
                                                      id: me,
                                                      q: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var bandpass_ = function (dictInitialBandpass) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return bandpass(dictInitialBandpass)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var analyser = function (dictInitialAnalyser) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = toInitializeAnalyser(dictInitialAnalyser)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeAnalyser({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          cb: v.cb,
                                          fftSize: Data_Int.pow(2)((function () {
                                              if (v.fftSize instanceof WAGS_Core.TTT7) {
                                                  return 7;
                                              };
                                              if (v.fftSize instanceof WAGS_Core.TTT8) {
                                                  return 8;
                                              };
                                              if (v.fftSize instanceof WAGS_Core.TTT9) {
                                                  return 9;
                                              };
                                              if (v.fftSize instanceof WAGS_Core.TTT10) {
                                                  return 10;
                                              };
                                              if (v.fftSize instanceof WAGS_Core.TTT11) {
                                                  return 11;
                                              };
                                              if (v.fftSize instanceof WAGS_Core.TTT12) {
                                                  return 12;
                                              };
                                              if (v.fftSize instanceof WAGS_Core.TTT13) {
                                                  return 13;
                                              };
                                              throw new Error("Failed pattern match at WAGS.Control (line 191, column 21 - line 198, column 34): " + [ v.fftSize.constructor.name ]);
                                          })()),
                                          maxDecibels: v.maxDecibels,
                                          minDecibels: v.minDecibels,
                                          smoothingTimeConstant: v.smoothingTimeConstant,
                                          channelCount: v.channelCount,
                                          channelCountMode: (function () {
                                              if (v.channelCountMode instanceof WAGS_Core.Explicit) {
                                                  return "explicit";
                                              };
                                              if (v.channelCountMode instanceof WAGS_Core.Max) {
                                                  return "max";
                                              };
                                              if (v.channelCountMode instanceof WAGS_Core.ClampedMax) {
                                                  return "clamped-max";
                                              };
                                              throw new Error("Failed pattern match at WAGS.Control (line 204, column 35 - line 207, column 46): " + [ v.channelCountMode.constructor.name ]);
                                          })(),
                                          channelInterpretation: (function () {
                                              if (v.channelInterpretation instanceof WAGS_Core.Speakers) {
                                                  return "speakers";
                                              };
                                              if (v.channelInterpretation instanceof WAGS_Core.Discrete) {
                                                  return "discrete";
                                              };
                                              throw new Error("Failed pattern match at WAGS.Control (line 208, column 40 - line 210, column 41): " + [ v.channelInterpretation.constructor.name ]);
                                          })()
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              cb: function (cb) {
                                                  return v1.setAnalyserNodeCb({
                                                      id: me,
                                                      cb: cb
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var analyser_ = function (dictInitialAnalyser) {
      return function (dictMix) {
          return function (i) {
              return analyser(dictInitialAnalyser)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent));
          };
      };
  };
  var allpass = function (dictInitialAllpass) {
      return function (dictMix) {
          return function (i$prime) {
              return function (atts) {
                  return function (elts) {
                      var v = WAGS_Common.toInitializeAllpass(dictInitialAllpass)(i$prime);
                      var go = function (parent) {
                          return function (v1) {
                              return FRP_Event.makeEvent(function (k) {
                                  return function __do() {
                                      var me = v1.ids();
                                      parent.raiseId(me)();
                                      return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                          id: me
                                      }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeAllpass({
                                          id: me,
                                          parent: Data_Variant_Maybe.just(parent.parent),
                                          scope: parent.scope,
                                          frequency: v.frequency,
                                          q: v.q
                                      })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return Data_Variant.match()()()({
                                              frequency: function (g) {
                                                  return v1.setFrequency({
                                                      id: me,
                                                      frequency: g
                                                  });
                                              },
                                              q: function (g) {
                                                  return v1.setQ({
                                                      id: me,
                                                      q: g
                                                  });
                                              }
                                          })(v2);
                                      })(atts)))(WAGS_Core["__internalWagsFlatten"](me)(v1)(WAGS_Core.mix(dictMix)(elts)))))();
                                  };
                              });
                          };
                      };
                      return go;
                  };
              };
          };
      };
  };
  var allpass_ = function (dictInitialAllpass) {
      return function (dictMix) {
          return function (i) {
              return function (a) {
                  return allpass(dictInitialAllpass)(dictMix)(i)(Control_Plus.empty(FRP_Event.plusEvent))(a);
              };
          };
      };
  };
  var __triangleOsc = function (dictInitialTriangleOsc) {
      return function (i$prime) {
          return function (atts) {
              var v = WAGS_Common.toInitializeTriangleOsc(dictInitialTriangleOsc)(i$prime);
              var go = function (parent) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              parent.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeTriangleOsc({
                                  id: me,
                                  parent: Data_Variant_Maybe.just(parent.parent),
                                  scope: parent.scope,
                                  frequency: v.frequency
                              })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return Data_Variant.match()()()({
                                      frequency: function (frequency) {
                                          return v1.setFrequency({
                                              id: me,
                                              frequency: frequency
                                          });
                                      },
                                      onOff: function (onOff) {
                                          return v1.setOnOff({
                                              id: me,
                                              onOff: onOff
                                          });
                                      }
                                  })(v2);
                              })(atts))))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var triangleOsc = function (dictInitialTriangleOsc) {
      return __triangleOsc(dictInitialTriangleOsc);
  };
  var __squareOsc = function (dictInitialSquareOsc) {
      return function (i$prime) {
          return function (atts) {
              var v = WAGS_Common.toInitializeSquareOsc(dictInitialSquareOsc)(i$prime);
              var go = function (parent) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              parent.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeSquareOsc({
                                  id: me,
                                  parent: Data_Variant_Maybe.just(parent.parent),
                                  scope: parent.scope,
                                  frequency: v.frequency
                              })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return Data_Variant.match()()()({
                                      frequency: function (frequency) {
                                          return v1.setFrequency({
                                              id: me,
                                              frequency: frequency
                                          });
                                      },
                                      onOff: function (onOff) {
                                          return v1.setOnOff({
                                              id: me,
                                              onOff: onOff
                                          });
                                      }
                                  })(v2);
                              })(atts))))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var squareOsc = function (dictInitialSquareOsc) {
      return __squareOsc(dictInitialSquareOsc);
  };
  var squareOsc_ = function (dictInitialSquareOsc) {
      return function (i) {
          return squareOsc(dictInitialSquareOsc)(i)(Control_Plus.empty(FRP_Event.plusEvent));
      };
  };
  var __sinOsc = function (dictInitialSinOsc) {
      return function (i$prime) {
          return function (atts) {
              var v = WAGS_Common.toInitializeSinOsc(dictInitialSinOsc)(i$prime);
              var go = function (parent) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              parent.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeSinOsc({
                                  id: me,
                                  parent: Data_Variant_Maybe.just(parent.parent),
                                  scope: parent.scope,
                                  frequency: v.frequency
                              })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return Data_Variant.match()()()({
                                      frequency: function (frequency) {
                                          return v1.setFrequency({
                                              id: me,
                                              frequency: frequency
                                          });
                                      },
                                      onOff: function (onOff) {
                                          return v1.setOnOff({
                                              id: me,
                                              onOff: onOff
                                          });
                                      }
                                  })(v2);
                              })(atts))))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var sinOsc = function (dictInitialSinOsc) {
      return __sinOsc(dictInitialSinOsc);
  };
  var sinOsc_ = function (dictInitialSinOsc) {
      return function (a) {
          return sinOsc(dictInitialSinOsc)(a)(Control_Plus.empty(FRP_Event.plusEvent));
      };
  };
  var __sawtoothOsc = function (dictInitialSawtoothOsc) {
      return function (i$prime) {
          return function (atts) {
              var v = WAGS_Common.toInitializeSawtoothOsc(dictInitialSawtoothOsc)(i$prime);
              var go = function (parent) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              parent.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeSawtoothOsc({
                                  id: me,
                                  parent: Data_Variant_Maybe.just(parent.parent),
                                  scope: parent.scope,
                                  frequency: v.frequency
                              })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return Data_Variant.match()()()({
                                      frequency: function (frequency) {
                                          return v1.setFrequency({
                                              id: me,
                                              frequency: frequency
                                          });
                                      },
                                      onOff: function (onOff) {
                                          return v1.setOnOff({
                                              id: me,
                                              onOff: onOff
                                          });
                                      }
                                  })(v2);
                              })(atts))))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var sawtoothOsc = function (dictInitialSawtoothOsc) {
      return __sawtoothOsc(dictInitialSawtoothOsc);
  };
  var __playBuf = function (dictInitialPlayBuf) {
      return function (i$prime) {
          return function (atts) {
              var v = WAGS_Common.toInitializePlayBuf(dictInitialPlayBuf)(i$prime);
              var go = function (parent) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              parent.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makePlayBuf({
                                  id: me,
                                  parent: Data_Variant_Maybe.just(parent.parent),
                                  scope: parent.scope,
                                  buffer: v.buffer,
                                  playbackRate: v.playbackRate,
                                  bufferOffset: v.bufferOffset,
                                  duration: v.duration
                              })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return Data_Variant.match()()()({
                                      buffer: function (buffer) {
                                          return v1.setBuffer({
                                              id: me,
                                              buffer: buffer
                                          });
                                      },
                                      playbackRate: function (playbackRate) {
                                          return v1.setPlaybackRate({
                                              id: me,
                                              playbackRate: playbackRate
                                          });
                                      },
                                      bufferOffset: function (bufferOffset) {
                                          return v1.setBufferOffset({
                                              id: me,
                                              bufferOffset: bufferOffset
                                          });
                                      },
                                      onOff: function (onOff) {
                                          return v1.setOnOff({
                                              id: me,
                                              onOff: onOff
                                          });
                                      },
                                      duration: function (duration) {
                                          return v1.setDuration({
                                              id: me,
                                              duration: duration
                                          });
                                      }
                                  })(v2);
                              })(atts))))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var playBuf = function (dictInitialPlayBuf) {
      return __playBuf(dictInitialPlayBuf);
  };
  var __periodicOsc = function (dictInitialPeriodicOsc) {
      return function (i$prime) {
          return function (atts) {
              var v = WAGS_Common.toInitializePeriodicOsc(dictInitialPeriodicOsc)(i$prime);
              var go = function (parent) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              parent.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makePeriodicOsc({
                                  id: me,
                                  parent: Data_Variant_Maybe.just(parent.parent),
                                  scope: parent.scope,
                                  frequency: v.frequency,
                                  spec: v.spec
                              })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return Data_Variant.match()()()({
                                      frequency: function (frequency) {
                                          return v1.setFrequency({
                                              id: me,
                                              frequency: frequency
                                          });
                                      },
                                      onOff: function (onOff) {
                                          return v1.setOnOff({
                                              id: me,
                                              onOff: onOff
                                          });
                                      },
                                      spec: function (spec) {
                                          return v1.setPeriodicOsc({
                                              id: me,
                                              spec: spec
                                          });
                                      }
                                  })(v2);
                              })(atts))))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var periodicOsc = function (dictInitialPeriodicOsc) {
      return __periodicOsc(dictInitialPeriodicOsc);
  };
  var __microphone = function (dictInitialMicrophone) {
      return function (i$prime) {
          var v = WAGS_Common.toInitializeMicrophone(dictInitialMicrophone)(i$prime);
          var go = function (parent) {
              return function (v1) {
                  return FRP_Event.makeEvent(function (k) {
                      return function __do() {
                          var me = v1.ids();
                          parent.raiseId(me)();
                          return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                              id: me
                          }))))(Data_Function.flip(FRP_Event.subscribe)(k)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeMicrophone({
                              id: me,
                              parent: Data_Variant_Maybe.just(parent.parent),
                              scope: parent.scope,
                              microphone: v.microphone
                          }))))();
                      };
                  });
              };
          };
          return go;
      };
  };
  var microphone = function (dictInitialMicrophone) {
      return __microphone(dictInitialMicrophone);
  };                                
  var __loopBuf = function (dictInitialLoopBuf) {
      return function (i$prime) {
          return function (atts) {
              var v = WAGS_Common.toInitializeLoopBuf(dictInitialLoopBuf)(i$prime);
              var go = function (parent) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              parent.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeLoopBuf({
                                  id: me,
                                  parent: Data_Variant_Maybe.just(parent.parent),
                                  scope: parent.scope,
                                  buffer: v.buffer,
                                  playbackRate: v.playbackRate,
                                  loopStart: v.loopStart,
                                  loopEnd: v.loopEnd,
                                  duration: v.duration
                              })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return Data_Variant.match()()()({
                                      buffer: function (buffer) {
                                          return v1.setBuffer({
                                              id: me,
                                              buffer: buffer
                                          });
                                      },
                                      playbackRate: function (playbackRate) {
                                          return v1.setPlaybackRate({
                                              id: me,
                                              playbackRate: playbackRate
                                          });
                                      },
                                      loopStart: function (loopStart) {
                                          return v1.setLoopStart({
                                              id: me,
                                              loopStart: loopStart
                                          });
                                      },
                                      loopEnd: function (loopEnd) {
                                          return v1.setLoopEnd({
                                              id: me,
                                              loopEnd: loopEnd
                                          });
                                      },
                                      onOff: function (onOff) {
                                          return v1.setOnOff({
                                              id: me,
                                              onOff: onOff
                                          });
                                      }
                                  })(v2);
                              })(atts))))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var loopBuf = function (dictInitialLoopBuf) {
      return __loopBuf(dictInitialLoopBuf);
  };
  var __constant = function (dictInitialConstant) {
      return function (i$prime) {
          return function (atts) {
              var v = WAGS_Common.toInitializeConstant(dictInitialConstant)(i$prime);
              var go = function (parent) {
                  return function (v1) {
                      return FRP_Event.makeEvent(function (k) {
                          return function __do() {
                              var me = v1.ids();
                              parent.raiseId(me)();
                              return Data_Functor.map(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(k(v1.deleteFromCache({
                                  id: me
                              }))))(Data_Function.flip(FRP_Event.subscribe)(k)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(v1.makeConstant({
                                  id: me,
                                  parent: Data_Variant_Maybe.just(parent.parent),
                                  scope: parent.scope,
                                  offset: v.offset
                              })))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return Data_Variant.match()()()({
                                      offset: function (offset) {
                                          return v1.setOffset({
                                              id: me,
                                              offset: offset
                                          });
                                      },
                                      onOff: function (onOff) {
                                          return v1.setOnOff({
                                              id: me,
                                              onOff: onOff
                                          });
                                      }
                                  })(v2);
                              })(atts))))();
                          };
                      });
                  };
              };
              return go;
          };
      };
  };
  var constant = function (dictInitialConstant) {
      return __constant(dictInitialConstant);
  };
  exports["allpass_"] = allpass_;
  exports["analyser_"] = analyser_;
  exports["bandpass"] = bandpass;
  exports["bandpass_"] = bandpass_;
  exports["constant"] = constant;
  exports["convolver"] = convolver;
  exports["delay"] = delay;
  exports["delay_"] = delay_;
  exports["dynamicsCompressor_"] = dynamicsCompressor_;
  exports["gain"] = gain;
  exports["gain_"] = gain_;
  exports["highpass"] = highpass;
  exports["highpass_"] = highpass_;
  exports["highshelf_"] = highshelf_;
  exports["iirFilter"] = iirFilter;
  exports["lowpass_"] = lowpass_;
  exports["lowshelf_"] = lowshelf_;
  exports["loopBuf"] = loopBuf;
  exports["microphone"] = microphone;
  exports["notch_"] = notch_;
  exports["peaking_"] = peaking_;
  exports["periodicOsc"] = periodicOsc;
  exports["playBuf"] = playBuf;
  exports["recorder"] = recorder;
  exports["sawtoothOsc"] = sawtoothOsc;
  exports["sinOsc"] = sinOsc;
  exports["sinOsc_"] = sinOsc_;
  exports["squareOsc"] = squareOsc;
  exports["squareOsc_"] = squareOsc_;
  exports["speaker2"] = speaker2;
  exports["pan_"] = pan_;
  exports["triangleOsc"] = triangleOsc;
  exports["waveShaper"] = waveShaper;
  exports["fan1"] = fan1;
  exports["fix"] = fix;
  exports["convertOptionAnalyserOpti1"] = convertOptionAnalyserOpti1;
  exports["convertOptionAnalyserOpti"] = convertOptionAnalyserOpti;
  exports["initialAnalyserRecord"] = initialAnalyserRecord;
})(PS);
(function(exports) {
  exports.scrollToTop_ = function () {
	  window.scrollTo(0, 0);
  };
})(PS["WAGS.Example.Docs.Util"] = PS["WAGS.Example.Docs.Util"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Types"] = $PS["WAGS.Example.Docs.Types"] || {};
  var exports = $PS["WAGS.Example.Docs.Types"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];                
  var SetCancel = (function () {
      function SetCancel(value0) {
          this.value0 = value0;
      };
      SetCancel.create = function (value0) {
          return new SetCancel(value0);
      };
      return SetCancel;
  })();
  var Intro = (function () {
      function Intro() {

      };
      Intro.value = new Intro();
      return Intro;
  })();
  var HelloWorld = (function () {
      function HelloWorld() {

      };
      HelloWorld.value = new HelloWorld();
      return HelloWorld;
  })();
  var AudioUnits = (function () {
      function AudioUnits() {

      };
      AudioUnits.value = new AudioUnits();
      return AudioUnits;
  })();
  var Events = (function () {
      function Events() {

      };
      Events.value = new Events();
      return Events;
  })();
  var FixFan = (function () {
      function FixFan() {

      };
      FixFan.value = new FixFan();
      return FixFan;
  })();
  var MultiChannel = (function () {
      function MultiChannel() {

      };
      MultiChannel.value = new MultiChannel();
      return MultiChannel;
  })();
  var AudioWorklets = (function () {
      function AudioWorklets() {

      };
      AudioWorklets.value = new AudioWorklets();
      return AudioWorklets;
  })();
  var Imperative = (function () {
      function Imperative() {

      };
      Imperative.value = new Imperative();
      return Imperative;
  })();
  var State = (function () {
      function State() {

      };
      State.value = new State();
      return State;
  })();
  var Subgraph = (function () {
      function Subgraph() {

      };
      Subgraph.value = new Subgraph();
      return Subgraph;
  })();
  var Tumult = (function () {
      function Tumult() {

      };
      Tumult.value = new Tumult();
      return Tumult;
  })();
  var ChangePage = (function () {
      function ChangePage(value0) {
          this.value0 = value0;
      };
      ChangePage.create = function (value0) {
          return new ChangePage(value0);
      };
      return ChangePage;
  })();
  var SetCancelation = (function () {
      function SetCancelation(value0) {
          this.value0 = value0;
      };
      SetCancelation.create = function (value0) {
          return new SetCancelation(value0);
      };
      return SetCancelation;
  })();
  var genericPage_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return Intro.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return HelloWorld.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return AudioUnits.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return Events.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return FixFan.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return MultiChannel.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
              return AudioWorklets.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
              return Imperative.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
              return State.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
              return Subgraph.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))))) {
              return Tumult.value;
          };
          throw new Error("Failed pattern match at WAGS.Example.Docs.Types (line 24, column 1 - line 24, column 31): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Intro) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof HelloWorld) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
          };
          if (x instanceof AudioUnits) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
          };
          if (x instanceof Events) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
          };
          if (x instanceof FixFan) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
          };
          if (x instanceof MultiChannel) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
          };
          if (x instanceof AudioWorklets) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
          };
          if (x instanceof Imperative) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))));
          };
          if (x instanceof State) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))));
          };
          if (x instanceof Subgraph) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))));
          };
          if (x instanceof Tumult) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))))))));
          };
          throw new Error("Failed pattern match at WAGS.Example.Docs.Types (line 24, column 1 - line 24, column 31): " + [ x.constructor.name ]);
      }
  };
  var eqPage = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Intro && y instanceof Intro) {
                  return true;
              };
              if (x instanceof HelloWorld && y instanceof HelloWorld) {
                  return true;
              };
              if (x instanceof AudioUnits && y instanceof AudioUnits) {
                  return true;
              };
              if (x instanceof Events && y instanceof Events) {
                  return true;
              };
              if (x instanceof FixFan && y instanceof FixFan) {
                  return true;
              };
              if (x instanceof MultiChannel && y instanceof MultiChannel) {
                  return true;
              };
              if (x instanceof AudioWorklets && y instanceof AudioWorklets) {
                  return true;
              };
              if (x instanceof Imperative && y instanceof Imperative) {
                  return true;
              };
              if (x instanceof State && y instanceof State) {
                  return true;
              };
              if (x instanceof Subgraph && y instanceof Subgraph) {
                  return true;
              };
              if (x instanceof Tumult && y instanceof Tumult) {
                  return true;
              };
              return false;
          };
      }
  };
  var showPage = {
      show: function (s) {
          return Data_Show_Generic.genericShow(genericPage_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Intro";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "HelloWorld";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "AudioUnits";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Events";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "FixFan";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "MultiChannel";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "AudioWorklets";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Imperative";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "State";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Subgraph";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Tumult";
              }
          }))))))))))))(s);
      }
  };
  var hashablePage = {
      hash: (function () {
          var $80 = Data_Hashable.hash(Data_Hashable.hashableString);
          var $81 = Data_Show.show(showPage);
          return function ($82) {
              return $80($81($82));
          };
      })(),
      Eq0: function () {
          return eqPage;
      }
  };
  exports["Intro"] = Intro;
  exports["HelloWorld"] = HelloWorld;
  exports["AudioUnits"] = AudioUnits;
  exports["Events"] = Events;
  exports["FixFan"] = FixFan;
  exports["MultiChannel"] = MultiChannel;
  exports["AudioWorklets"] = AudioWorklets;
  exports["Imperative"] = Imperative;
  exports["State"] = State;
  exports["Subgraph"] = Subgraph;
  exports["Tumult"] = Tumult;
  exports["ChangePage"] = ChangePage;
  exports["SetCancelation"] = SetCancelation;
  exports["SetCancel"] = SetCancel;
  exports["eqPage"] = eqPage;
  exports["hashablePage"] = hashablePage;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Util"] = $PS["WAGS.Example.Docs.Util"] || {};
  var exports = $PS["WAGS.Example.Docs.Util"];
  var $foreign = $PS["WAGS.Example.Docs.Util"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Attr_Style = $PS["Deku.DOM.Attr.Style"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Span = $PS["Deku.DOM.Elt.Span"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Equality = $PS["Type.Equality"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];                
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Playing = (function () {
      function Playing(value0) {
          this.value0 = value0;
      };
      Playing.create = function (value0) {
          return new Playing(value0);
      };
      return Playing;
  })();
  var Stopped = (function () {
      function Stopped() {

      };
      Stopped.value = new Stopped();
      return Stopped;
  })();
  var scrollToTop = $foreign.scrollToTop_;
  var raceSelf = function (fib) {
      return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.joinFiber(fib))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Effect_Aff.killFiber(Effect_Exception.error("We navigated away from the page"))(fib))));
  };
  var mkWrapperEvent = function (dictAlt) {
      return function (dictIsEvent) {
          return function (ev) {
              return function (event$prime) {
                  return Control_Alt.alt(dictAlt)(FRP_Event_Class.bang(dictIsEvent)(Stopped.value))(event$prime);
              };
          };
      };
  };
  var mkNext = function (dictAlt) {
      return function (dictIsEvent) {
          return function (ev) {
              return function (cpage) {
                  return Control_Alt.alt(dictAlt)(FRP_Event_Class.bang(dictIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](cpage)))))(Data_Functor.map(dictAlt.Functor0())(function (cncl) {
                      return Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(cncl)(cpage))));
                  })(Data_Functor.map(dictAlt.Functor0())(function (v) {
                      return v.value0;
                  })(ev)));
              };
          };
      };
  };
  var clickCb = function (dictFunctor) {
      return function (dictDiscard) {
          return function (dictIsEvent) {
              return function (cca) {
                  return function (push) {
                      return function (init) {
                          return function (i) {
                              return function (ev) {
                                  return function (event) {
                                      return Data_Functor.map(dictFunctor)(function (v) {
                                          return Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"]((function () {
                                              if (v.value0 instanceof Loading) {
                                                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                              };
                                              if (v.value0 instanceof Playing) {
                                                  return Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(v.value0.value0)(cca(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))))(push(Stopped.value));
                                              };
                                              if (v.value0 instanceof Stopped) {
                                                  return function __do() {
                                                      v.value1();
                                                      push(Loading.value)();
                                                      var fib = Effect_Aff.launchAff(Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.context(Effect_Aff.monadEffectAff))(function (ctx) {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.constant0Hack(Effect_Aff.monadEffectAff)(ctx))(function (c0h) {
                                                              return Control_Bind.bind(Effect_Aff.bindAff)(init(ctx))(function (x) {
                                                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                                      var res$prime = i(ctx)(x)();
                                                                      var res = Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(res$prime)(c0h))(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx));
                                                                      push(new Playing(res))();
                                                                      return res;
                                                                  });
                                                              });
                                                          });
                                                      }))();
                                                      return Control_Bind.discard(dictDiscard)(Effect.bindEffect)(cca(function __do() {
                                                          push(Stopped.value)();
                                                          return Effect_Aff.launchAff_(raceSelf(fib))();
                                                      }))(function () {
                                                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                                      })();
                                                  };
                                              };
                                              throw new Error("Failed pattern match at WAGS.Example.Docs.Util (line 46, column 21 - line 64, column 26): " + [ v.value0.constructor.name ]);
                                          })())));
                                      })(FRP_Event_Class.biSampleOn(dictIsEvent)(Control_Alt.alt((dictIsEvent.Plus0()).Alt0())(FRP_Event_Class.bang(dictIsEvent)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Data_Functor.map(dictFunctor)(function (v) {
                                          return v.value0;
                                      })(ev)))(Data_Functor.map(dictFunctor)(Data_Tuple.Tuple.create)(event)));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var ccassp = function (cca) {
      return function (ssp) {
          return function (e) {
              return function __do() {
                  cca(e)();
                  return ssp(new WAGS_Example_Docs_Types.SetCancel(e))();
              };
          };
      };
  };
  var audioWrapperSpan = function (txt) {
      return function (ev) {
          return function (cca) {
              return function (init) {
                  return function (i) {
                      return FRP_Event.bus(function (push) {
                          return function (event$prime) {
                              var event = mkWrapperEvent(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)(event$prime);
                              return Deku_DOM_Elt_Span.span(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrSpan_StyleString)(Deku_DOM_Attr_Style.Style.value)("cursor: pointer;")))(clickCb(FRP_Event.functorEvent)(Control_Bind.discardUnit)(FRP_Event.eventIsEvent)(cca)(push)(init)(i)(ev)(event)))([ Deku_Control.text(Data_Functor.map(FRP_Event.functorEvent)(function (v) {
                                  if (v instanceof Stopped) {
                                      return txt;
                                  };
                                  if (v instanceof Loading) {
                                      return "\u23f3";
                                  };
                                  if (v instanceof Playing) {
                                      return "\ud83d\uded1";
                                  };
                                  throw new Error("Failed pattern match at WAGS.Example.Docs.Util (line 113, column 19 - line 116, column 37): " + [ v.constructor.name ]);
                              })(event)) ]);
                          };
                      });
                  };
              };
          };
      };
  };
  var audioWrapper = function (ev) {
      return function (cca) {
          return function (init) {
              return function (i) {
                  return FRP_Event.bus(function (push) {
                      return function (event$prime) {
                          var event = mkWrapperEvent(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)(event$prime);
                          return Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(clickCb(FRP_Event.functorEvent)(Control_Bind.discardUnit)(FRP_Event.eventIsEvent)(cca)(push)(init)(i)(ev)(event))([ Deku_Control.text(Data_Functor.map(FRP_Event.functorEvent)(function (v) {
                              if (v instanceof Stopped) {
                                  return "Turn on";
                              };
                              if (v instanceof Loading) {
                                  return "Loading...";
                              };
                              if (v instanceof Playing) {
                                  return "Turn off";
                              };
                              throw new Error("Failed pattern match at WAGS.Example.Docs.Util (line 87, column 19 - line 90, column 44): " + [ v.constructor.name ]);
                          })(event)) ]);
                      };
                  });
              };
          };
      };
  };
  exports["scrollToTop"] = scrollToTop;
  exports["Loading"] = Loading;
  exports["Playing"] = Playing;
  exports["Stopped"] = Stopped;
  exports["ccassp"] = ccassp;
  exports["raceSelf"] = raceSelf;
  exports["clickCb"] = clickCb;
  exports["mkWrapperEvent"] = mkWrapperEvent;
  exports["audioWrapper"] = audioWrapper;
  exports["audioWrapperSpan"] = audioWrapperSpan;
  exports["mkNext"] = mkNext;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Parameter"] = $PS["WAGS.Parameter"] || {};
  var exports = $PS["WAGS.Parameter"];
  var Control_Category = $PS["Control.Category"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Proxy = $PS["Type.Proxy"];
  var AudioEnvelope = function (x) {
      return x;
  };
  var AudioParameter = function (x) {
      return x;
  };
  var toAudioOnOffAudioOnOff = {
      toAudioOnOff: Control_Category.identity(Control_Category.categoryFn)
  };
  var toAudioParameter = function (dict) {
      return dict.toAudioParameter;
  };
  var toAudioOnOff = function (dict) {
      return dict.toAudioOnOff;
  };
  var dt = function () {
      return Data_Lens_Setter.over((function () {
          var $184 = Data_Lens_Iso_Newtype["_Newtype"]()()(Data_Profunctor.profunctorFn);
          var $185 = Data_Lens_Record.prop({
              reflectSymbol: function () {
                  return "o";
              }
          })()()(Type_Proxy["Proxy"].value)(Data_Profunctor_Strong.strongFn);
          return function ($186) {
              return $184($185($186));
          };
      })());
  };
  var _sudden = (function () {
      var $187 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "sudden";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($188) {
          return AudioParameter($187($188));
      };
  })();
  var toAudioParameterNumber = {
      toAudioParameter: function (n) {
          return _sudden({
              n: n
          });
      }
  };                                            
  var _on = Data_Variant.inj()({
      reflectSymbol: function () {
          return "on";
      }
  })(Type_Proxy["Proxy"].value)(Data_Unit.unit);
  var apOn = {
      x: _on,
      o: 0.0
  };
  var bangOn = function () {
      return FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Data_Newtype.wrap()(Data_Variant.inj()({
          reflectSymbol: function () {
              return "onOff";
          }
      })(Type_Proxy["Proxy"].value)(apOn)));
  };
  var _off = Data_Variant.inj()({
      reflectSymbol: function () {
          return "off";
      }
  })(Type_Proxy["Proxy"].value)(Data_Unit.unit);
  var _numeric = (function () {
      var $191 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "numeric";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($192) {
          return AudioParameter($191($192));
      };
  })();
  var toAudioParameterAudioNume = {
      toAudioParameter: _numeric
  };
  var _linear = Data_Variant.inj()({
      reflectSymbol: function () {
          return "linear";
      }
  })(Type_Proxy["Proxy"].value)(Data_Unit.unit);
  var _envelope = (function () {
      var $194 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "envelope";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($195) {
          return AudioParameter($194($195));
      };
  })();
  var toAudioParameterAudioEnve = {
      toAudioParameter: _envelope
  };
  exports["toAudioOnOff"] = toAudioOnOff;
  exports["toAudioParameter"] = toAudioParameter;
  exports["_linear"] = _linear;
  exports["AudioEnvelope"] = AudioEnvelope;
  exports["_on"] = _on;
  exports["_off"] = _off;
  exports["apOn"] = apOn;
  exports["bangOn"] = bangOn;
  exports["dt"] = dt;
  exports["toAudioOnOffAudioOnOff"] = toAudioOnOffAudioOnOff;
  exports["toAudioParameterNumber"] = toAudioParameterNumber;
  exports["toAudioParameterAudioNume"] = toAudioParameterAudioNume;
  exports["toAudioParameterAudioEnve"] = toAudioParameterAudioEnve;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Run"] = $PS["WAGS.Run"] || {};
  var exports = $PS["WAGS.Run"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];
  var FRP_Event = $PS["FRP.Event"];
  var Type_Equality = $PS["Type.Equality"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];                
  var run2e = function (ctx) {
      return function (s) {
          return function __do() {
              var ffi = WAGS_Interpret.makeFFIAudioSnapshot(ctx)();
              var u = FRP_Event.subscribe(WAGS_Control.speaker2(WAGS_Core.mixEventAudibleAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(Data_Functor.map(FRP_Event.functorEvent)(WAGS_Core.mix(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl)))(s))(WAGS_Interpret.effectfulAudioInterpret))(function (f) {
                  return f(ffi);
              })();
              return u;
          };
      };
  };
  var run2 = function (ctx) {
      return function (s) {
          return function __do() {
              var ffi = WAGS_Interpret.makeFFIAudioSnapshot(ctx)();
              var u = FRP_Event.subscribe(WAGS_Control.speaker2(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(s)(WAGS_Interpret.effectfulAudioInterpret))(function (f) {
                  return f(ffi);
              })();
              return u;
          };
      };
  };
  var run2_ = function (s) {
      return function __do() {
          var ctx = WAGS_Interpret.context(Effect_Class.monadEffectEffect)();
          return run2(ctx)(s)();
      };
  };
  exports["run2_"] = run2_;
  exports["run2"] = run2;
  exports["run2e"] = run2e;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Allpass"] = $PS["WAGS.Example.Docs.AudioUnits.Allpass"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Allpass"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var allpass = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"allpass\">Allpass filter</h2>\x0a  <p>An <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\">all-pass filter</a> <a href=\"https://en.wikipedia.org/wiki/All-pass_filter\">passes through all frequencies of a source at equal volume but changes their phase</a>. Its use by itself is imperceptible, as the human ear (mostly) does not pick up on phase shifts by themselves. However, when an all-pass filter's output is mixed with several chained all-pass filters plus the original source, you hear a neat phaser effect.</p>\x0a\x0a  <p>The <code>bangOn</code> is an event that turns the loop buffer on. We'll learn more about turning things on and off in the \"Events\" section.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ fan1 (loopBuf buf bangOn)\x0a    \\b _ -> mix $ gain_ 0.2\x0a      [ b\x0a      , allpass_ 700.0\x0a          [ allpass_ { frequency: 990.0, q: 20.0 } [ b ]\x0a          , allpass_ 1110.0\x0a              [ b\x0a              , allpass_ { frequency: 2010.0, q: 30.0 } [ b ]\x0a              ]\x0a          ]\x0a      ]\x0a  ]\x0a</code></pre>\x0a\x0a  @allpass@\x0a  </section>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "allpass";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  allpass: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.fan1(WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()))(function (b) {
                              return function (v1) {
                                  return WAGS_Core.mix(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.2)([ b, WAGS_Control.allpass_(WAGS_Common.initialAllpassInitialAudi)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(700.0)([ WAGS_Control.allpass_(WAGS_Common.initialAllpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionAllpassOptio)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionAllpassOptio1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 990.0,
                                      q: 20.0
                                  })([ b ]), WAGS_Control.allpass_(WAGS_Common.initialAllpassInitialAudi)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1110.0)([ b, WAGS_Control.allpass_(WAGS_Common.initialAllpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionAllpassOptio)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionAllpassOptio1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 2010.0,
                                      q: 30.0
                                  })([ b ]) ]) ]) ]));
                              };
                          }) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["allpass"] = allpass;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Analyser"] = $PS["WAGS.Example.Docs.AudioUnits.Analyser"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Analyser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_ArrayBuffer_Typed = $PS["Data.ArrayBuffer.Typed"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Reps = $PS["Data.Typelevel.Num.Reps"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Vec = $PS["Data.Vec"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_Style = $PS["Deku.DOM.Attr.Style"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Animate = $PS["FRP.Event.Animate"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];                
  var style4 = "background-color: rgb(150,30,10);";
  var style3 = "background-color: rgb(130,60,10);";
  var style2 = "background-color: rgb(80,90,10);";
  var style1 = "background-color: rgb(10,130,10);";
  var style0 = "background-color: rgb(10,100,0);";
  var stys = Data_Vec.fill(Data_Typelevel_Num_Sets.natD8)(function (v) {
      return Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(style4)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(style3)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(style2)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(style1)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(style0)(Data_Vec.empty)))));
  });
  var scene = function (dictConvertOption) {
      return function (dictInitialLoopBuf) {
          return function (atar) {
              return function (cb) {
                  return WAGS_Control.analyser_(WAGS_Control.initialAnalyserRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Control.convertOptionAnalyserOpti1)()()()({
                      reflectSymbol: function () {
                          return "fftSize";
                      }
                  }))(dictConvertOption)()()()({
                      reflectSymbol: function () {
                          return "cb";
                      }
                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                      cb: cb,
                      fftSize: WAGS_Core.TTT8.value
                  })(WAGS_Control.loopBuf(dictInitialLoopBuf)(atar)(WAGS_Parameter.bangOn()));
              };
          };
      };
  };
  var px = Type_Proxy["Proxy"].value;
  var bgWhite = "background-color: rgb(255,255,255,0.0);";
  var mkSt = function (dictFunctor) {
      return function (dictNat) {
          return function (dictTrich) {
              return function (dictNat1) {
                  return function (dictTrich1) {
                      return function (dictAttr) {
                          return function (dictTrich2) {
                              return function (dictNat2) {
                                  return function (dictTrich3) {
                                      return function (i0) {
                                          return function (i1) {
                                              return function (e) {
                                                  return Data_Functor.map(dictFunctor)(function (v) {
                                                      var $17 = Data_Vec.index(dictNat)()(Data_Vec.index(dictNat1)()(v)(i0))(i1);
                                                      if ($17) {
                                                          return Deku_Attribute.attr(dictAttr)(Deku_DOM_Attr_Style.Style.value)(Data_Vec.index(dictNat)()(Data_Vec.index(dictNat2)()(stys)(i0))(i1));
                                                      };
                                                      return Deku_Attribute.attr(dictAttr)(Deku_DOM_Attr_Style.Style.value)(bgWhite);
                                                  })(e);
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var b4 = 15.0 / 40.0;
  var b3 = 10.0 / 40.0;
  var b2 = 7.0 / 40.0;
  var b1 = 3.0 / 40.0;
  var b0 = 1.0 / 40.0;
  var analyserEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"analyser\">Analyser</h2>\x0a  <p>An <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode\">analyser node</a> provides methods to recuperate the analysed data of an input. This is how, for example, Google Meet shows the little animation around a microphone icon. Wags provides the possibility to use the analyser as the terminus of an audio graph <i>or</i> as part of a longer DSP chain, as in the following example. The example uses an FFT size of 256, which is indicated in Wags as <code>TTT8</code> (two to the eighth power).</p>\x0a\x0a  <pre><code>analyser_ { cb, fftSize: TTT8 } (loopBuf atar bangOn)</code></pre>\x0a\x0a  ~analyser~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "analyser";
                  }
              }))(px)({
                  analyser: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(function (push) {
                      return function (v1) {
                          var ptn = Data_Filterable.partitionMap(FRP_Event.filterableEvent)(Control_Category.identity(Control_Category.categoryFn))(v1);
                          var event = WAGS_Example_Docs_Util.mkWrapperEvent(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)((function (v2) {
                              return v2.right;
                          })(ptn));
                          var aEv = (function (v2) {
                              return v2.left;
                          })(ptn);
                          return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrButton_StyleString)(Deku_DOM_Attr_Style.Style.value)("cursor: pointer;")))(WAGS_Example_Docs_Util.clickCb(FRP_Event.functorEvent)(Control_Bind.discardUnit)(FRP_Event.eventIsEvent)(ccb)(function ($25) {
                              return push(Data_Either.Right.create($25));
                          })(function (ctx) {
                              return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                          })(function (ctx) {
                              return function (atar) {
                                  return function __do() {
                                      var analyserE = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                                      var ffi2 = WAGS_Interpret.makeFFIAudioSnapshot(ctx)();
                                      var audioE = WAGS_Control.speaker2(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))([ scene(WAGS_Control.convertOptionAnalyserOpti)(WAGS_Common.initialLoopBufBrowserAudi)(atar)(function (a) {
                                          return function __do() {
                                              Effect_Ref.write(new Data_Maybe.Just(a))(analyserE)();
                                              return Effect_Ref.write(Data_Maybe.Nothing.value)(analyserE);
                                          };
                                      }) ])(WAGS_Interpret.effectfulAudioInterpret);
                                      var unsub = FRP_Event.subscribe(Control_Alt.alt(FRP_Event.altEvent)(Data_Functor.map(FRP_Event.functorEvent)(Data_Either.Right.create)(audioE))(Data_Functor.map(FRP_Event.functorEvent)(Data_Either.Left.create)(FRP_Event_Animate.animationFrameEvent)))(function (analyserOrAudio) {
                                          if (analyserOrAudio instanceof Data_Either.Right) {
                                              return analyserOrAudio.value0(ffi2);
                                          };
                                          if (analyserOrAudio instanceof Data_Either.Left) {
                                              return function __do() {
                                                  var analyser = Effect_Ref.read(analyserE)();
                                                  return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(analyser)(function (a) {
                                                      return function __do() {
                                                          var frequencyData = WAGS_Interpret.getByteFrequencyData(a)();
                                                          var arr = Data_ArrayBuffer_Typed.toArray(Data_ArrayBuffer_Typed.typedArrayUint8)(frequencyData)();
                                                          var r0 = Effect_Ref["new"](0)();
                                                          var r1 = Effect_Ref["new"](0)();
                                                          var r2 = Effect_Ref["new"](0)();
                                                          var r3 = Effect_Ref["new"](0)();
                                                          var r4 = Effect_Ref["new"](0)();
                                                          var r5 = Effect_Ref["new"](0)();
                                                          var r6 = Effect_Ref["new"](0)();
                                                          var r7 = Effect_Ref["new"](0)();
                                                          var tref = Effect_Ref["new"](0)();
                                                          var cref = Effect_Ref["new"](0)();
                                                          var gcref = function (x) {
                                                              if (x < 32) {
                                                                  return r0;
                                                              };
                                                              if (x < 64) {
                                                                  return r1;
                                                              };
                                                              if (x < 96) {
                                                                  return r2;
                                                              };
                                                              if (x < 128) {
                                                                  return r3;
                                                              };
                                                              if (x < 168) {
                                                                  return r4;
                                                              };
                                                              if (x < 160) {
                                                                  return r5;
                                                              };
                                                              if (x < 224) {
                                                                  return r6;
                                                              };
                                                              if (Data_Boolean.otherwise) {
                                                                  return r7;
                                                              };
                                                              throw new Error("Failed pattern match at WAGS.Example.Docs.AudioUnits.Analyser (line 143, column 45 - line 151, column 63): " + [ x.constructor.name ]);
                                                          };
                                                          Effect.foreachE(arr)(function (i$prime) {
                                                              var i = Data_UInt.toInt(i$prime);
                                                              return function __do() {
                                                                  var nref = Effect_Ref.read(cref)();
                                                                  Effect_Ref.modify_(Data_Semiring.add(Data_Semiring.semiringInt)(i))(tref)();
                                                                  Effect_Ref.modify_(Data_Semiring.add(Data_Semiring.semiringInt)(i))(gcref(nref))();
                                                                  return Effect_Ref.modify_(Data_Semiring.add(Data_Semiring.semiringInt)(1))(cref)();
                                                              };
                                                          })();
                                                          var ov = Data_Traversable.traverse(Data_Vec.traversableVec)(Effect.applicativeEffect)(function (i) {
                                                              return function __do() {
                                                                  var x = Data_Functor.map(Effect.functorEffect)(Data_Int.toNumber)(Effect_Ref.read(i))();
                                                                  var v2 = Data_Functor.map(Effect.functorEffect)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingNumber)(x))(Data_Functor.map(Effect.functorEffect)(Data_Int.toNumber)(Effect_Ref.read(tref)))();
                                                                  return Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(v2 > b4)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(v2 > b3)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(v2 > b2)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(v2 > b1)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(v2 > b0)(Data_Vec.empty)))));
                                                              };
                                                          })(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(r0)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(r1)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(r2)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(r3)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(r4)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(r5)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(r6)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(r7)(Data_Vec.empty)))))))))();
                                                          return push(new Data_Either.Left(ov))();
                                                      };
                                                  })();
                                              };
                                          };
                                          throw new Error("Failed pattern match at WAGS.Example.Docs.AudioUnits.Analyser (line 124, column 57 - line 162, column 57): " + [ analyserOrAudio.constructor.name ]);
                                      })();
                                      return function __do() {
                                          unsub();
                                          (function __do() {
                                              var st = WAGS_Interpret.contextState(Effect_Class.monadEffectEffect)(ctx)();
                                              return Control_Applicative.when(Effect.applicativeEffect)(st !== "closed")(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx))();
                                          })();
                                          return push(new Data_Either.Left(Data_Vec.fill(Data_Typelevel_Num_Sets.natD8)(Data_Function["const"](Data_Vec.fill(Data_Typelevel_Num_Sets.natD5)(Data_Function["const"](false))))))();
                                      };
                                  };
                              };
                          })(ev)(event)))([ Deku_Control.text(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                              if (v2 instanceof WAGS_Example_Docs_Util.Stopped) {
                                  return "Turn on";
                              };
                              if (v2 instanceof WAGS_Example_Docs_Util.Loading) {
                                  return "Loading...";
                              };
                              if (v2 instanceof WAGS_Example_Docs_Util.Playing) {
                                  return "Turn off";
                              };
                              throw new Error("Failed pattern match at WAGS.Example.Docs.AudioUnits.Analyser (line 175, column 31 - line 178, column 56): " + [ v2.constructor.name ]);
                          })(event)) ]), Deku_DOM_Elt_Div.div(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)("display: grid; grid-template-columns: repeat(8, 1fr); grid-auto-rows: 20px;")))([ Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Data_Typelevel_Num_Reps.d0)(Data_Typelevel_Num_Reps.d0)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Data_Typelevel_Num_Reps.d1)(Data_Typelevel_Num_Reps.d0)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Data_Typelevel_Num_Reps.d2)(Data_Typelevel_Num_Reps.d0)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Data_Typelevel_Num_Reps.d3)(Data_Typelevel_Num_Reps.d0)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Data_Typelevel_Num_Reps.d4)(Data_Typelevel_Num_Reps.d0)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Data_Typelevel_Num_Reps.d5)(Data_Typelevel_Num_Reps.d0)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Data_Typelevel_Num_Reps.d6)(Data_Typelevel_Num_Reps.d0)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD0D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Data_Typelevel_Num_Reps.d7)(Data_Typelevel_Num_Reps.d0)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Data_Typelevel_Num_Reps.d0)(Data_Typelevel_Num_Reps.d1)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Data_Typelevel_Num_Reps.d1)(Data_Typelevel_Num_Reps.d1)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Data_Typelevel_Num_Reps.d2)(Data_Typelevel_Num_Reps.d1)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Data_Typelevel_Num_Reps.d3)(Data_Typelevel_Num_Reps.d1)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Data_Typelevel_Num_Reps.d4)(Data_Typelevel_Num_Reps.d1)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Data_Typelevel_Num_Reps.d5)(Data_Typelevel_Num_Reps.d1)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Data_Typelevel_Num_Reps.d6)(Data_Typelevel_Num_Reps.d1)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD1D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Data_Typelevel_Num_Reps.d7)(Data_Typelevel_Num_Reps.d1)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Data_Typelevel_Num_Reps.d0)(Data_Typelevel_Num_Reps.d2)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Data_Typelevel_Num_Reps.d1)(Data_Typelevel_Num_Reps.d2)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Data_Typelevel_Num_Reps.d2)(Data_Typelevel_Num_Reps.d2)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Data_Typelevel_Num_Reps.d3)(Data_Typelevel_Num_Reps.d2)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Data_Typelevel_Num_Reps.d4)(Data_Typelevel_Num_Reps.d2)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Data_Typelevel_Num_Reps.d5)(Data_Typelevel_Num_Reps.d2)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Data_Typelevel_Num_Reps.d6)(Data_Typelevel_Num_Reps.d2)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD2D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Data_Typelevel_Num_Reps.d7)(Data_Typelevel_Num_Reps.d2)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Data_Typelevel_Num_Reps.d0)(Data_Typelevel_Num_Reps.d3)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Data_Typelevel_Num_Reps.d1)(Data_Typelevel_Num_Reps.d3)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Data_Typelevel_Num_Reps.d2)(Data_Typelevel_Num_Reps.d3)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Data_Typelevel_Num_Reps.d3)(Data_Typelevel_Num_Reps.d3)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Data_Typelevel_Num_Reps.d4)(Data_Typelevel_Num_Reps.d3)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Data_Typelevel_Num_Reps.d5)(Data_Typelevel_Num_Reps.d3)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Data_Typelevel_Num_Reps.d6)(Data_Typelevel_Num_Reps.d3)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD3D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Data_Typelevel_Num_Reps.d7)(Data_Typelevel_Num_Reps.d3)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Ops.trichD0D8)(Data_Typelevel_Num_Reps.d0)(Data_Typelevel_Num_Reps.d4)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Ops.trichD1D8)(Data_Typelevel_Num_Reps.d1)(Data_Typelevel_Num_Reps.d4)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Ops.trichD2D8)(Data_Typelevel_Num_Reps.d2)(Data_Typelevel_Num_Reps.d4)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Ops.trichD3D8)(Data_Typelevel_Num_Reps.d3)(Data_Typelevel_Num_Reps.d4)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D8)(Data_Typelevel_Num_Reps.d4)(Data_Typelevel_Num_Reps.d4)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Ops.trichD5D8)(Data_Typelevel_Num_Reps.d5)(Data_Typelevel_Num_Reps.d4)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Ops.trichD6D8)(Data_Typelevel_Num_Reps.d6)(Data_Typelevel_Num_Reps.d4)(aEv)))(Deku_Control.blank), Deku_DOM_Elt_Div.div(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)(bgWhite)))(mkSt(FRP_Event.functorEvent)(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Deku_DOM_Attr_Style.attrDiv_StyleString)(Data_Typelevel_Num_Ops.trichD4D5)(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Ops.trichD7D8)(Data_Typelevel_Num_Reps.d7)(Data_Typelevel_Num_Reps.d4)(aEv)))(Deku_Control.blank) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["analyserEx"] = analyserEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Bandpass"] = $PS["WAGS.Example.Docs.AudioUnits.Bandpass"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Bandpass"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var bandpass = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"bandpass\">Bandpass filter</h2>\x0a  <p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\">bandpass filter</a> isolates a single frequency range of a source. When you crank up a bandpass node's Q value, the isolation gets more intense. At the extreme, the source signal is almost lost and you get a pure sound that resembles a sine-wave oscillator.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ fan1 (loopBuf buf bangOn)\x0a    \\b _ -> mix $ gain_ 0.8\x0a      [ bandpass_ { frequency: 400.0, q: 1.0 } [ b ]\x0a      , bandpass_ { frequency: 880.0, q: 5.0 } [ b ]\x0a      , bandpass_ { frequency: 1200.0, q: 10.0 } [ b ]\x0a      , bandpass_ { frequency: 2000.0, q: 20.0 } [ b ]\x0a      , bandpass_ { frequency: 3000.0, q: 30.0 } [ b ]\x0a      ]\x0a  ]</code></pre>\x0a\x0a  @bandpass@\x0a  </section>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "bandpass";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  bandpass: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.fan1(WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()))(function (b) {
                              return function (v1) {
                                  return WAGS_Core.mix(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.8)([ WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 400.0,
                                      q: 1.0
                                  })([ b ]), WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 880.0,
                                      q: 5.0
                                  })([ b ]), WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 1200.0,
                                      q: 10.0
                                  })([ b ]), WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 2000.0,
                                      q: 20.0
                                  })([ b ]), WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 3000.0,
                                      q: 30.0
                                  })([ b ]) ]));
                              };
                          }) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["bandpass"] = bandpass;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Compression"] = $PS["WAGS.Example.Docs.AudioUnits.Compression"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Compression"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var compression = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"compression\">Compression</h2>\x0a  <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode\">Compression</a>, when used judiciously, can make certain sounds sit better in a mix, like for example vocals. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode\">MDN Web Audio documentation</a> does an excellent job explaining how its parameters work. When used not-judiciously, it makes everything sound loud, and who likes that? So let's use it judiciously, like in the example below. We'll pass an object that only specifies the threshold and otherwise use the default options for the compressor.</p>\x0a\x0a  <pre><code>\x0a-- defaultDynamicsCompressor =\x0a--   { ratio: 12.0\x0a--   , attack: 0.003\x0a--   , release: 0.25\x0a--   , knee: 30.0\x0a--   , threshold: -24.0\x0a--   }\x0arun2_\x0a  [ dynamicsCompressor_ { threshold: -50.0 }\x0a      [ loopBuf buf bangOn ]\x0a  ]</code></pre>\x0a\x0a  ~compression~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "compression";
                  }
              }))(px)({
                  compression: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.dynamicsCompressor_(WAGS_Common.initialDynamicsCompressor1(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsNil))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({})([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["compression"] = compression;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Properties"] = $PS["WAGS.Properties"] || {};
  var exports = $PS["WAGS.Properties"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Variant = $PS["Data.Variant"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var playbackRate = function () {
      return function (dictToAudioParameter) {
          var $11 = Data_Newtype.wrap();
          var $12 = Data_Variant.inj()({
              reflectSymbol: function () {
                  return "playbackRate";
              }
          })(Type_Proxy["Proxy"].value);
          var $13 = WAGS_Parameter.toAudioParameter(dictToAudioParameter);
          return function ($14) {
              return $11($12($13($14)));
          };
      };
  };
  var onOff = function () {
      return function (dictToAudioOnOff) {
          var $15 = Data_Newtype.wrap();
          var $16 = Data_Variant.inj()({
              reflectSymbol: function () {
                  return "onOff";
              }
          })(Type_Proxy["Proxy"].value);
          var $17 = WAGS_Parameter.toAudioOnOff(dictToAudioOnOff);
          return function ($18) {
              return $15($16($17($18)));
          };
      };
  };
  var offset = function () {
      return function (dictToAudioParameter) {
          var $19 = Data_Newtype.wrap();
          var $20 = Data_Variant.inj()({
              reflectSymbol: function () {
                  return "offset";
              }
          })(Type_Proxy["Proxy"].value);
          var $21 = WAGS_Parameter.toAudioParameter(dictToAudioParameter);
          return function ($22) {
              return $19($20($21($22)));
          };
      };
  };
  var loopStart = function () {
      var $23 = Data_Newtype.wrap();
      var $24 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "loopStart";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($25) {
          return $23($24($25));
      };
  };
  var loopEnd = function () {
      var $26 = Data_Newtype.wrap();
      var $27 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "loopEnd";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($28) {
          return $26($27($28));
      };
  };
  var gain = function () {
      return function (dictToAudioParameter) {
          var $29 = Data_Newtype.wrap();
          var $30 = Data_Variant.inj()({
              reflectSymbol: function () {
                  return "gain";
              }
          })(Type_Proxy["Proxy"].value);
          var $31 = WAGS_Parameter.toAudioParameter(dictToAudioParameter);
          return function ($32) {
              return $29($30($31($32)));
          };
      };
  };
  var frequency = function () {
      return function (dictToAudioParameter) {
          var $33 = Data_Newtype.wrap();
          var $34 = Data_Variant.inj()({
              reflectSymbol: function () {
                  return "frequency";
              }
          })(Type_Proxy["Proxy"].value);
          var $35 = WAGS_Parameter.toAudioParameter(dictToAudioParameter);
          return function ($36) {
              return $33($34($35($36)));
          };
      };
  };
  var delayTime = function () {
      return function (dictToAudioParameter) {
          var $40 = Data_Newtype.wrap();
          var $41 = Data_Variant.inj()({
              reflectSymbol: function () {
                  return "delayTime";
              }
          })(Type_Proxy["Proxy"].value);
          var $42 = WAGS_Parameter.toAudioParameter(dictToAudioParameter);
          return function ($43) {
              return $40($41($42($43)));
          };
      };
  };
  exports["delayTime"] = delayTime;
  exports["frequency"] = frequency;
  exports["gain"] = gain;
  exports["loopEnd"] = loopEnd;
  exports["loopStart"] = loopStart;
  exports["offset"] = offset;
  exports["onOff"] = onOff;
  exports["playbackRate"] = playbackRate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Constant"] = $PS["WAGS.Example.Docs.AudioUnits.Constant"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Constant"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect_Aff = $PS["Effect.Aff"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var constantEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"constant\">Constant value</h2>\x0a  <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode\">Constant values</a>, or DC offset, is a way to output an unchanging stream of values. This is only really useful when testing the performance of speakers or microphones and/or when working with a custom audio node that supports constant streaming values. Note that the constant source node in the web audio API can <i>also</i> be used to control audio parameters. Wags uses this feature of constant nodes under the hood to optimize certain computations.</p>\x0a\x0a  <p>The following example abuses a constant audio node by turning it into a gnarly inpulse generator. We'll learn about the tie fighter symbol <code>~tf~</code> and the <code>bang</code> in the next section on Events. Kids, don't try this at home!</p>\x0a\x0a  <pre><code>~txt~</code></pre>\x0a\x0a  ~constant~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "txt";
                  }
              }))({
                  reflectSymbol: function () {
                      return "tf";
                  }
              }))({
                  reflectSymbol: function () {
                      return "constant";
                  }
              }))(px)({
                  tf: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_("<|>")),
                  txt: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_("run2_\x0a  [ gain_ 0.5\x0a      [ constant 0.0\x0a          ( bangOn <|>\x0a              ( bang $ offset $ AudioEnvelope\x0a                  { d: 5.0\x0a                  , o: 0.1\x0a                  , p: 0 .. 1920 # mapWithIndex\x0a                      \\i -> const $\x0a                      if i `mod` 3 == 0 then 1.0\x0a                      else 0.0\x0a                  }\x0a              )\x0a          )\x0a      ]\x0a  ]")),
                  constant: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (v1) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.5)([ WAGS_Control.constant(WAGS_Common.initialConstantNumber)(0.0)(Control_Alt.alt(FRP_Event.altEvent)(WAGS_Parameter.bangOn())(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(WAGS_Properties.offset()(WAGS_Parameter.toAudioParameterAudioEnve)({
                              d: 5.0,
                              o: 0.1,
                              p: Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (i) {
                                  return Data_Function["const"]((function () {
                                      var $3 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(3) === 0;
                                      if ($3) {
                                          return 1.0;
                                      };
                                      return 0.0;
                                  })());
                              })(Data_Array.range(0)(1920))
                          })))) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["constantEx"] = constantEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Convolution"] = $PS["WAGS.Example.Docs.AudioUnits.Convolution"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Convolution"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var convolution = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"convolution\">Convolution</h2>\x0a  <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode\">Convolution</a>, aka reverb, is a way to graft the shape of one sound (usually an <a href=\"https://en.wikipedia.org/wiki/Impulse_response\">impulse response</a>) onto another. Convolution can sound great, but it is a <i>very expensive operation</i> that will cause noticeable artifacts on low-end devices. When shipping audio code to production, you're usually better off using an Audio Worklet Node with reverb optimized for your specific case. That said, for PoCs or hobbyist projects, convolution is great!</p>\x0a\x0a  <pre><code>\\{loop, verb} -> run2_\x0a  [ convolver verb [ loopBuf loop bangOn ] ]</code></pre>\x0a\x0a  ~convolution~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "convolution";
                  }
              }))(px)({
                  convolution: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return Control_Apply.apply(Effect_Aff.applyAff)(Data_Functor.map(Effect_Aff.functorAff)(function (v1) {
                          return function (v2) {
                              return {
                                  loop: v1,
                                  verb: v2
                              };
                          };
                      })(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3")))(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://cdn.jsdelivr.net/gh/andibrae/Reverb.js/Library/StMarysAbbeyReconstructionPhase3.m4a"));
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.convolver(WAGS_Common.initialConvolverBrowserAu)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(v1.verb)([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(v1.loop)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["convolution"] = convolution;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Delay"] = $PS["WAGS.Example.Docs.AudioUnits.Delay"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Delay"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var delay = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"delay\">Delay</h2>\x0a  <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DelayNode\">Delay</a>, as its name suggests, delays a signal. Using multiple delay nodes, you can create a decent echo effect.</p>\x0a\x0a  <p>To create an even <i>better</i> echo effect, you can used fixed points, which is covered in the <a>Fix and fan</a> section of this documentation.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ fan1 (playBuf buf bangOn)\x0a      \\b _ -> mix $ gain_ 0.2\x0a        [ delay_ 0.03 [ b ]\x0a        , delay_ 0.1 [ b ]\x0a        , delay_ 0.3 [ b ]\x0a        , delay_ 0.7 [ b ]\x0a        ]\x0a  ]</code></pre>\x0a\x0a  @delay@\x0a  </section>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "delay";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  delay: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/339/339822_5121236-lq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.fan1(WAGS_Control.playBuf(WAGS_Common.initialPlayBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()))(function (b) {
                              return function (v1) {
                                  return WAGS_Core.mix(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.2)([ WAGS_Control.delay_(WAGS_Common.initialDelayInitialAudioP)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(3.0e-2)([ b ]), WAGS_Control.delay_(WAGS_Common.initialDelayInitialAudioP)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.1)([ b ]), WAGS_Control.delay_(WAGS_Common.initialDelayInitialAudioP)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.3)([ b ]), WAGS_Control.delay_(WAGS_Common.initialDelayInitialAudioP)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.7)([ b ]) ]));
                              };
                          }) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["delay"] = delay;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Gain"] = $PS["WAGS.Example.Docs.AudioUnits.Gain"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Gain"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var gain = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"gain\">Gain</h2>\x0a  <p>The almighty <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/GainNode\">gain</a> node is your friendly neighborhood volume control. Volume in the web-audio API goes from 0 to 1 whereas we hear logarithmically, so when you're using this, make sure to convert between decibels and gain if you want to work with more intuitive units. The conversion formula is as follows:</p>\x0a\x0a  <pre><code>decibels = 20 * log10( gain );</code></pre>\x0a\x0a  <p>And here's a little example of a single gain node:</p>\x0a\x0a  <pre><code>run2_\x0a  [ gain_ 0.1\x0a    [ loopBuf buf bangOn ]\x0a  ] </code></pre>\x0a\x0a  ~gain~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "gain";
                  }
              }))(px)({
                  gain: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/339/339822_5121236-lq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.1)([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["gain"] = gain;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Highpass"] = $PS["WAGS.Example.Docs.AudioUnits.Highpass"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Highpass"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var highpass = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"highpass\">Highpass filter</h2>\x0a  <p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\">highpass filter</a> lets higher frequencies pass and amortizes lower ones. If you amp up the Q value, the effect will be sharper.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ highpass_ 2000.0\x0a      [ loopBuf buf bangOn ]\x0a  ]\x0a</code></pre>\x0a\x0a  ~highpass~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "highpass";
                  }
              }))(px)({
                  highpass: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.highpass_(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(2000.0)([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["highpass"] = highpass;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Highshelf"] = $PS["WAGS.Example.Docs.AudioUnits.Highshelf"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Highshelf"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var highshelf = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"highshelf\">Highshelf filter</h2>\x0a  <p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\">highshelf filter</a> boosts or attenuates high frequencies using a <code>gain</code> parameter, where gain is expressed in decibels from -40.0 to 40.0.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ highshelf_ { frequency: 2000.0, gain: 0. }\x0a      [ loopBuf buf bangOn ]\x0a  ]</code></pre>\x0a\x0a  ~highshelf~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "highshelf";
                  }
              }))(px)({
                  highshelf: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.highshelf_(WAGS_Common.initialHighshelfRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionHighshelfOpt)()()()({
                              reflectSymbol: function () {
                                  return "gain";
                              }
                          }))(WAGS_Common.convertOptionHighshelfOpt1)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 2000.0,
                              gain: 0.4
                          })([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["highshelf"] = highshelf;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.IIRFilter"] = $PS["WAGS.Example.Docs.AudioUnits.IIRFilter"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.IIRFilter"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Vec = $PS["Data.Vec"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var iirFilterEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"iir\">IIR filter</h2>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode\">IIR filter</a>, or infinite impulse response filter, is the Swiss Army Knife of filters. You can carve out and boost parts of the spectrum with amazing precision. But it comes with a catch: you can't automate the parameters. The parameters are also tough to work with if you're new to IIR filters. In short, you're setting up coefficients for a filter of type:</p>\x0a\x0a  <pre><code>x0s0 + x1s1 + x2s2 + ... + y0S0 + y1S1 + y2S2 + ...</code></pre>\x0a\x0a  <p>Where <code>s1</code> is the unfiltered signal at time <code>t-1</code>, <code>S0</code> is the <i>filtered</i> signal at time <code>t-1</code>, etc. The xs and ys are often called <i>feedforward</i> and <i>feedback</i> coefficients respectively.</p>\x0a\x0a  <p>Because the Web Audio API accepts between 3 and 20 parameters for feedforward and feedback coefficients, Wags enforces that through a <a href=\"https://github.com/bodil/purescript-sized-vectors\">sized vector</a>.</p>\x0a\x0a  <pre><code>\\{loop, verb} -> run2_\x0a  [ iirFilter\x0a      ( (0.00020298 +> 0.0004059599 +> 0.00020298 +> empty)\x0a          /\\ (1.0126964558 +> -1.9991880801 +> 0.9873035442 +> empty)\x0a      )\x0a      [ loopBuf buf bangOn ]\x0a  ]</code></pre>\x0a  ~iirFilterEx~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "iirFilterEx";
                  }
              }))(px)({
                  iirFilterEx: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.iirFilter()()(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(WAGS_Common.initialIIRFilterVecNumber(Type_Equality.refl)(Type_Equality.refl))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(new Data_Tuple.Tuple(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(2.0298e-4)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(4.059599e-4)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(2.0298e-4)(Data_Vec.empty))), Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(1.0126964558)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(-1.9991880801)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(0.9873035442)(Data_Vec.empty)))))([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["iirFilterEx"] = iirFilterEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.LoopBuf"] = $PS["WAGS.Example.Docs.AudioUnits.LoopBuf"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.LoopBuf"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var loopBufEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"loopbuf\">Looping buffer</h2>\x0a\x0a  <p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode\">looping buffer</a> is buffered audio that loops. The buffered audio is usually a sound file, but it'll play anything you write to a buffer. Like in the Web Audio API, you can set the buffer's start and end and optionally its duration.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ loopBuf\x0a      { buffer: buf\x0a      , playbackRate: 0.5\x0a      , loopStart: 0.1\x0a      , loopEnd: 0.6\x0a      }\x0a      bangOn\x0a  , loopBuf\x0a      { buffer: buf\x0a      , playbackRate: 1.0\x0a      , loopStart: 0.5\x0a      , loopEnd: 1.2\x0a      }\x0a      bangOn\x0a  , loopBuf\x0a      { buffer: buf\x0a      , playbackRate: 1.7\x0a      }\x0a      bangOn\x0a  ]</code></pre>\x0a\x0a  @loopBuf@\x0a  </section>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "loopBuf";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  loopBuf: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/100/100981_1234256-lq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionLoopBufOptio4)()()()({
                              reflectSymbol: function () {
                                  return "playbackRate";
                              }
                          }))(WAGS_Common.convertOptionLoopBufOptio2)()()()({
                              reflectSymbol: function () {
                                  return "loopStart";
                              }
                          }))(WAGS_Common.convertOptionLoopBufOptio1)()()()({
                              reflectSymbol: function () {
                                  return "loopEnd";
                              }
                          }))(WAGS_Common.convertOptionLoopBufOptio)()()()({
                              reflectSymbol: function () {
                                  return "buffer";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))({
                              buffer: buf,
                              playbackRate: 0.5,
                              loopStart: 0.1,
                              loopEnd: 0.6
                          })(WAGS_Parameter.bangOn()), WAGS_Control.loopBuf(WAGS_Common.initialLoopBufRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionLoopBufOptio4)()()()({
                              reflectSymbol: function () {
                                  return "playbackRate";
                              }
                          }))(WAGS_Common.convertOptionLoopBufOptio2)()()()({
                              reflectSymbol: function () {
                                  return "loopStart";
                              }
                          }))(WAGS_Common.convertOptionLoopBufOptio1)()()()({
                              reflectSymbol: function () {
                                  return "loopEnd";
                              }
                          }))(WAGS_Common.convertOptionLoopBufOptio)()()()({
                              reflectSymbol: function () {
                                  return "buffer";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))({
                              buffer: buf,
                              playbackRate: 1.0,
                              loopStart: 0.5,
                              loopEnd: 1.2
                          })(WAGS_Parameter.bangOn()), WAGS_Control.loopBuf(WAGS_Common.initialLoopBufRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionLoopBufOptio4)()()()({
                              reflectSymbol: function () {
                                  return "playbackRate";
                              }
                          }))(WAGS_Common.convertOptionLoopBufOptio)()()()({
                              reflectSymbol: function () {
                                  return "buffer";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))({
                              buffer: buf,
                              playbackRate: 1.7
                          })(WAGS_Parameter.bangOn()) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["loopBufEx"] = loopBufEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Lowpass"] = $PS["WAGS.Example.Docs.AudioUnits.Lowpass"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Lowpass"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var lowpass = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"lowpass\">Lowpass filter</h2>\x0a  <p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\">lowpass filter</a> lets lower frequencies pass and amortizes higher ones. If you amp up the Q value, the effect will be sharper.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ lowpass_ 215.0 [ loopBuf buf bangOn ] ]\x0a</code></pre>\x0a\x0a  ~lowpass~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "lowpass";
                  }
              }))(px)({
                  lowpass: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.lowpass_(WAGS_Common.initialLowpassInitialAudi)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(215.0)([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["lowpass"] = lowpass;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Lowshelf"] = $PS["WAGS.Example.Docs.AudioUnits.Lowshelf"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Lowshelf"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var lowshelf = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"lowshelf\">Lowshelf filter</h2>\x0a  <p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\">lowshelf filter</a> boosts or attenuates lower frequencies using a <code>gain</code> parameter, where gain is expressed in decibels from -40.0 to 40.0.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a   [ lowshelf_ { frequency: 91.0, gain: 10.0 }\x0a       [ loopBuf buf bangOn ]\x0a   ]\x0a</code></pre>\x0a\x0a  ~lowshelf~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "lowshelf";
                  }
              }))(px)({
                  lowshelf: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.lowshelf_(WAGS_Common.initialLowshelfRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionLowshelfOpti)()()()({
                              reflectSymbol: function () {
                                  return "gain";
                              }
                          }))(WAGS_Common.convertOptionLowshelfOpti1)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 91.0,
                              gain: 0.4
                          })([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["lowshelf"] = lowshelf;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Microphone"] = $PS["WAGS.Example.Docs.AudioUnits.Microphone"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Microphone"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var microphoneEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"microphone\">Microphone</h2>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode\">microphone</a> will use your microphone if you give the browser permission to do so.</p>\x0a\x0a  <blockquote>Make sure to use \ud83c\udfa7 when you run this example! Otherwise, you'll cause quite a stir in whatever internet cafe, household or public restroom you're perusing this documentation in.</blockquote>\x0a\x0a  <pre><code>\\mic -> run2_\x0a  [ case mic of\x0a      Just m -> fix \\i -> gain_ 1.0\x0a        [ microphone m\x0a        , delay_ 0.1 [ gain_ 0.2 [ input i ] ]\x0a        ]\x0a      Nothing -> gain_ 0.02 [ sinOsc_ 440.0 ]\x0a  ]</code></pre>\x0a\x0a  @microphone@\x0a  </section>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "microphone";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  microphone: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (v1) {
                      return WAGS_Interpret.getMicrophoneAndCamera(true)(false);
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ (function () {
                              if (v1.microphone instanceof Data_Maybe.Just) {
                                  return WAGS_Control.fix(function (i) {
                                      return WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)([ WAGS_Control.microphone(WAGS_Common.initialMicrophoneBrowserM)(v1.microphone.value0), WAGS_Control.delay_(WAGS_Common.initialDelayInitialAudioP)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.1)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.2)([ i ]) ]) ]);
                                  });
                              };
                              if (v1.microphone instanceof Data_Maybe.Nothing) {
                                  return WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(2.0e-2)([ WAGS_Control.sinOsc_(WAGS_Common.initialSinOscNumber)(440.0) ]);
                              };
                              throw new Error("Failed pattern match at WAGS.Example.Docs.AudioUnits.Microphone (line 43, column 15 - line 48, column 56): " + [ v1.microphone.constructor.name ]);
                          })() ]);
                      };
                  }))
              });
          };
      };
  };
  exports["microphoneEx"] = microphoneEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Notch"] = $PS["WAGS.Example.Docs.AudioUnits.Notch"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Notch"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var notch = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a<h2 id=\"notch\">Notch filter</h2>\x0a  <p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\">notch filter</a>, also known as a band-reject filter, attenuates a single frequency range of a source. When you crank up their Q value, the attenuation gets more intense. At the extreme, it sounds like part of the source got sucked into a vacuum, which is not un-interesting!</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [\x0a    notch_ { frequency: 400.0, q: 1.0 }\x0a    $ notch_ { frequency: 880.0, q: 5.0 }\x0a    $ notch_ { frequency: 1200.0, q: 10.0 }\x0a    $ notch_ { frequency: 2000.0, q: 20.0 }\x0a    $ notch_ { frequency: 3000.0, q: 30.0 }\x0a    $ loopBuf buf bangOn\x0a  ]</code></pre>\x0a\x0a  ~notch~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "notch";
                  }
              }))(px)({
                  notch: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.notch_(WAGS_Common.initialNotchRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionNotchOptions)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionNotchOptions1)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 400.0,
                              q: 1.0
                          })(WAGS_Control.notch_(WAGS_Common.initialNotchRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionNotchOptions)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionNotchOptions1)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 880.0,
                              q: 5.0
                          })(WAGS_Control.notch_(WAGS_Common.initialNotchRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionNotchOptions)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionNotchOptions1)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 1200.0,
                              q: 10.0
                          })(WAGS_Control.notch_(WAGS_Common.initialNotchRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionNotchOptions)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionNotchOptions1)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 2000.0,
                              q: 20.0
                          })(WAGS_Control.notch_(WAGS_Common.initialNotchRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionNotchOptions)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionNotchOptions1)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 3000.0,
                              q: 30.0
                          })(WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn())))))) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["notch"] = notch;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Peaking"] = $PS["WAGS.Example.Docs.AudioUnits.Peaking"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Peaking"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var peaking = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"peaking\">Peaking filter</h2>\x0a  <p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\">peaking filter</a> is sort of like a notch/bandpass combo. It sounds different than bandpass or notch, and is often a better choice depending on what you're making. The Q works as normal, but the gain either boosts or attenuates the frequency in question if it is positive or negative.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [\x0a    peaking_ { frequency: 400.0, q: 1.0, gain: -20.0 }\x0a    $ peaking_ { frequency: 880.0, q: 5.0, gain: 20.0 }\x0a    $ peaking_ { frequency: 1200.0, q: 10.0, gain: -20.0 }\x0a    $ peaking_ { frequency: 2000.0, q: 20.0, gain: 20.0 }\x0a    $ peaking_ { frequency: 3000.0, q: 30.0, gain: -20.0 }\x0a    $ loopBuf buf bangOn\x0a  ]</code></pre>\x0a\x0a  ~peaking~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "peaking";
                  }
              }))(px)({
                  peaking: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.peaking_(WAGS_Common.initialPeakingRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeakingOptio)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio1)()()()({
                              reflectSymbol: function () {
                                  return "gain";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio2)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 400.0,
                              q: 1.0,
                              gain: -20.0
                          })(WAGS_Control.peaking_(WAGS_Common.initialPeakingRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeakingOptio)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio1)()()()({
                              reflectSymbol: function () {
                                  return "gain";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio2)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 880.0,
                              q: 5.0,
                              gain: 20.0
                          })(WAGS_Control.peaking_(WAGS_Common.initialPeakingRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeakingOptio)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio1)()()()({
                              reflectSymbol: function () {
                                  return "gain";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio2)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 1200.0,
                              q: 10.0,
                              gain: -20.0
                          })(WAGS_Control.peaking_(WAGS_Common.initialPeakingRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeakingOptio)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio1)()()()({
                              reflectSymbol: function () {
                                  return "gain";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio2)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 2000.0,
                              q: 20.0,
                              gain: 20.0
                          })(WAGS_Control.peaking_(WAGS_Common.initialPeakingRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeakingOptio)()()()({
                              reflectSymbol: function () {
                                  return "q";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio1)()()()({
                              reflectSymbol: function () {
                                  return "gain";
                              }
                          }))(WAGS_Common.convertOptionPeakingOptio2)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                              frequency: 3000.0,
                              q: 30.0,
                              gain: -20.0
                          })(WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn())))))) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["peaking"] = peaking;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.PeriodicOsc"] = $PS["WAGS.Example.Docs.AudioUnits.PeriodicOsc"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.PeriodicOsc"];
  var Control_Applicative = $PS["Control.Applicative"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Vec = $PS["Data.Vec"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var periodic = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"periodic\">Periodic wave oscillator</h2>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\">periodic wave oscillator</a> plays back a custom periodic waveform at a given frequency. The custom waveform must be set as part of the initialization and can be changed after initialization. Note that the change will not go into effect if the oscillator is on: it must be turned off and on again.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [\x0a    gain_ 0.2\x0a      [\x0a        periodicOsc\x0a          { frequency: 140.0\x0a          , spec:\x0a              ( (0.1 +> 0.2 +> 0.3 +> 0.4 +> empty)\x0a                  /\\ (0.4 +> 0.3 +> 0.2 +> 0.1 +> empty)\x0a              )\x0a          }\x0a          bangOn\x0a      ]\x0a  ]</code></pre>\x0a\x0a  ~periodic~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "periodic";
                  }
              }))(px)({
                  periodic: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (v1) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.2)([ WAGS_Control.periodicOsc(WAGS_Common.initialPeriodicOscRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeriodicOscO1(WAGS_Common.periodicOscSpecableVecNum(Data_Typelevel_Num_Sets.posD4)))()()()({
                              reflectSymbol: function () {
                                  return "spec";
                              }
                          }))(WAGS_Common.convertOptionPeriodicOscO)()()()({
                              reflectSymbol: function () {
                                  return "frequency";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))({
                              frequency: 140.0,
                              spec: new Data_Tuple.Tuple(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(0.1)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(0.2)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(0.3)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(0.4)(Data_Vec.empty)))), Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(0.4)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(0.3)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(0.2)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(0.1)(Data_Vec.empty)))))
                          })(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["periodic"] = periodic;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.PlayBuf"] = $PS["WAGS.Example.Docs.AudioUnits.PlayBuf"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.PlayBuf"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var playBufEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"playbuf\">Playing a buffer</h2>\x0a  <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode\">Playback from a buffer</a> is one of the bread-and-butter operations in Web Audio (or any audio). The buffered audio is usually a sound file, but it'll play anything you write to a buffer. Like in the Web Audio API, you can set the buffer's start time and optionally its duration.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [\x0a    playBuf\x0a      { buffer\x0a      , duration: 3.0\x0a      , bufferOffset: 4.2\x0a      }\x0a      bangOn\x0a  ]\x0a</code></pre>\x0a\x0a  ~playBuf~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "playBuf";
                  }
              }))(px)({
                  playBuf: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/470/470035_9564355-lq.mp3");
                  })(function (ctx) {
                      return function (buffer) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.playBuf(WAGS_Common.initialPlayBufRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPlayBufOptio2)()()()({
                              reflectSymbol: function () {
                                  return "duration";
                              }
                          }))(WAGS_Common.convertOptionPlayBufOptio1)()()()({
                              reflectSymbol: function () {
                                  return "bufferOffset";
                              }
                          }))(WAGS_Common.convertOptionPlayBufOptio)()()()({
                              reflectSymbol: function () {
                                  return "buffer";
                              }
                          })))(ConvertableOptions.defaultsRecord()())))({
                              buffer: buffer,
                              duration: 3.0,
                              bufferOffset: 4.2
                          })(WAGS_Parameter.bangOn()) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["playBufEx"] = playBufEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.Recorder"] = $PS["WAGS.Example.Docs.AudioUnits.Recorder"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.Recorder"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_Controls = $PS["Deku.DOM.Attr.Controls"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Attr_Src = $PS["Deku.DOM.Attr.Src"];
  var Deku_DOM_Attr_Style = $PS["Deku.DOM.Attr.Style"];
  var Deku_DOM_Elt_Audio = $PS["Deku.DOM.Elt.Audio"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];                
  var scene = function (dictInitialRecorder) {
      return function (dictInitialMicrophone) {
          return function (m) {
              return function (cb) {
                  return WAGS_Control.recorder(dictInitialRecorder)(cb)(WAGS_Control.microphone(dictInitialMicrophone)(m));
              };
          };
      };
  };
  var px = Type_Proxy["Proxy"].value;
  var recorderEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"recorder\">Recorder</h2>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode\">recorder</a> allows you to record audio. It takes a callback that you can use to stash the recorded audio somewhere, like in a file for example, as the example below does. You can use it as a simple note-taking app \ud83c\udf99\ufe0f.</p>\x0a\x0a  <pre><code>\\cb m -> recorder cb (microphone m)</code></pre>\x0a\x0a  ~recorder~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "recorder";
                  }
              }))(px)({
                  recorder: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(function (push) {
                      return function (v1) {
                          var ptn = Data_Filterable.partitionMap(FRP_Event.filterableEvent)(Control_Category.identity(Control_Category.categoryFn))(v1);
                          var ls = Data_Filterable.partitionMap(FRP_Event.filterableEvent)(Control_Category.identity(Control_Category.categoryFn))((function (v2) {
                              return v2.left;
                          })(ptn));
                          var rEv = (function (v2) {
                              return v2.right;
                          })(ls);
                          var event = WAGS_Example_Docs_Util.mkWrapperEvent(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)((function (v2) {
                              return v2.right;
                          })(ptn));
                          var aEv = (function (v2) {
                              return v2.left;
                          })(ls);
                          return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrButton_StyleString)(Deku_DOM_Attr_Style.Style.value)("cursor: pointer;")))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                              return Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"]((function () {
                                  if (v2.e instanceof WAGS_Example_Docs_Util.Loading) {
                                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                  };
                                  if (v2.e instanceof WAGS_Example_Docs_Util.Playing) {
                                      return Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(v2.e.value0)(ccb(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))))(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v2.rec)((function () {
                                          var $26 = Control_Monad_Error_Class["try"](Control_Monad_Error_Class.monadErrorEffect);
                                          return function ($27) {
                                              return $26(WAGS_Interpret.stopMediaRecorder($27));
                                          };
                                      })())))(push(Data_Either.Right.create(WAGS_Example_Docs_Util.Stopped.value)));
                                  };
                                  if (v2.e instanceof WAGS_Example_Docs_Util.Stopped) {
                                      return function __do() {
                                          v2.cncl();
                                          var av = Effect_AVar.empty();
                                          push(new Data_Either.Right(WAGS_Example_Docs_Util.Loading.value))();
                                          var fib = Effect_Aff.launchAff(Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(function (v3) {
                                              return v3.microphone;
                                          })(WAGS_Interpret.getMicrophoneAndCamera(true)(false)))(function (x) {
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                  var res = Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(function (mc) {
                                                      return function __do() {
                                                          var ctx = WAGS_Interpret.context(Effect_Class.monadEffectEffect)();
                                                          var ffi2 = WAGS_Interpret.makeFFIAudioSnapshot(ctx)();
                                                          var audioE = WAGS_Control.speaker2(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))([ scene(WAGS_Common.initialRecorderMediaRecor)(WAGS_Common.initialMicrophoneBrowserM)(mc)(function (mr) {
                                                              return function __do() {
                                                                  push(new Data_Either.Left(new Data_Either.Right(mr)))();
                                                                  Data_Functor["void"](Effect.functorEffect)(Effect_AVar.tryPut(mr)(av))();
                                                                  return WAGS_Interpret.mediaRecorderToUrl("audio/ogg; codecs=opus")(function ($28) {
                                                                      return push(Data_Either.Left.create(Data_Either.Left.create($28)));
                                                                  })(mr)();
                                                              };
                                                          }) ])(WAGS_Interpret.effectfulAudioInterpret);
                                                          var unsub = FRP_Event.subscribe(audioE)(function (audio) {
                                                              return audio(ffi2);
                                                          })();
                                                          return function __do() {
                                                              unsub();
                                                              Control_Bind.bind(Effect.bindEffect)(Effect_AVar.tryTake(av))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
                                                                  var $29 = Control_Monad_Error_Class["try"](Control_Monad_Error_Class.monadErrorEffect);
                                                                  return function ($30) {
                                                                      return $29(WAGS_Interpret.stopMediaRecorder($30));
                                                                  };
                                                              })()))();
                                                              var st = WAGS_Interpret.contextState(Effect_Class.monadEffectEffect)(ctx)();
                                                              return Control_Applicative.when(Effect.applicativeEffect)(st !== "closed")(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx))();
                                                          };
                                                      };
                                                  })(x)();
                                                  push(new Data_Either.Right(new WAGS_Example_Docs_Util.Playing(res)))();
                                                  return res;
                                              });
                                          }))();
                                          ccb(function __do() {
                                              push(Data_Either.Right.create(WAGS_Example_Docs_Util.Stopped.value))();
                                              return Effect_Aff.launchAff_(WAGS_Example_Docs_Util.raceSelf(fib))();
                                          })();
                                          return Data_Unit.unit;
                                      };
                                  };
                                  throw new Error("Failed pattern match at WAGS.Example.Docs.AudioUnits.Recorder (line 63, column 47 - line 106, column 52): " + [ v2.e.constructor.name ]);
                              })())));
                          })(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Data_Maybe.Nothing.value))(Data_Functor.map(FRP_Event.functorEvent)(Data_Maybe.Just.create)(rEv)))(Data_Functor.map(FRP_Event.functorEvent)(Data_Function.apply)(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                              return v2.value0;
                          })(ev)))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                              return function (v3) {
                                  return function (v4) {
                                      return {
                                          e: v2,
                                          cncl: v3,
                                          rec: v4
                                      };
                                  };
                              };
                          })(event)))))))([ Deku_Control.text(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                              if (v2 instanceof WAGS_Example_Docs_Util.Stopped) {
                                  return "Turn on";
                              };
                              if (v2 instanceof WAGS_Example_Docs_Util.Loading) {
                                  return "Loading...";
                              };
                              if (v2 instanceof WAGS_Example_Docs_Util.Playing) {
                                  return "Turn off";
                              };
                              throw new Error("Failed pattern match at WAGS.Example.Docs.AudioUnits.Recorder (line 117, column 31 - line 120, column 56): " + [ v2.constructor.name ]);
                          })(event)) ]), Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Audio.audio(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Controls.attrAudio_ControlsString)(Deku_DOM_Attr_Controls.Controls.value)("true")))(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrAudio_StyleString)(Deku_DOM_Attr_Style.Style.value)("display:none;"))))(Data_Functor.map(FRP_Event.functorEvent)(function (src) {
                              return Deku_Attribute.attr(Deku_DOM_Attr_Src.attrAudio_SrcString)(Deku_DOM_Attr_Src.Src.value)(src);
                          })(aEv)))(Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"](Deku_Attribute.attr(Deku_DOM_Attr_Style.attrAudio_StyleString)(Deku_DOM_Attr_Style.Style.value)("display:block;")))(aEv)))(Deku_Control.blank) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["recorderEx"] = recorderEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.SawtoothOsc"] = $PS["WAGS.Example.Docs.AudioUnits.SawtoothOsc"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.SawtoothOsc"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var sawtooth = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"sawtooth\">Sawtooth wave oscillator</h2>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\">sawtooth wave oscillator</a> plays back a sawtooth wave at a given frequency.</p>\x0a\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ gain_ 0.2 [ sawtoothOsc 448.0 bangOn ] ]\x0a</code></pre>\x0a\x0a  ~periodic~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "periodic";
                  }
              }))(px)({
                  periodic: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (v1) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.2)([ WAGS_Control.sawtoothOsc(WAGS_Common.initialSawtoothOscNumber)(448.0)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["sawtooth"] = sawtooth;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.SinOsc"] = $PS["WAGS.Example.Docs.AudioUnits.SinOsc"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.SinOsc"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var sine = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"sine\">Sine wave oscillator</h2>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\">sine wave oscillator</a> plays back a sine wave at a given frequency.</p>\x0a\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ gain_ 0.2 [ sinOsc 448.0 bangOn ] ]</code></pre>\x0a\x0a  ~periodic~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "periodic";
                  }
              }))(px)({
                  periodic: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (v1) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.2)([ WAGS_Control.sinOsc(WAGS_Common.initialSinOscNumber)(448.0)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["sine"] = sine;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.SquareOsc"] = $PS["WAGS.Example.Docs.AudioUnits.SquareOsc"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.SquareOsc"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var square = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"sawtooth\">Square wave oscillator</h2>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\">sawtooth wave oscillator</a> plays back a sawtooth wave at a given frequency.</p>\x0a\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ gain_ 0.2 [ squareOsc 448.0 bangOn ] ]</code></pre>\x0a\x0a  ~periodic~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "periodic";
                  }
              }))(px)({
                  periodic: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (v1) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.2)([ WAGS_Control.squareOsc(WAGS_Common.initialSquareOscNumber)(448.0)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["square"] = square;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.StereoPanner"] = $PS["WAGS.Example.Docs.AudioUnits.StereoPanner"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.StereoPanner"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var pan = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode\">stereo panner</a> pans audio in the stereo plane. <code>-1.0</code> represents hard left, and <code>1.0</code> represents hard right, as in the example below.</p>\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ pan_ 1.0 [ loopBuf buf bangOn ] ]</code></pre>\x0a\x0a  ~pan~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "pan";
                  }
              }))(px)({
                  pan: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/339/339822_5121236-lq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.pan_(WAGS_Common.initialStereoPannerNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["pan"] = pan;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.TOC"] = $PS["WAGS.Example.Docs.AudioUnits.TOC"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.TOC"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var toc = Deku_Pursx.makePursx({
      reflectSymbol: function () {
          return "<ul>\x0a  <li><a href=\"#allpass\">All-pass filter</a></li>\x0a  <li><a href=\"#analyser\">Analyser</a></li>\x0a  <li><a href=\"#bandpass\">Bandpass filter</a></li>\x0a  <li><a href=\"#constant\">Constant value</a></li>\x0a  <li><a href=\"#compression\">Compression</a></li>\x0a  <li><a href=\"#convolution\">Convolution</a></li>\x0a  <li><a href=\"#delay\">Delay</a></li>\x0a  <li><a href=\"#gain\">Gain</a></li>\x0a  <li><a href=\"#highpass\">Highpass filter</a></li>\x0a  <li><a href=\"#highshelf\">Highshelf filter</a></li>\x0a  <li><a href=\"#iir\">IIR filter</a></li>\x0a  <li><a href=\"#loopbuf\">Looping buffer</a></li>\x0a  <li><a href=\"#lowpass\">Lowpass filter</a></li>\x0a  <li><a href=\"#lowshelf\">Lowshelf filter</a></li>\x0a  <!--<li><a href=\"#media\">Media element</a></li>-->\x0a  <li><a href=\"#microphone\">Microphone</a></li>\x0a  <li><a href=\"#notch\">Notch filter</a></li>\x0a  <!--<li><a href=\"#panner\">Panner</a></li>-->\x0a  <li><a href=\"#peaking\">Peaking filter</a></li>\x0a  <li><a href=\"#periodic\">Periodic wave oscillator</a></li>\x0a  <li><a href=\"#playbuf\">Playing a buffer</a></li>\x0a  <li><a href=\"#recorder\">Recorder</a></li>\x0a  <li><a href=\"#sawtooth\">Sawtooth wave oscillator</a></li>\x0a  <li><a href=\"#sine\">Sine wave oscillator</a></li>\x0a  <li><a href=\"#square\">Square wave oscillator</a></li>\x0a  <li><a href=\"#pan\">Stereo panner</a></li>\x0a  <li><a href=\"#triangle\">Triangle wave oscillator</a></li>\x0a  <li><a href=\"#waveshaper\">Waveshaper</a></li>\x0a    </ul>\x0a";
      }
  })()()(Deku_Pursx.pursxToElementNil)(px)({});
  exports["toc"] = toc;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.TriangleOsc"] = $PS["WAGS.Example.Docs.AudioUnits.TriangleOsc"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.TriangleOsc"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var triangle = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"sawtooth\">Sawtooth wave oscillator</h2>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\">sawtooth wave oscillator</a> plays back a sawtooth wave at a given frequency.</p>\x0a\x0a\x0a  <pre><code>\\buf -> run2_\x0a  [ gain_ 0.2 [ triangleOsc 448.0 bangOn ] ]\x0a</code></pre>\x0a\x0a  ~periodic~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "periodic";
                  }
              }))(px)({
                  periodic: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (v1) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.2)([ WAGS_Control.triangleOsc(WAGS_Common.initialTriangleOscNumber)(448.0)(WAGS_Parameter.bangOn()) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["triangle"] = triangle;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.AudioUnits.WaveShaper"] = $PS["WAGS.Example.Docs.AudioUnits.WaveShaper"] || {};
  var exports = $PS["WAGS.Example.Docs.AudioUnits.WaveShaper"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var $$Math = $PS["Math"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var waveShaperEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2 id=\"waveshaper\">Waveshaper</h2>\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WaveshaperNode\">waveshaper node</a>, aka distortion, uses a <a href=\"https://en.wikipedia.org/wiki/Waveshaper\">waveshaping function</a> to add warmth to a sound.</p>\x0a\x0a  <pre><code>~code~</code></pre>\x0a\x0a  ~waveShaper~\x0a  </section>\x0a";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "waveShaper";
                  }
              }))({
                  reflectSymbol: function () {
                      return "code";
                  }
              }))(px)({
                  code: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_("do\x0a  let\x0a    makeDistortionCurve :: Number -> Array Number\x0a    makeDistortionCurve k =\x0a      map\x0a        ( \\i ->\x0a            let\x0a              x = (toNumber i * 2.0 / toNumber n_samples) - 1.0\x0a            in\x0a              (3.0 + k) * x * 20.0 * deg / (pi + (k * abs x))\x0a        )\x0a        (0 .. (n_samples - 1))\x0a      where\x0a      n_samples = 44100\x0a\x0a      deg = pi / 180.0\x0a  wicked <- makeFloatArray (makeDistortionCurve 400.0)\x0a  run2_\x0a    [ waveShaper wicked [ loopBuf buf bangOn ] ]")),
                  waveShaper: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/339/339822_5121236-lq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          var makeDistortionCurve = function (k) {
                              var deg = $$Math.pi / 180.0;
                              return Data_Functor.map(Data_Functor.functorArray)(function (i) {
                                  var x = (Data_Int.toNumber(i) * 2.0) / Data_Int.toNumber(44100) - 1.0;
                                  return ((3.0 + k) * x * 20.0 * deg) / ($$Math.pi + k * Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(x));
                              })(Data_Array.range(0)(44100 - 1 | 0));
                          };
                          return function __do() {
                              var wicked = WAGS_Interpret.makeFloatArray(makeDistortionCurve(400.0))();
                              return WAGS_Run.run2(ctx)([ WAGS_Control.waveShaper(WAGS_Common.initialWaveShaperBrowserF)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(wicked)([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ])();
                          };
                      };
                  }))
              });
          };
      };
  };
  exports["waveShaperEx"] = waveShaperEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Component"] = $PS["WAGS.Example.Docs.Component"] || {};
  var exports = $PS["WAGS.Example.Docs.Component"];
  var Control_Apply = $PS["Control.Apply"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_AudioUnits_Allpass = $PS["WAGS.Example.Docs.AudioUnits.Allpass"];
  var WAGS_Example_Docs_AudioUnits_Analyser = $PS["WAGS.Example.Docs.AudioUnits.Analyser"];
  var WAGS_Example_Docs_AudioUnits_Bandpass = $PS["WAGS.Example.Docs.AudioUnits.Bandpass"];
  var WAGS_Example_Docs_AudioUnits_Compression = $PS["WAGS.Example.Docs.AudioUnits.Compression"];
  var WAGS_Example_Docs_AudioUnits_Constant = $PS["WAGS.Example.Docs.AudioUnits.Constant"];
  var WAGS_Example_Docs_AudioUnits_Convolution = $PS["WAGS.Example.Docs.AudioUnits.Convolution"];
  var WAGS_Example_Docs_AudioUnits_Delay = $PS["WAGS.Example.Docs.AudioUnits.Delay"];
  var WAGS_Example_Docs_AudioUnits_Gain = $PS["WAGS.Example.Docs.AudioUnits.Gain"];
  var WAGS_Example_Docs_AudioUnits_Highpass = $PS["WAGS.Example.Docs.AudioUnits.Highpass"];
  var WAGS_Example_Docs_AudioUnits_Highshelf = $PS["WAGS.Example.Docs.AudioUnits.Highshelf"];
  var WAGS_Example_Docs_AudioUnits_IIRFilter = $PS["WAGS.Example.Docs.AudioUnits.IIRFilter"];
  var WAGS_Example_Docs_AudioUnits_LoopBuf = $PS["WAGS.Example.Docs.AudioUnits.LoopBuf"];
  var WAGS_Example_Docs_AudioUnits_Lowpass = $PS["WAGS.Example.Docs.AudioUnits.Lowpass"];
  var WAGS_Example_Docs_AudioUnits_Lowshelf = $PS["WAGS.Example.Docs.AudioUnits.Lowshelf"];
  var WAGS_Example_Docs_AudioUnits_Microphone = $PS["WAGS.Example.Docs.AudioUnits.Microphone"];
  var WAGS_Example_Docs_AudioUnits_Notch = $PS["WAGS.Example.Docs.AudioUnits.Notch"];
  var WAGS_Example_Docs_AudioUnits_Peaking = $PS["WAGS.Example.Docs.AudioUnits.Peaking"];
  var WAGS_Example_Docs_AudioUnits_PeriodicOsc = $PS["WAGS.Example.Docs.AudioUnits.PeriodicOsc"];
  var WAGS_Example_Docs_AudioUnits_PlayBuf = $PS["WAGS.Example.Docs.AudioUnits.PlayBuf"];
  var WAGS_Example_Docs_AudioUnits_Recorder = $PS["WAGS.Example.Docs.AudioUnits.Recorder"];
  var WAGS_Example_Docs_AudioUnits_SawtoothOsc = $PS["WAGS.Example.Docs.AudioUnits.SawtoothOsc"];
  var WAGS_Example_Docs_AudioUnits_SinOsc = $PS["WAGS.Example.Docs.AudioUnits.SinOsc"];
  var WAGS_Example_Docs_AudioUnits_SquareOsc = $PS["WAGS.Example.Docs.AudioUnits.SquareOsc"];
  var WAGS_Example_Docs_AudioUnits_StereoPanner = $PS["WAGS.Example.Docs.AudioUnits.StereoPanner"];
  var WAGS_Example_Docs_AudioUnits_TOC = $PS["WAGS.Example.Docs.AudioUnits.TOC"];
  var WAGS_Example_Docs_AudioUnits_TriangleOsc = $PS["WAGS.Example.Docs.AudioUnits.TriangleOsc"];
  var WAGS_Example_Docs_AudioUnits_WaveShaper = $PS["WAGS.Example.Docs.AudioUnits.WaveShaper"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var components = function (cca$prime) {
      return function (dpage) {
          return function (ssp) {
              return function (ev) {
                  var cpage = Control_Apply.applySecond(Effect.applyEffect)(dpage(WAGS_Example_Docs_Types.Events.value))(WAGS_Example_Docs_Util.scrollToTop);
                  var ccb = WAGS_Example_Docs_Util.ccassp(cca$prime)(ssp);
                  return Deku_Pursx.makePursx({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Audio Units</h1>\x0a\x0a  <h3>There sure are a lot of them!</h3>\x0a  <p>\x0a    This section provides a tour of the web audio nodes provided by the Web Audio API and, by extension, Wags. There are only two omissions:</p>\x0a    <ul>\x0a      <li>Audio Worklet Nodes</li>\x0a      <li>Multi-channel audio</li>\x0a    </ul>\x0a    <p>Both of these will be covered in later sections.</p>\x0a\x0a  <p>\x0a    This section is long and should be read like those passages in the Bible that list who was the child of who: DILIGENTLY AND COPIOUSLY. That said, if you want to skip around, here's a table of contents.\x0a  </p>\x0a  ~toc~\x0a  <p>And now, without further ado... (~drumroll~) Here are some audio nodes!</p>\x0a\x0a  ~allpass~\x0a  ~analyser~\x0a  ~bandpass~\x0a  ~constant~\x0a  ~compression~\x0a  ~convolution~\x0a  ~delay~\x0a  ~gain~\x0a  ~highpass~\x0a  ~highshelf~\x0a  ~iirFilter~\x0a  ~loopBuf~\x0a  ~lowpass~\x0a  ~lowshelf~\x0a  ~microphone~\x0a  ~notch~\x0a  ~peaking~\x0a  ~periodicOsc~\x0a  ~playBuf~\x0a  ~recorder~\x0a  ~sawtoothOsc~\x0a  ~sinOsc~\x0a  ~squareOsc~\x0a  ~pan~\x0a  ~triangleOsc~\x0a  ~waveShaper~\x0a\x0a  <h2>Next steps</h2>\x0a  <p>Phew, that was a lot of audio units! In the next section, we'll make them come alive thanks to the magic of <a ~next~ style=\"cursor:pointer;\">events</a>.</p>\x0a</div>";
                      }
                  })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "waveShaper";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "triangleOsc";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "toc";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "squareOsc";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "sinOsc";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "sawtoothOsc";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "recorder";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "playBuf";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "periodicOsc";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "peaking";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "pan";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "notch";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "next";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "microphone";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "lowshelf";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "lowpass";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "loopBuf";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "iirFilter";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "highshelf";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "highpass";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "gain";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "drumroll";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "delay";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "convolution";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "constant";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "compression";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "bandpass";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "analyser";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "allpass";
                      }
                  }))(px)({
                      drumroll: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapperSpan("\ud83e\udd41")(ev)(ccb)(function (ctx) {
                          return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/50/50711_179538-lq.mp3");
                      })(function (ctx) {
                          return function (buf) {
                              return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                          };
                      })),
                      toc: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_TOC.toc),
                      allpass: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Allpass.allpass(ccb)(dpage)(ev)),
                      analyser: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Analyser.analyserEx(ccb)(dpage)(ev)),
                      bandpass: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Bandpass.bandpass(ccb)(dpage)(ev)),
                      constant: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Constant.constantEx(ccb)(dpage)(ev)),
                      compression: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Compression.compression(ccb)(dpage)(ev)),
                      convolution: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Convolution.convolution(ccb)(dpage)(ev)),
                      delay: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Delay.delay(ccb)(dpage)(ev)),
                      gain: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Gain.gain(ccb)(dpage)(ev)),
                      highpass: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Highpass.highpass(ccb)(dpage)(ev)),
                      highshelf: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Highshelf.highshelf(ccb)(dpage)(ev)),
                      iirFilter: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_IIRFilter.iirFilterEx(ccb)(dpage)(ev)),
                      loopBuf: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_LoopBuf.loopBufEx(ccb)(dpage)(ev)),
                      lowshelf: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Lowshelf.lowshelf(ccb)(dpage)(ev)),
                      lowpass: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Lowpass.lowpass(ccb)(dpage)(ev)),
                      notch: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Notch.notch(ccb)(dpage)(ev)),
                      playBuf: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_PlayBuf.playBufEx(ccb)(dpage)(ev)),
                      peaking: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Peaking.peaking(ccb)(dpage)(ev)),
                      microphone: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Microphone.microphoneEx(ccb)(dpage)(ev)),
                      pan: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_StereoPanner.pan(ccb)(dpage)(ev)),
                      periodicOsc: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_PeriodicOsc.periodic(ccb)(dpage)(ev)),
                      recorder: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_Recorder.recorderEx(ccb)(dpage)(ev)),
                      sawtoothOsc: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_SawtoothOsc.sawtooth(ccb)(dpage)(ev)),
                      sinOsc: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_SinOsc.sine(ccb)(dpage)(ev)),
                      squareOsc: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_SquareOsc.square(ccb)(dpage)(ev)),
                      triangleOsc: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_TriangleOsc.triangle(ccb)(dpage)(ev)),
                      waveShaper: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_AudioUnits_WaveShaper.waveShaperEx(ccb)(dpage)(ev)),
                      next: WAGS_Example_Docs_Util.mkNext(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)(cpage)
                  });
              };
          };
      };
  };
  exports["components"] = components;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Math"] = $PS["WAGS.Math"] || {};
  var exports = $PS["WAGS.Math"];
  var calcSlope = function (x0) {
      return function (y0) {
          return function (x1) {
              return function (y1) {
                  return function (x) {
                      var $1 = x1 === x0 || y1 === y0;
                      if ($1) {
                          return y0;
                      };
                      var m = (y1 - y0) / (x1 - x0);
                      var b = y0 - m * x0;
                      return m * x + b;
                  };
              };
          };
      };
  };
  exports["calcSlope"] = calcSlope;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Effects.FoldEx"] = $PS["WAGS.Example.Docs.Effects.FoldEx"] || {};
  var exports = $PS["WAGS.Example.Docs.Effects.FoldEx"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Vec = $PS["Data.Vec"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_Checked = $PS["Deku.DOM.Attr.Checked"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Attr_Style = $PS["Deku.DOM.Attr.Style"];
  var Deku_DOM_Attr_Xtype = $PS["Deku.DOM.Attr.Xtype"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_DOM_Elt_Input = $PS["Deku.DOM.Elt.Input"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Animate = $PS["FRP.Event.Animate"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var FRP_Event_VBus = $PS["FRP.Event.VBus"];
  var $$Math = $PS["Math"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Clock = $PS["WAGS.Clock"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Math = $PS["WAGS.Math"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var foldEx = function (ccb) {
      return function (v) {
          return function (v1) {
              return function (ev) {
                  return Deku_Pursx.makePursx({
                      reflectSymbol: function () {
                          return "<section>\x0a  <h2>Fold</h2>\x0a\x0a  <p>The type of <code>fold</code> is:</p>\x0a\x0a  <pre><code>fold\x0a    :: forall event a b\x0a    . IsEvent event\x0a    => (a -> b -> b)\x0a    -> event a\x0a    -> b\x0a    -> event b</code></pre>\x0a\x0a  <p>Fold starts with some initial state <code>b</code> and, based on incoming events, allows you to change the state.</p>\x0a\x0a  <p>One way <code>fold</code> is useful is to retain when certain actions happen. In the following example, we use <code>requestAnimationFrame</code> to animate the audio and we use four <code>fold</code>-s to store the ambitus and velocity of both vibrato and tremolo.</p>\x0a\x0a  <pre><code>~txt~</code></pre>\x0a\x0a  ~empl~\x0a\x0a  <p><code>fold</code> is so powerful because it allows us to localize state to <i>any</i> event. In the example above, instead of having a global state, our two folds allow for two <i>ad hoc</i> local states.</p>\x0a\x0a</section>";
                      }
                  })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "txt";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "empl";
                      }
                  }))(px)({
                      txt: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Foldable (oneOf, oneOfMap)\x0aimport Data.Tuple.Nested ((/\\))\x0aimport Data.Vec ((+>))\x0aimport Data.Vec as V\x0aimport Deku.Attribute (attr, cb, (:=))\x0aimport Deku.Control (blank, text)\x0aimport Deku.DOM as D\x0aimport Deku.Toplevel (runInBody1)\x0aimport Effect (Effect)\x0aimport FRP.Behavior (sampleBy, sample_, step)\x0aimport FRP.Event (memoize)\x0aimport FRP.Event.Animate (animationFrameEvent)\x0aimport FRP.Event.Class (bang, fold, mapAccum, sampleOn)\x0aimport FRP.Event.VBus (V, vbus)\x0aimport Math (pi, sin)\x0aimport Type.Proxy (Proxy(..))\x0aimport WAGS.Clock (withACTime)\x0aimport WAGS.Control (gain, periodicOsc)\x0aimport WAGS.Interpret (close, constant0Hack, context)\x0aimport WAGS.Math (calcSlope)\x0aimport WAGS.Parameter (AudioNumeric(..), _linear, bangOn)\x0aimport WAGS.Properties as P\x0aimport WAGS.Run (run2e)\x0a\x0atype Cbx = V (cbx0 :: Unit, cbx1 :: Unit, cbx2 :: Unit, cbx3 :: Unit)\x0a\x0atype StartStop = V (start :: Unit, stop :: Effect Unit)\x0a\x0atype UIEvents = V\x0a  ( startStop :: StartStop\x0a  , cbx :: Cbx\x0a  )\x0a\x0amain :: Effect Unit\x0amain = runInBody1\x0a  ( vbus (Proxy :: _ UIEvents) \\push event -> do\x0a      let\x0a        startE = bang unit <|> event.startStop.start\x0a        stopE = event.startStop.stop\x0a        chkState e = step false $ fold (const not) e false\x0a        cbx0 = chkState event.cbx.cbx0\x0a        cbx1 = chkState event.cbx.cbx1\x0a        cbx2 = chkState event.cbx.cbx2\x0a        cbx3 = chkState event.cbx.cbx3\x0a      D.div_\x0a        [ D.button\x0a            ( oneOfMap (map (attr D.OnClick <<< cb <<< const))\x0a                [ startE $> do\x0a                    ctx <- context\x0a                    c0h <- constant0Hack ctx\x0a                    let\x0a                      cevt fast b tm = mapAccum\x0a                        ( \\(oo /\\ act) (pact /\\ pt) ->\x0a                            let\x0a                              tn = pt +\x0a                                ( (act - pact) *\x0a                                    (if oo then fast else 1.0)\x0a                                )\x0a                            in\x0a                              ((act /\\ tn) /\\ tn)\x0a                        )\x0a                        (sampleBy (/\\) b tm)\x0a                        (0.0 /\\ 0.0)\x0a\x0a                    r <- run2e ctx\x0a                      ( memoize\x0a                          ( map (add 0.04 <<< _.acTime)\x0a                              $ withACTime ctx animationFrameEvent\x0a                          )\x0a                          \\acTime ->\x0a                            let\x0a                              ev0 = cevt 8.0 cbx0 acTime\x0a                              ev1 = map (if _ then 4.0 else 1.0) $ sample_ cbx1 acTime\x0a                              ev2 = cevt 4.0 cbx2 acTime\x0a                              ev3 = map (if _ then 4.0 else 1.0) $ sample_ cbx3 acTime\x0a                              evs f a = sampleOn acTime\x0a                                $ map ($)\x0a                                $ sampleOn a\x0a                                $ { f: _, a: _, t: _ } <$> f\x0a                            in\x0a                              [ gain 0.0\x0a                                  ( evs ev0 ev1 <#> \\{ f, a, t } -> P.gain $ AudioNumeric\x0a                                      { n: calcSlope 1.0 0.01 4.0 0.15 a * sin (pi * f) + 0.15\x0a                                      , o: t\x0a                                      , t: _linear\x0a                                      }\x0a                                  )\x0a                                  [ periodicOsc\x0a                                      { frequency: 325.6\x0a                                      , spec: (0.3 +> -0.1 +> 0.7 +> -0.4 +> V.empty)\x0a                                          /\\ (0.6 +> 0.3 +> 0.2 +> 0.0 +> V.empty)\x0a                                      }\x0a                                      ( oneOf\x0a                                          [ bangOn\x0a                                          , evs ev2 ev3 <#> \\{ f, a, t } -> P.frequency\x0a                                              $ AudioNumeric\x0a                                                { n: 325.6 +\x0a                                                    (calcSlope 1.0 3.0 4.0 15.5 a * sin (pi * f))\x0a                                                , o: t\x0a                                                , t: _linear\x0a                                                }\x0a                                          ]\x0a                                      )\x0a                                  ]\x0a                              ]\x0a                      )\x0a                    push.startStop.stop (r *> c0h *> close ctx)\x0a                , stopE <#> (_ *> push.startStop.start unit)\x0a                ]\x0a            )\x0a            [ text $ oneOf\x0a                [ startE $> \"Turn on\"\x0a                , stopE $> \"Turn off\"\x0a                ]\x0a            ]\x0a        , D.div\x0a            ( oneOfMap (map (attr D.Style))\x0a                [ stopE $> \"display:block;\"\x0a                , startE $> \"display:none;\"\x0a                ]\x0a            )\x0a            ( map\x0a                ( \\e -> D.input\x0a                    ( oneOf\x0a                        [ bang (D.Xtype := \"checkbox\")\x0a                        , bang (D.OnClick := cb (const (e unit)))\x0a                        , startE $> (D.Checked := \"false\")\x0a                        ]\x0a                    )\x0a                    blank\x0a                )\x0a                ([ _.cbx0, _.cbx1, _.cbx2, _.cbx3 ] <@> push.cbx)\x0a            )\x0a        ]\x0a  )")),
                      empl: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event_VBus.vbus()(FRP_Event_VBus.vbusCons1({
                          reflectSymbol: function () {
                              return "cbx";
                          }
                      })()()()(FRP_Event_VBus.vbusCons2({
                          reflectSymbol: function () {
                              return "cbx0";
                          }
                      })()()(FRP_Event_VBus.vbusCons2({
                          reflectSymbol: function () {
                              return "cbx1";
                          }
                      })()()(FRP_Event_VBus.vbusCons2({
                          reflectSymbol: function () {
                              return "cbx2";
                          }
                      })()()(FRP_Event_VBus.vbusCons2({
                          reflectSymbol: function () {
                              return "cbx3";
                          }
                      })()()(FRP_Event_VBus.vbusNil)()()()())()()()())()()()())()()()())(FRP_Event_VBus.vbusCons1({
                          reflectSymbol: function () {
                              return "startStop";
                          }
                      })()()()(FRP_Event_VBus.vbusCons2({
                          reflectSymbol: function () {
                              return "start";
                          }
                      })()()(FRP_Event_VBus.vbusCons2({
                          reflectSymbol: function () {
                              return "stop";
                          }
                      })()()(FRP_Event_VBus.vbusNil)()()()())()()()())(FRP_Event_VBus.vbusNil)()()()())()()()())(Type_Proxy["Proxy"].value)(function (push) {
                          return function (event) {
                              var startE = Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Data_Unit.unit))(event.startStop.start);
                              var chkState = function (e) {
                                  return FRP_Behavior.step(FRP_Event.eventIsEvent)(false)(FRP_Event_Class.fold(FRP_Event.eventIsEvent)(Data_Function["const"](Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)))(e)(false));
                              };
                              var cbx3 = chkState(event.cbx.cbx3);
                              var cbx2 = chkState(event.cbx.cbx2);
                              var cbx1 = chkState(event.cbx.cbx1);
                              var cbx0 = chkState(event.cbx.cbx0);
                              return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                  var $37 = Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value);
                                  return function ($38) {
                                      return $37(Deku_Attribute.cb(Data_Function["const"]($38)));
                                  };
                              })()))([ Data_Functor.mapFlipped(FRP_Event.functorEvent)(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return v2.value0;
                              })(ev)))(Data_Functor.voidLeft(FRP_Event.functorEvent)(startE)(Control_Category.identity(Control_Category.categoryFn))))(function (cncl) {
                                  return function __do() {
                                      cncl();
                                      var ctx = WAGS_Interpret.context(Effect_Class.monadEffectEffect)();
                                      var c0h = WAGS_Interpret.constant0Hack(Effect_Class.monadEffectEffect)(ctx)();
                                      var cevt = function (fast) {
                                          return function (b) {
                                              return function (tm) {
                                                  return FRP_Event_Class.mapAccum(FRP_Event.eventIsEvent)(function (v2) {
                                                      return function (v3) {
                                                          var tn = v3.value1 + (v2.value1 - v3.value0) * (function () {
                                                              if (v2.value0) {
                                                                  return fast;
                                                              };
                                                              return 1.0;
                                                          })();
                                                          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(v2.value1, tn), tn);
                                                      };
                                                  })(FRP_Behavior.sampleBy(FRP_Event.eventIsEvent)(Data_Tuple.Tuple.create)(b)(tm))(new Data_Tuple.Tuple(0.0, 0.0));
                                              };
                                          };
                                      };
                                      var r$prime = WAGS_Run.run2e(ctx)(FRP_Event.memoize(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                          var $39 = Data_Semiring.add(Data_Semiring.semiringNumber)(4.0e-2);
                                          return function ($40) {
                                              return $39((function (v2) {
                                                  return v2.acTime;
                                              })($40));
                                          };
                                      })())(WAGS_Clock.withACTime(ctx)(FRP_Event_Animate.animationFrameEvent)))(function (acTime) {
                                          var evs = function (f) {
                                              return function (a) {
                                                  return FRP_Event_Class.sampleOn(FRP_Event.eventIsEvent)(acTime)(Data_Functor.map(FRP_Event.functorEvent)(Data_Function.apply)(FRP_Event_Class.sampleOn(FRP_Event.eventIsEvent)(a)(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                                      return function (v3) {
                                                          return function (v4) {
                                                              return {
                                                                  f: v2,
                                                                  a: v3,
                                                                  t: v4
                                                              };
                                                          };
                                                      };
                                                  })(f))));
                                              };
                                          };
                                          var ev3 = Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                              if (v2) {
                                                  return 4.0;
                                              };
                                              return 1.0;
                                          })(FRP_Behavior.sample_(FRP_Event.eventIsEvent)(cbx3)(acTime));
                                          var ev2 = cevt(4.0)(cbx2)(acTime);
                                          var ev1 = Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                              if (v2) {
                                                  return 4.0;
                                              };
                                              return 1.0;
                                          })(FRP_Behavior.sample_(FRP_Event.eventIsEvent)(cbx1)(acTime));
                                          var ev0 = cevt(8.0)(cbx0)(acTime);
                                          return [ WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(Data_Functor.mapFlipped(FRP_Event.functorEvent)(evs(ev0)(ev1))(function (v2) {
                                              return WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioNume)({
                                                  n: WAGS_Math.calcSlope(1.0)(1.0e-2)(4.0)(0.15)(v2.a) * $$Math.sin($$Math.pi * v2.f) + 0.15,
                                                  o: v2.t,
                                                  t: WAGS_Parameter["_linear"]
                                              });
                                          }))([ WAGS_Control.periodicOsc(WAGS_Common.initialPeriodicOscRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeriodicOscO1(WAGS_Common.periodicOscSpecableVecNum(Data_Typelevel_Num_Sets.posD4)))()()()({
                                              reflectSymbol: function () {
                                                  return "spec";
                                              }
                                          }))(WAGS_Common.convertOptionPeriodicOscO)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))({
                                              frequency: 325.6,
                                              spec: new Data_Tuple.Tuple(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(0.3)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(-0.1)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(0.7)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(-0.4)(Data_Vec.empty)))), Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(0.6)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(0.3)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(0.2)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(0.0)(Data_Vec.empty)))))
                                          })(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ WAGS_Parameter.bangOn(), Data_Functor.mapFlipped(FRP_Event.functorEvent)(evs(ev2)(ev3))(function (v2) {
                                              return WAGS_Properties.frequency()(WAGS_Parameter.toAudioParameterAudioNume)({
                                                  n: 325.6 + WAGS_Math.calcSlope(1.0)(3.0)(4.0)(15.5)(v2.a) * $$Math.sin($$Math.pi * v2.f),
                                                  o: v2.t,
                                                  t: WAGS_Parameter["_linear"]
                                              });
                                          }) ])) ]) ];
                                      }))();
                                      var r = Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(r$prime)(c0h))(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx));
                                      ccb(Control_Apply.applySecond(Effect.applyEffect)(r)(push.startStop.start(Data_Unit.unit)))();
                                      return push.startStop.stop(r)();
                                  };
                              }), Data_Functor.mapFlipped(FRP_Event.functorEvent)(event.startStop.stop)(function (v2) {
                                  return Control_Apply.applySecond(Effect.applyEffect)(v2)(Control_Apply.applySecond(Effect.applyEffect)(ccb(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(push.startStop.start(Data_Unit.unit)));
                              }) ]))([ Deku_Control.text(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ Data_Functor.voidLeft(FRP_Event.functorEvent)(startE)("Turn on"), Data_Functor.voidLeft(FRP_Event.functorEvent)(event.startStop.stop)("Turn off") ])) ]), Deku_DOM_Elt_Div.div(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(Data_Functor.map(FRP_Event.functorEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrDiv_StyleString)(Deku_DOM_Attr_Style.Style.value)))([ Data_Functor.voidLeft(FRP_Event.functorEvent)(event.startStop.stop)("display:block;"), Data_Functor.voidLeft(FRP_Event.functorEvent)(startE)("display:none;") ]))(Data_Functor.map(Data_Functor.functorArray)(function (e) {
                                  return Deku_DOM_Elt_Input.input(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Xtype.attrInput_XtypeString)(Deku_DOM_Attr_Xtype.Xtype.value)("checkbox")), FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](e(Data_Unit.unit))))), Data_Functor.voidLeft(FRP_Event.functorEvent)(startE)(Deku_Attribute.attr(Deku_DOM_Attr_Checked.attrInput_CheckedString)(Deku_DOM_Attr_Checked.Checked.value)("false")) ]))(Deku_Control.blank);
                              })(Data_Functor.flap(Data_Functor.functorArray)([ function (v2) {
                                  return v2.cbx0;
                              }, function (v2) {
                                  return v2.cbx1;
                              }, function (v2) {
                                  return v2.cbx2;
                              }, function (v2) {
                                  return v2.cbx3;
                              } ])(push.cbx))) ]);
                          };
                      }))
                  });
              };
          };
      };
  };
  exports["foldEx"] = foldEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.FixEx"] = $PS["WAGS.Example.Docs.FixEx"] || {};
  var exports = $PS["WAGS.Example.Docs.FixEx"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_DivisionRing = $PS["Data.DivisionRing"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Field = $PS["Data.Field"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Vec = $PS["Data.Vec"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Behavior_Mouse = $PS["FRP.Behavior.Mouse"];
  var FRP_Behavior_Time = $PS["FRP.Behavior.Time"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Animate = $PS["FRP.Event.Animate"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var FRP_Event_Mouse = $PS["FRP.Event.Mouse"];
  var FRP_Event_VBus = $PS["FRP.Event.VBus"];
  var Random_LCG = $PS["Random.LCG"];
  var Test_QuickCheck_Arbitrary = $PS["Test.QuickCheck.Arbitrary"];
  var Test_QuickCheck_Gen = $PS["Test.QuickCheck.Gen"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Clock = $PS["WAGS.Clock"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var swell = function (mouse) {
      var integral = function (dictIsEvent) {
          return function (dictField) {
              return function (dictSemiring) {
                  return function (g) {
                      return function (initial) {
                          return function (t) {
                              return function (b) {
                                  var two = Data_Semiring.add(((dictField.DivisionRing1()).Ring0()).Semiring0())(Data_Semiring.one(((dictField.DivisionRing1()).Ring0()).Semiring0()))(Data_Semiring.one(((dictField.DivisionRing1()).Ring0()).Semiring0()));
                                  var approx = function (v) {
                                      return function (s) {
                                          if (v.last instanceof Data_Maybe.Nothing) {
                                              return s;
                                          };
                                          if (v.last instanceof Data_Maybe.Just) {
                                              return Data_Semiring.add(dictSemiring)(s)(g(function (z) {
                                                  return Data_EuclideanRing.div(dictField.EuclideanRing0())(Data_Semiring.mul(((dictField.DivisionRing1()).Ring0()).Semiring0())(z(Data_Semiring.add(dictSemiring)(v.last.value0.value1)(v.now.value1)))(Data_Ring.sub((dictField.DivisionRing1()).Ring0())(v.now.value0)(v.last.value0.value0)))(two);
                                              }));
                                          };
                                          throw new Error("Failed pattern match at WAGS.Example.Docs.FixEx (line 102, column 5 - line 102, column 35): " + [ v.constructor.name, s.constructor.name ]);
                                      };
                                  };
                                  return FRP_Behavior.behavior(function (e) {
                                      var x = FRP_Behavior.sample(b)(Data_Functor.voidLeft((dictIsEvent.Filterable1()).Functor1())(e)(Control_Category.identity(Control_Category.categoryFn)));
                                      var y = FRP_Event_Class.withLast(dictIsEvent)(FRP_Behavior.sampleBy(dictIsEvent)(Data_Tuple.Tuple.create)(t)(x));
                                      var z = FRP_Event_Class.fold(dictIsEvent)(approx)(y)(initial);
                                      return FRP_Event_Class.sampleOn(dictIsEvent)(z)(e);
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
      var integral$prime = function (dictIsEvent) {
          return function (dictField) {
              return integral(dictIsEvent)(dictField)(((dictField.DivisionRing1()).Ring0()).Semiring0())(function (v) {
                  return v(Control_Category.identity(Control_Category.categoryFn));
              });
          };
      };
      var fixB = function (a) {
          return function (fn) {
              return FRP_Behavior.behavior(function (s) {
                  return FRP_Event_Class.fix(FRP_Event.eventIsEvent)(function (event) {
                      var b = fn(FRP_Behavior.step(FRP_Event.eventIsEvent)(a)(event));
                      return {
                          input: FRP_Behavior.sample_(FRP_Event.eventIsEvent)(b)(s),
                          output: FRP_Event_Class.sampleOn(FRP_Event.eventIsEvent)(event)(s)
                      };
                  });
              });
          };
      };
      var f = function (bs) {
          return function (s) {
              return function (ds) {
                  if (Data_Set.isEmpty(bs)) {
                      return -8.0 * (s - 1.0) - ds * 2.0;
                  };
                  if (Data_Boolean.otherwise) {
                      return 2.0 * (4.0 - s);
                  };
                  throw new Error("Failed pattern match at WAGS.Example.Docs.FixEx (line 62, column 3 - line 64, column 34): " + [ bs.constructor.name, s.constructor.name, ds.constructor.name ]);
              };
          };
      };
      return fixB(2.0)(function (b) {
          return integral$prime(FRP_Event.eventIsEvent)(Data_Field.field(Data_EuclideanRing.euclideanRingNumber)(Data_DivisionRing.divisionringNumber))(2.0)(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_Newtype.unwrap())(FRP_Behavior_Time.seconds))((function () {
              var db = fixB(10.0)(function (db_) {
                  return integral$prime(FRP_Event.eventIsEvent)(Data_Field.field(Data_EuclideanRing.euclideanRingNumber)(Data_DivisionRing.divisionringNumber))(10.0)(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_Newtype.unwrap())(FRP_Behavior_Time.seconds))(Control_Apply.apply(FRP_Behavior.applyABehavior(FRP_Event.functorEvent))(Control_Apply.apply(FRP_Behavior.applyABehavior(FRP_Event.functorEvent))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(f)(FRP_Behavior_Mouse.buttons(mouse)))(b))(db_));
              });
              return FRP_Behavior.switcher(db)(Data_Functor.voidLeft(FRP_Event.functorEvent)(FRP_Event_Mouse.down)(db));
          })());
      });
  };
  var px = Type_Proxy["Proxy"].value;
  var fixEx = function (ccb) {
      return function (v) {
          return function (v1) {
              return function (ev) {
                  return Deku_Pursx.makePursx({
                      reflectSymbol: function () {
                          return "<section>\x0a  <h2>Fix</h2>\x0a\x0a  <p>Fix, like it's equivalent in wags that we've already seen, creates a feedback loop. However, in this case, we are talking about a feedback loop of <i>events</i>, not sound.</p>\x0a\x0a  <p>At first glance, it may not be clear why we need an event stream to feed back into itself? It seems prone to saturation: if you have a counter that feeds back into itself with a delay, after a few seconds you'll have so many events that it will crash your browser (I've tried it!).</p>\x0a\x0a  <p>However, there's one important circumstance where you need fixed points: when an event can only be defined in terms of itself. One classic category of this is the <i>differential equation</i>. Differential equations allow you to produce <a href=\"https://en.wikipedia.org/wiki/Simple_harmonic_motion\">Slinky effects, aka simple harmonic motion,</a> and a lot of other neat behaviors that are difficult to produce via other means.</p>\x0a\x0a  <p>Let's listen to the sound of simple harmonic motion in the example below, courtesy of <code>fix</code>. The differential equation in the example below comes from Phil Freeman, the creator of the PureScript language and the author of the <code>purescript-behaviors</code> package. When you click \"Turn on\", you won't hear much, but press and release your mouse anywhere on the screen to hear the differential equation take flight!</p>\x0a\x0a  <pre><code>~txt~</code></pre>\x0a\x0a  ~empl~\x0a\x0a  <p>When working with stateful events, a good way to decide if you should use <code>fold</code> versus <code>fix</code> is to ask the following question: can I incrementally change my state based on an initial state, or is my state defined in terms of how it changes? If you can incrementally change your state, go with <code>fold</code>. If, on the other hand, your state is defined in terms of how it changes, go with <code>fix</code>.</p>\x0a</section>";
                      }
                  })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "txt";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "empl";
                      }
                  }))(px)({
                      txt: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Foldable (oneOf, oneOfMap)\x0aimport Data.Maybe (Maybe(..))\x0aimport Data.Newtype (unwrap)\x0aimport Data.Profunctor.Strong (second)\x0aimport Data.Set (isEmpty)\x0aimport Data.Tuple.Nested ((/\\))\x0aimport Data.Vec ((+>))\x0aimport Data.Vec as V\x0aimport Deku.Attribute (attr, cb)\x0aimport Deku.Control (text)\x0aimport Deku.DOM as D\x0aimport Deku.Toplevel (runInBody1)\x0aimport Effect (Effect)\x0aimport Effect.Random (randomInt)\x0aimport FRP.Behavior (ABehavior, Behavior, behavior, sample, sampleBy, sample_, step, switcher)\x0aimport FRP.Behavior.Mouse (buttons)\x0aimport FRP.Behavior.Time as Time\x0aimport FRP.Event (memoize)\x0aimport FRP.Event.Animate (animationFrameEvent)\x0aimport FRP.Event.Class (class IsEvent, bang, fix, fold, sampleOn, withLast)\x0aimport FRP.Event.Mouse (Mouse, down, getMouse)\x0aimport FRP.Event.VBus (V, vbus)\x0aimport Test.QuickCheck (arbitrary, mkSeed)\x0aimport Test.QuickCheck.Gen (evalGen)\x0aimport Type.Proxy (Proxy(..))\x0aimport WAGS.Clock (withACTime)\x0aimport WAGS.Control (bandpass_, gain, lowpass_, periodicOsc, squareOsc_)\x0aimport WAGS.Interpret (close, constant0Hack, context)\x0aimport WAGS.Parameter (AudioNumeric(..), _linear, bangOn)\x0aimport WAGS.Properties as P\x0aimport WAGS.Run (run2e)\x0a\x0atype StartStop = V (start :: Unit, stop :: Effect Unit)\x0a\x0a-- `swell` is an interactive function of time defined by a differential equation:\x0a--\x0a-- d^2s/dt^2\x0a--   | mouse down = \u237a - \u03b2s\x0a--   | mouse up   = \u0263 - \u03b4s - \u03b5 ds/dt\x0a--\x0a-- So the function exhibits either decay or growth depending on if\x0a-- the mouse is pressed or not.\x0a--\x0a-- We can solve the differential equation by integration using `solve2'`.\x0aswell :: Mouse -> Behavior Number\x0aswell mouse =\x0a  fixB 2.0 \\b ->\x0a    integral' 2.0 (unwrap <$> Time.seconds)\x0a      let\x0a        db = fixB 10.0 \\db_ ->\x0a          integral' 10.0 (unwrap <$> Time.seconds) (f <$> buttons mouse <*> b <*> db_)\x0a      in\x0a        switcher db (down $> db)\x0a  where\x0a  f bs s ds\x0a    | isEmpty bs = -8.0 * (s - 1.0) - ds * 2.0\x0a    | otherwise = 2.0 * (4.0 - s)\x0a\x0a  fixB :: forall a. a -> (Behavior a -> Behavior a) -> Behavior a\x0a  fixB a fn = behavior \\s ->\x0a    fix \\event ->\x0a      let\x0a        b = fn (step a event)\x0a      in\x0a        { input: sample_ b s, output: sampleOn event s }\x0a\x0a  -- | Integrate with respect to some measure of time.\x0a  -- |\x0a  -- | This function approximates the integral using the trapezium rule at the\x0a  -- | implicit sampling interval.\x0a  -- |\x0a  -- | The `Semiring` `a` should be a vector field over the field `t`. To represent\x0a  -- | this, the user should provide a _grate_ which lifts a multiplication\x0a  -- | function on `t` to a function on `a`. Simple examples where `t ~ a` can use\x0a  -- | the `integral'` function instead.\x0a  integral\x0a    :: forall event a t\x0a     . IsEvent event\x0a    => Field t\x0a    => Semiring a\x0a    => (((a -> t) -> t) -> a)\x0a    -> a\x0a    -> ABehavior event t\x0a    -> ABehavior event a\x0a    -> ABehavior event a\x0a  integral g initial t b =\x0a    behavior \\e ->\x0a      let\x0a        x = sample b (e $> identity)\x0a        y = withLast (sampleBy (/\\) t x)\x0a        z = fold approx y initial\x0a      in\x0a        sampleOn z e\x0a    where\x0a    approx { last: Nothing } s = s\x0a    approx { now: t1 /\\ a1, last: Just (t0 /\\ a0) } s = s + g (\\z -> z (a0 + a1) * (t1 - t0) / two)\x0a\x0a    two :: t\x0a    two = one + one\x0a\x0a  -- | Integrate with respect to some measure of time.\x0a  -- |\x0a  -- | This function is a simpler version of `integral` where the function being\x0a  -- | integrated takes values in the same field used to represent time.\x0a  integral'\x0a    :: forall event t\x0a     . IsEvent event\x0a    => Field t\x0a    => t\x0a    -> ABehavior event t\x0a    -> ABehavior event t\x0a    -> ABehavior event t\x0a  integral' = integral (_ $ identity)\x0a\x0amain :: Effect Unit\x0amain = runInBody1\x0a  ( vbus (Proxy :: _ StartStop) \\push event -> do\x0a      let\x0a        startE = bang unit <|> event.start\x0a        stopE = event.stop\x0a      D.div_\x0a        [ D.button\x0a            ( oneOfMap (map (attr D.OnClick <<< cb <<< const))\x0a                [ startE $>\x0a                    do\x0a                      ctx <- context\x0a                      c0h <- constant0Hack ctx\x0a                      mouse <- getMouse\x0a                      ri <- randomInt 0 10000\x0a                      let\x0a                        ttap (o /\\ n) = AudioNumeric { o: o + 0.04, n, t: _linear }\x0a                        fund = 90.4\x0a                        spcn = map (_ - 0.5) arbitrary\x0a                        spc' = do\x0a                          a <- spcn\x0a                          b <- spcn\x0a                          c <- spcn\x0a                          d <- spcn\x0a                          pure (a +> b +> c +> d +> V.empty)\x0a                        spc = (/\\) <$> spc' <*> spc'\x0a                        spcs = { s0: _, s1: _, s2: _, s3: _ } <$> spc <*> spc <*> spc <*> spc\x0a                        allSpcs = evalGen spcs { newSeed: mkSeed ri, size: 5 }\x0a                      r <- run2e ctx\x0a                        ( memoize\x0a                            ( map (\\{ acTime, value } -> acTime /\\ value)\x0a                                $ withACTime ctx\x0a                                $ sample_ (swell mouse) animationFrameEvent\x0a                            )\x0a                            \\swm ->\x0a                              [ gain 0.0\x0a                                  ( P.gain\x0a                                      <<< ttap\x0a                                      <<< second (\\x -> max (-0.4) $ 0.5 * (x - 1.0)) <$> swm\x0a                                  )\x0a                                  [ lowpass_ { frequency: fund, q: 20.0 }\x0a                                      [ squareOsc_ fund ]\x0a                                  ]\x0a                              , gain 0.0\x0a                                  ( P.gain\x0a                                      <<< ttap\x0a                                      <<< second (\\x -> max (-0.2) $ 0.4 * (x - 3.0)) <$> swm\x0a                                  )\x0a                                  [ bandpass_ { frequency: fund * 4.0, q: 20.0 }\x0a                                      [ periodicOsc\x0a                                          { frequency: (fund * 3.02)\x0a                                          , spec: allSpcs.s0\x0a                                          }\x0a                                          ( bangOn <|>\x0a                                              ( P.frequency\x0a                                                  <<< ttap\x0a                                                  <<< second (\\x -> fund * 3.02 + 14.0 * (x - 1.0)) <$> swm\x0a                                              )\x0a                                          )\x0a                                      ]\x0a                                  ]\x0a                              , gain 0.0\x0a                                  ( P.gain\x0a                                      <<< ttap\x0a                                      <<< second (\\x -> max (-0.1) $ 0.2 * (x - 6.0)) <$> swm\x0a                                  )\x0a                                  [ bandpass_ { frequency: fund * 6.0, q: 20.0 }\x0a                                      [ periodicOsc\x0a                                          { frequency: fund * 5.07\x0a                                          , spec: allSpcs.s1\x0a                                          }\x0a                                          ( bangOn <|>\x0a                                              ( P.frequency\x0a                                                  <<< ttap\x0a                                                  <<< second (\\x -> fund * 5.07 + 18.0 * (x - 1.0)) <$> swm\x0a                                              )\x0a                                          )\x0a                                      ]\x0a                                  ]\x0a                              , gain 0.0\x0a                                  ( P.gain\x0a                                      <<< ttap\x0a                                      <<< second (\\x -> max 0.0 $ 0.2 * (x - 3.0)) <$> swm\x0a                                  )\x0a                                  [ bandpass_ { frequency: fund * 8.0, q: 20.0 }\x0a                                      [ periodicOsc\x0a                                          { frequency: fund * 7.13\x0a                                          , spec: allSpcs.s2\x0a                                          }\x0a                                          ( bangOn <|>\x0a                                              ( P.frequency\x0a                                                  <<< ttap\x0a                                                  <<< second (\\x -> fund * 7.13 + 32.0 * (x - 1.0)) <$> swm\x0a                                              )\x0a                                          )\x0a                                      ]\x0a                                  ]\x0a                              , gain 0.0\x0a                                  ( P.gain\x0a                                      <<< ttap\x0a                                      <<< second (\\x -> max 0.0 $ 0.1 * (x - 7.0)) <$> swm\x0a                                  )\x0a                                  [ periodicOsc\x0a                                      { frequency: fund * 9.14\x0a                                      , spec: allSpcs.s3\x0a                                      }\x0a                                      ( bangOn <|>\x0a                                          ( P.frequency\x0a                                              <<< ttap\x0a                                              <<< second (\\x -> fund * 9.14 + 31.0 * (x - 1.0)) <$> swm\x0a                                          )\x0a                                      )\x0a                                  ]\x0a                              ]\x0a                        )\x0a                      push.stop (r *> c0h *> close ctx)\x0a                , event.stop <#> (_ *> push.start unit)\x0a                ]\x0a            )\x0a            [ text $ oneOf\x0a                [ startE $> \"Turn on\"\x0a                , stopE $> \"Turn off\"\x0a                ]\x0a            ]\x0a        ]\x0a  )")),
                      empl: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event_VBus.vbus()(FRP_Event_VBus.vbusCons2({
                          reflectSymbol: function () {
                              return "start";
                          }
                      })()()(FRP_Event_VBus.vbusCons2({
                          reflectSymbol: function () {
                              return "stop";
                          }
                      })()()(FRP_Event_VBus.vbusNil)()()()())()()()())(Type_Proxy["Proxy"].value)(function (push) {
                          return function (event) {
                              var startE = Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Data_Unit.unit))(event.start);
                              return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                  var $39 = Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value);
                                  return function ($40) {
                                      return $39(Deku_Attribute.cb(Data_Function["const"]($40)));
                                  };
                              })()))([ Data_Functor.mapFlipped(FRP_Event.functorEvent)(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                  return v2.value0;
                              })(ev)))(Data_Functor.voidLeft(FRP_Event.functorEvent)(startE)(Control_Category.identity(Control_Category.categoryFn))))(function (cncl) {
                                  return function __do() {
                                      cncl();
                                      var ctx = WAGS_Interpret.context(Effect_Class.monadEffectEffect)();
                                      var c0h = WAGS_Interpret.constant0Hack(Effect_Class.monadEffectEffect)(ctx)();
                                      var mouse = FRP_Event_Mouse.getMouse();
                                      var ri = Effect_Random.randomInt(0)(10000)();
                                      var ttap = function (v2) {
                                          return {
                                              o: v2.value0 + 4.0e-2,
                                              n: v2.value1,
                                              t: WAGS_Parameter["_linear"]
                                          };
                                      };
                                      var spcn = Data_Functor.map(Test_QuickCheck_Gen.functorGen)(function (v2) {
                                          return v2 - 0.5;
                                      })(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbNumber));
                                      var spc$prime = Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(spcn)(function (a) {
                                          return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(spcn)(function (b) {
                                              return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(spcn)(function (c) {
                                                  return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(spcn)(function (d) {
                                                      return Control_Applicative.pure(Test_QuickCheck_Gen.applicativeGen)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(a)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(b)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(c)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(d)(Data_Vec.empty)))));
                                                  });
                                              });
                                          });
                                      });
                                      var spc = Control_Apply.apply(Test_QuickCheck_Gen.applyGen)(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Tuple.Tuple.create)(spc$prime))(spc$prime);
                                      var spcs = Control_Apply.apply(Test_QuickCheck_Gen.applyGen)(Control_Apply.apply(Test_QuickCheck_Gen.applyGen)(Control_Apply.apply(Test_QuickCheck_Gen.applyGen)(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(function (v2) {
                                          return function (v3) {
                                              return function (v4) {
                                                  return function (v5) {
                                                      return {
                                                          s0: v2,
                                                          s1: v3,
                                                          s2: v4,
                                                          s3: v5
                                                      };
                                                  };
                                              };
                                          };
                                      })(spc))(spc))(spc))(spc);
                                      var allSpcs = Test_QuickCheck_Gen.evalGen(spcs)({
                                          newSeed: Random_LCG.mkSeed(ri),
                                          size: 5
                                      });
                                      var r$prime = WAGS_Run.run2e(ctx)(FRP_Event.memoize(Data_Functor.map(FRP_Event.functorEvent)(function (v2) {
                                          return new Data_Tuple.Tuple(v2.acTime, v2.value);
                                      })(WAGS_Clock.withACTime(ctx)(FRP_Behavior.sample_(FRP_Event.eventIsEvent)(swell(mouse))(FRP_Event_Animate.animationFrameEvent))))(function (swm) {
                                          return [ WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                              var $41 = WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioNume);
                                              var $42 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (x) {
                                                  return Data_Ord.max(Data_Ord.ordNumber)(-0.4)(0.5 * (x - 1.0));
                                              });
                                              return function ($43) {
                                                  return $41(ttap($42($43)));
                                              };
                                          })())(swm))([ WAGS_Control.lowpass_(WAGS_Common.initialLowpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionLowpassOptio)()()()({
                                              reflectSymbol: function () {
                                                  return "q";
                                              }
                                          }))(WAGS_Common.convertOptionLowpassOptio1)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                              frequency: 90.4,
                                              q: 20.0
                                          })([ WAGS_Control.squareOsc_(WAGS_Common.initialSquareOscNumber)(90.4) ]) ]), WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                              var $44 = WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioNume);
                                              var $45 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (x) {
                                                  return Data_Ord.max(Data_Ord.ordNumber)(-0.2)(0.4 * (x - 3.0));
                                              });
                                              return function ($46) {
                                                  return $44(ttap($45($46)));
                                              };
                                          })())(swm))([ WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                              reflectSymbol: function () {
                                                  return "q";
                                              }
                                          }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                              frequency: 90.4 * 4.0,
                                              q: 20.0
                                          })([ WAGS_Control.periodicOsc(WAGS_Common.initialPeriodicOscRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeriodicOscO1(WAGS_Common.periodicOscSpecableVecNum(Data_Typelevel_Num_Sets.posD4)))()()()({
                                              reflectSymbol: function () {
                                                  return "spec";
                                              }
                                          }))(WAGS_Common.convertOptionPeriodicOscO)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))({
                                              frequency: 90.4 * 3.02,
                                              spec: allSpcs.s0
                                          })(Control_Alt.alt(FRP_Event.altEvent)(WAGS_Parameter.bangOn())(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                              var $47 = WAGS_Properties.frequency()(WAGS_Parameter.toAudioParameterAudioNume);
                                              var $48 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (x) {
                                                  return 90.4 * 3.02 + 14.0 * (x - 1.0);
                                              });
                                              return function ($49) {
                                                  return $47(ttap($48($49)));
                                              };
                                          })())(swm))) ]) ]), WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                              var $50 = WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioNume);
                                              var $51 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (x) {
                                                  return Data_Ord.max(Data_Ord.ordNumber)(-0.1)(0.2 * (x - 6.0));
                                              });
                                              return function ($52) {
                                                  return $50(ttap($51($52)));
                                              };
                                          })())(swm))([ WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                              reflectSymbol: function () {
                                                  return "q";
                                              }
                                          }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                              frequency: 90.4 * 6.0,
                                              q: 20.0
                                          })([ WAGS_Control.periodicOsc(WAGS_Common.initialPeriodicOscRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeriodicOscO1(WAGS_Common.periodicOscSpecableVecNum(Data_Typelevel_Num_Sets.posD4)))()()()({
                                              reflectSymbol: function () {
                                                  return "spec";
                                              }
                                          }))(WAGS_Common.convertOptionPeriodicOscO)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))({
                                              frequency: 90.4 * 5.07,
                                              spec: allSpcs.s1
                                          })(Control_Alt.alt(FRP_Event.altEvent)(WAGS_Parameter.bangOn())(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                              var $53 = WAGS_Properties.frequency()(WAGS_Parameter.toAudioParameterAudioNume);
                                              var $54 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (x) {
                                                  return 90.4 * 5.07 + 18.0 * (x - 1.0);
                                              });
                                              return function ($55) {
                                                  return $53(ttap($54($55)));
                                              };
                                          })())(swm))) ]) ]), WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                              var $56 = WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioNume);
                                              var $57 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (x) {
                                                  return Data_Ord.max(Data_Ord.ordNumber)(0.0)(0.2 * (x - 3.0));
                                              });
                                              return function ($58) {
                                                  return $56(ttap($57($58)));
                                              };
                                          })())(swm))([ WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                              reflectSymbol: function () {
                                                  return "q";
                                              }
                                          }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                              frequency: 90.4 * 8.0,
                                              q: 20.0
                                          })([ WAGS_Control.periodicOsc(WAGS_Common.initialPeriodicOscRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeriodicOscO1(WAGS_Common.periodicOscSpecableVecNum(Data_Typelevel_Num_Sets.posD4)))()()()({
                                              reflectSymbol: function () {
                                                  return "spec";
                                              }
                                          }))(WAGS_Common.convertOptionPeriodicOscO)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))({
                                              frequency: 90.4 * 7.13,
                                              spec: allSpcs.s2
                                          })(Control_Alt.alt(FRP_Event.altEvent)(WAGS_Parameter.bangOn())(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                              var $59 = WAGS_Properties.frequency()(WAGS_Parameter.toAudioParameterAudioNume);
                                              var $60 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (x) {
                                                  return 90.4 * 7.13 + 32.0 * (x - 1.0);
                                              });
                                              return function ($61) {
                                                  return $59(ttap($60($61)));
                                              };
                                          })())(swm))) ]) ]), WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                              var $62 = WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioNume);
                                              var $63 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (x) {
                                                  return Data_Ord.max(Data_Ord.ordNumber)(0.0)(0.1 * (x - 7.0));
                                              });
                                              return function ($64) {
                                                  return $62(ttap($63($64)));
                                              };
                                          })())(swm))([ WAGS_Control.periodicOsc(WAGS_Common.initialPeriodicOscRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPeriodicOscO1(WAGS_Common.periodicOscSpecableVecNum(Data_Typelevel_Num_Sets.posD4)))()()()({
                                              reflectSymbol: function () {
                                                  return "spec";
                                              }
                                          }))(WAGS_Common.convertOptionPeriodicOscO)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))({
                                              frequency: 90.4 * 9.14,
                                              spec: allSpcs.s3
                                          })(Control_Alt.alt(FRP_Event.altEvent)(WAGS_Parameter.bangOn())(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                              var $65 = WAGS_Properties.frequency()(WAGS_Parameter.toAudioParameterAudioNume);
                                              var $66 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (x) {
                                                  return 90.4 * 9.14 + 31.0 * (x - 1.0);
                                              });
                                              return function ($67) {
                                                  return $65(ttap($66($67)));
                                              };
                                          })())(swm))) ]) ];
                                      }))();
                                      var r = Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(r$prime)(c0h))(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx));
                                      ccb(Control_Apply.applySecond(Effect.applyEffect)(r)(push.start(Data_Unit.unit)))();
                                      return push.stop(r)();
                                  };
                              }), Data_Functor.mapFlipped(FRP_Event.functorEvent)(event.stop)(function (v2) {
                                  return Control_Apply.applySecond(Effect.applyEffect)(v2)(Control_Apply.applySecond(Effect.applyEffect)(ccb(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(push.start(Data_Unit.unit)));
                              }) ]))([ Deku_Control.text(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ Data_Functor.voidLeft(FRP_Event.functorEvent)(startE)("Turn on"), Data_Functor.voidLeft(FRP_Event.functorEvent)(event.stop)("Turn off") ])) ]) ]);
                          };
                      }))
                  });
              };
          };
      };
  };
  exports["fixEx"] = fixEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Effects"] = $PS["WAGS.Example.Docs.Effects"] || {};
  var exports = $PS["WAGS.Example.Docs.Effects"];
  var Control_Apply = $PS["Control.Apply"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Example_Docs_Effects_FoldEx = $PS["WAGS.Example.Docs.Effects.FoldEx"];
  var WAGS_Example_Docs_FixEx = $PS["WAGS.Example.Docs.FixEx"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];                
  var px = Type_Proxy["Proxy"].value;
  var effects = function (cca$prime) {
      return function (dpage) {
          return function (ssp) {
              return function (ev) {
                  var ccb = WAGS_Example_Docs_Util.ccassp(cca$prime)(ssp);
                  return Deku_Pursx.makePursx({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>State</h1>\x0a\x0a  <h3>Or Events 2.0</h3>\x0a  <p>\x0a    The name of this section is a bit of a nisnomer. While it will address the issue of maintaining state in an audio graph, it's really just about two mechanisms you can use to make an <code>Event</code> stateful. One is called <code>fold</code>, and the other is called <code>fix</code>. Both are part of the <code>IsEvent</code> typeclass, which means you get them for free when working with events.\x0a  </p>\x0a\x0a  ~fold~\x0a  ~fix~\x0a\x0a  <h2>Next steps</h2>\x0a  <p>Using <code>fold</code> and <code>fix</code>, we can create internal state in our Web Audio works that would be really tedious and error-prone to achieve in vanilla JS or other compile-to-JS languages. There's still one nagging issue that we haven't addressed, though. For all of the flexibility we can achieve with events, we still can't flex the audio graph itself, meaning that we can't add or remove components. In the next section, we'll learn how to do that with <a ~next~ style=\"cursor:pointer;\">subgraphs</a>.</p>\x0a</div>";
                      }
                  })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "next";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "fold";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "fix";
                      }
                  }))(px)({
                      next: WAGS_Example_Docs_Util.mkNext(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)(Control_Apply.applySecond(Effect.applyEffect)(dpage(WAGS_Example_Docs_Types.Subgraph.value))(WAGS_Example_Docs_Util.scrollToTop)),
                      fold: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Effects_FoldEx.foldEx(ccb)(dpage)(ssp)(ev)),
                      fix: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_FixEx.fixEx(ccb)(dpage)(ssp)(ev))
                  });
              };
          };
      };
  };
  exports["effects"] = effects;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Events.Ex0"] = $PS["WAGS.Example.Docs.Events.Ex0"] || {};
  var exports = $PS["WAGS.Example.Docs.Events.Ex0"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var $$Math = $PS["Math"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var Init = (function () {
      function Init() {

      };
      Init.value = new Init();
      return Init;
  })();
  var Start = (function () {
      function Start() {

      };
      Start.value = new Start();
      return Start;
  })();
  var Stop = (function () {
      function Stop(value0) {
          this.value0 = value0;
      };
      Stop.create = function (value0) {
          return new Stop(value0);
      };
      return Stop;
  })();
  var txt = "module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Array ((..))\x0aimport Data.Int (toNumber)\x0aimport Data.Profunctor (lcmap)\x0aimport Deku.Attribute (cb, (:=))\x0aimport Deku.Control (text)\x0aimport Deku.DOM as D\x0aimport Deku.Toplevel (runInBody, runInBody1)\x0aimport Effect (Effect)\x0aimport FRP.Event (bus)\x0aimport FRP.Event.Class (bang)\x0aimport Math (pow)\x0aimport WAGS.Control (gain_, gain, sinOsc)\x0aimport WAGS.Parameter (AudioEnvelope(..), AudioOnOff(..), _on, _off)\x0aimport WAGS.Properties (onOff)\x0aimport WAGS.Properties as P\x0aimport WAGS.Run (run2_)\x0a\x0adata UIEvents = Init | Start | Stop (Effect Unit)\x0a\x0a-- an event to turn our oscillators on\x0aoon o = bang $ onOff $ AudioOnOff { x: _on, o }\x0a-- an event to turn our oscillators off\x0aoof o = bang $ onOff $ AudioOnOff { x: _off, o }\x0a-- an event with an envelope for our gain\x0aenv o = bang $ P.gain\x0a  $ AudioEnvelope\x0a      { p: [ 0.0, 0.4, 0.1, 0.05, 0.01, 0.0 ]\x0a      , d: 0.8\x0a      , o\x0a      }\x0a\x0a-- a single cell with four oscillators,\x0a-- each of which have the envelope applied\x0acell = lcmap toNumber \\i -> do\x0a  let\x0a    ooo' x = oon (x + 0.27 * (i * (1.005 `pow` i)))\x0a      <|> oof (x + 3.0 + 0.3 * (i * (1.005 `pow` i)))\x0a    env' x = env (x + 0.3 * (i * (1.005 `pow` i)))\x0a    strand x y =\x0a      gain 0.0 (env' x) [ sinOsc (200.0 + i * y) (ooo' x) ]\x0a  [ strand 0.2 4.0\x0a  , strand 0.3 6.0\x0a  , strand 0.45 14.0\x0a  , strand 0.7 20.0\x0a  ]\x0a\x0amain :: Effect Unit\x0amain = runInBody1 (bus \\push -> lcmap (bang Init <|> _) \\event ->\x0a  D.div_\x0a    [ D.button\x0a        ( event <#>\x0a            \\e -> D.OnClick := cb\x0a              ( const $ case e of\x0a                  Stop u -> u *> push Start\x0a                  _ -> do\x0a                    r <- run2_\x0a                      [ gain_ 1.0\x0a                          -- we create 100 cells\x0a                          $ join\x0a                          $ cell <$> 0 .. 100\x0a                      ]\x0a                    push $ Stop r\x0a              )\x0a        )\x0a        [ text $ event <#> case _ of\x0a            Stop _ -> \"Turn off\"\x0a            _ -> \"Turn on\"\x0a        ]\x0a    ])\x0a";
  var px = Type_Proxy["Proxy"].value;
  var oon = function (dictIsEvent) {
      return function (dictNewtype) {
          return function (o) {
              return FRP_Event_Class.bang(dictIsEvent)(WAGS_Properties.onOff(dictNewtype)(WAGS_Parameter.toAudioOnOffAudioOnOff)({
                  x: WAGS_Parameter["_on"],
                  o: o
              }));
          };
      };
  };
  var oof = function (dictIsEvent) {
      return function (dictNewtype) {
          return function (o) {
              return FRP_Event_Class.bang(dictIsEvent)(WAGS_Properties.onOff(dictNewtype)(WAGS_Parameter.toAudioOnOffAudioOnOff)({
                  x: WAGS_Parameter["_off"],
                  o: o
              }));
          };
      };
  };
  var cell = Data_Profunctor.lcmap(Data_Profunctor.profunctorFn)(Data_Int.toNumber)(function (i) {
      var ooo$prime = function (x) {
          return Control_Alt.alt(FRP_Event.altEvent)(oon(FRP_Event.eventIsEvent)()(x + 0.27 * (i * $$Math.pow(1.005)(i))))(oof(FRP_Event.eventIsEvent)()(x + 3.0 + 0.3 * (i * $$Math.pow(1.005)(i))));
      };
      var genv = function (x) {
          return FRP_Event_Class.bang(FRP_Event.eventIsEvent)(WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioEnve)({
              p: [ 0.0, 0.4, 0.1, 5.0e-2, 1.0e-2, 0.0 ],
              o: x + 0.3 * (i * $$Math.pow(1.005)(i)),
              d: 0.8
          }));
      };
      var strand = function (x) {
          return function (y) {
              return WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(genv(x))([ WAGS_Control.sinOsc(WAGS_Common.initialSinOscNumber)(200.0 + i * y)(ooo$prime(x)) ]);
          };
      };
      return [ strand(0.2)(4.0), strand(0.3)(6.0), strand(0.45)(14.0), strand(0.7)(20.0) ];
  });
  var ex0 = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2>Example 1: Hello events</h2>\x0a\x0a  <p>Let's say hi to events! The simplest of events, which we've seen already, are the ones that occur <span style=\"font-weight:800;\">now</span>, that is to say, immediately upon subscription. You create those types of events using <code>bang</code>. In this section, we'll use <code>bang</code> to set several different types of values:</p>\x0a\x0a  <ul>\x0a    <li><code>AudioEnvelope</code> to create an envelope for the gain node. To construct one, use a record with the following parameters:<ul><li><code>p</code>: a list of numbers that will be interpolated over.</li><li><code>o</code>: the offset in time from the AudioContext clock's start time.</li><li><code>d</code>: the duration of the envelope.</li></ul></li>\x0a    <li><code>AudioOnOff</code> to turn the sine-wave oscillator on and off. To construct one, use a record with the following parameters:<ul><li><code>n</code>: an enum with the value <code>_on</code>, <code>_off</code> or <code>_onOff</code> (more on this in <a href=\"#example3\">Example 3</a> below).</li><li><code>o</code>: the offset in time from the AudioContext clock's start time.</li></ul></li>\x0a  </ul>\x0a\x0a  <p>After that, in the example below, it's functions all the way down. <code>oon</code> and <code>oof</code> create our on/off events, <code>env</code> creates our gain envelope, <code>ooo'</code> and <code>env'</code> specialize these envelopes to a specific point in time, and <code>cell</code> creates a single cell that we deploy 100 times.</p>\x0a\x0a  <p>One important thing to note here is the use of the tie fighter (<code>&lt;|&gt;</code>), aka <code>alt</code>, in the definition of <code>ooo'</code>. The <code>Event</code> type, when <code>alt</code>'d, preserves a before-after relationship of the left and right operands when the operands happen at the same time. This is a bit hackish: the events conceptually happen at the same time, but on our CPU, one has to follow the other. We can use this, however, to make sure that certain events happen in a logical sequence. For example, an <code>off</code> instruction must be issued after an <code>on</code> instruction, which we guarantee by using <code>oon</code> on the left side of the alt. If we did it the other way, the <code>on</code> instruction would be last and we'd wind up with 100 oscillators playing at the same time!</p>\x0a\x0a  <p>A last thing to note before the music plays is how scheduling works here. Even though all the events are issued upfront via <code>bang</code>, they schedule things to be played <i>later</i> in the audio context. We'll see more advanced scheduling techniques in the <a href=\"#example4\"><code>requestAnimationFrame</code> example below</a>.</p>\x0a\x0a  <pre><code>@txt@</code></pre>\x0a\x0a  @ex0@\x0a\x0a  <p>Unlike the previous examples, this one and all subsequent ones are \"batteries included\", meaning they are single-file, self-contained PureScript examples that you can compile and run yourself.</p>\x0a\x0a</section>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "txt";
                  }
              }))({
                  reflectSymbol: function () {
                      return "ex0";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  txt: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_(txt)),
                  ex0: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(function (push) {
                      return Data_Profunctor.lcmap(Data_Profunctor.profunctorFn)(function (v1) {
                          return Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Init.value))(v1);
                      })(function (event) {
                          return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Functor.mapFlipped(FRP_Event.functorEvent)(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Data_Functor.map(FRP_Event.functorEvent)(function (v1) {
                              return v1.value0;
                          })(ev)))(Data_Functor.map(FRP_Event.functorEvent)(Data_Tuple.Tuple.create)(event)))(function (v1) {
                              return Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"]((function () {
                                  if (v1.value0 instanceof Stop) {
                                      return Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(v1.value0.value0)(push(Start.value)))(ccb(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)));
                                  };
                                  return function __do() {
                                      v1.value1();
                                      var r = WAGS_Run.run2_([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)(Control_Bind.join(Control_Bind.bindArray)(Data_Functor.map(Data_Functor.functorArray)(cell)(Data_Array.range(0)(100)))) ])();
                                      ccb(Control_Apply.applySecond(Effect.applyEffect)(r)(push(Start.value)))();
                                      return push(new Stop(r))();
                                  };
                              })())));
                          }))([ Deku_Control.text(Data_Functor.mapFlipped(FRP_Event.functorEvent)(event)(function (v1) {
                              if (v1 instanceof Stop) {
                                  return "Turn off";
                              };
                              return "Turn on";
                          })) ]) ]);
                      });
                  }))
              });
          };
      };
  };
  exports["ex0"] = ex0;
})(PS);
(function(exports) {
  "use strict";

  exports._target = function (e) {
    return e.target;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var target = function ($0) {
      return Data_Nullable.toMaybe($foreign["_target"]($0));
  };
  exports["target"] = target;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.valueAsNumber = function (input) {
    return function () {
      return input.valueAsNumber;
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.HTML.HTMLInputElement"] = $PS["Web.HTML.HTMLInputElement"] || {};
  var exports = $PS["Web.HTML.HTMLInputElement"];
  var $foreign = $PS["Web.HTML.HTMLInputElement"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                                  
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  exports["fromEventTarget"] = fromEventTarget;
  exports["valueAsNumber"] = $foreign.valueAsNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Events.Ex1"] = $PS["WAGS.Example.Docs.Events.Ex1"] || {};
  var exports = $PS["WAGS.Example.Docs.Events.Ex1"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_Max = $PS["Deku.DOM.Attr.Max"];
  var Deku_DOM_Attr_Min = $PS["Deku.DOM.Attr.Min"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Attr_OnInput = $PS["Deku.DOM.Attr.OnInput"];
  var Deku_DOM_Attr_Step = $PS["Deku.DOM.Attr.Step"];
  var Deku_DOM_Attr_Value = $PS["Deku.DOM.Attr.Value"];
  var Deku_DOM_Attr_Xtype = $PS["Deku.DOM.Attr.Xtype"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_DOM_Elt_Input = $PS["Deku.DOM.Elt.Input"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var FRP_Event_VBus = $PS["FRP.Event.VBus"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Math = $PS["WAGS.Math"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];                
  var txt = "module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Foldable (oneOf, oneOfMap, traverse_)\x0aimport Data.Maybe (Maybe(..), maybe)\x0aimport Deku.Attribute (attr, cb, (:=))\x0aimport Deku.Control (blank, plant, switcher, text, text_)\x0aimport Deku.Core (Element)\x0aimport Deku.DOM as D\x0aimport Deku.Toplevel (runInBody)\x0aimport Effect (Effect)\x0aimport Effect.Aff (launchAff_)\x0aimport Effect.Class (liftEffect)\x0aimport FRP.Event (create)\x0aimport FRP.Event.Class (bang, biSampleOn, keepLatest)\x0aimport FRP.Event.VBus (V, vbus)\x0aimport Type.Proxy (Proxy(..))\x0aimport WAGS.Control (loopBuf)\x0aimport WAGS.Interpret (bracketCtx, decodeAudioDataFromUri)\x0aimport WAGS.Math (calcSlope)\x0aimport WAGS.Parameter (bangOn)\x0aimport WAGS.Properties (loopEnd, loopStart, playbackRate)\x0aimport WAGS.Run (run2_)\x0aimport WAGS.WebAPI (BrowserAudioBuffer)\x0aimport Web.Event.Event (target)\x0aimport Web.HTML.HTMLInputElement (fromEventTarget, valueAsNumber)\x0a\x0atype Slider = V (s0 :: Number, s1 :: Number, s2 :: Number)\x0atype StartStop = V (start :: Unit, stop :: Effect Unit)\x0atype UIEvents = V (startStop :: StartStop, slider :: Slider)\x0a\x0aatari =\x0a  \"https://freesound.org/data/previews/100/100981_1234256-lq.mp3\" :: String\x0a\x0amain :: Effect Unit\x0amain = do\x0a  { push, event } <- create\x0a  runInBody (switcher scene event)\x0a  push Nothing\x0a  launchAff_ $ bracketCtx\x0a    \\ctx -> decodeAudioDataFromUri ctx atari >>= liftEffect\x0a      <<< push\x0a      <<< Just\x0a  where\x0a  scene\x0a    :: forall lock payload\x0a     . Maybe BrowserAudioBuffer\x0a    -> Element lock payload\x0a  scene = maybe (D.div_ [ text_ \"Loading...\" ]) \\buffer ->\x0a    D.div_ $ keepLatest $ vbus (Proxy :: _ UIEvents) \\push event -> do\x0a      let\x0a        sl0 = event.slider.s0\x0a        sl1 = event.slider.s1\x0a        sl2 = event.slider.s2\x0a        start = event.startStop.start <|> bang unit\x0a        music = run2_\x0a          [ loopBuf\x0a              { buffer: buffer\x0a              , playbackRate: 2.6\x0a              , loopStart: 0.6\x0a              , loopEnd: 1.1\x0a              }\x0a              $ oneOf\x0a                [ bangOn\x0a                , map\x0a                    (calcSlope 0.0 0.2 100.0 5.0 >>> playbackRate)\x0a                    sl0\x0a                , map\x0a                    (calcSlope 0.0 0.0 100.0 1.2 >>> loopStart)\x0a                    sl1\x0a                , map\x0a                    (calcSlope 0.0 0.05 100.0 1.0 >>> loopEnd)\x0a                    (biSampleOn sl2 (add <$> (bang 0.0 <|> sl1)))\x0a                ]\x0a          ]\x0a      plant $ D.div_\x0a        $\x0a          map\x0a            ( \\{ l, f } -> D.div_\x0a                [ text_ l\x0a                , D.input\x0a                    ( oneOfMap bang\x0a                        [ D.Xtype := \"range\"\x0a                        , D.Min := \"0\"\x0a                        , D.Max := \"100\"\x0a                        , D.Step := \"1\"\x0a                        , D.Value := \"50\"\x0a                        , D.OnInput := cb\x0a                            ( traverse_\x0a                                (valueAsNumber >=> f)\x0a                                <<< (=<<) fromEventTarget\x0a                                <<< target\x0a                            )\x0a                        ]\x0a                    )\x0a                    blank\x0a                ]\x0a            )\x0a            [ { l: \"Playback rate\", f: push.slider.s0 }\x0a            , { l: \"Loop start\", f: push.slider.s1 }\x0a            , { l: \"Loop end\", f: push.slider.s2 }\x0a            ] <>\x0a            [ D.button\x0a                ( oneOfMap (map (attr D.OnClick <<< cb <<< const))\x0a                    [ start $> (music >>= push.startStop.stop)\x0a                    , event.startStop.stop <#>\x0a                        (_ *> push.startStop.start unit)\x0a                    ]\x0a                )\x0a                [ text $ oneOf\x0a                    [ start $> \"Turn on\"\x0a                    , event.startStop.stop $> \"Turn off\"\x0a                    ]\x0a                ]\x0a            ]\x0a";
  var px = Type_Proxy["Proxy"].value;
  var atari = "https://freesound.org/data/previews/100/100981_1234256-lq.mp3";
  var ex1 = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>\x0a <h2>Example 2: Three sliders</h2>\x0a\x0a  <p>In this example, we'll use three sliders to control the playback rate, the start time, and the end time of a looping buffer.</p>\x0a\x0a  <p>There is a fair bit of DOM-related code in this example, so before showing the whole thing, let's isolate the Wags bit.</p>\x0a\x0a  <pre><code>@wagtxt@</code></pre>\x0a\x0a  <p>Note that our loopBuf consumes four events: in addition to the three sliders, there is a <code>bangOn</code> event that turns it on. For the events belonging to range sliders, we use <code>calcSlope</code> to normalize the range to sensible values for these parameters.</p>\x0a\x0a  <p>Because each slider event contains a number, we can compose it with a function from <code>WAGS.Properties</code>, like <code>playbackRate</code> or <code>loopStart</code>, to create an event that controls a Wags parameter. The <code>oneOf</code> directive indicates that the incoming event will be \"one of\" the events in the array. It's also possible to use the tie-fighter, aka <code>alt</code>, to separate each event, but I like the array syntax when possible as tie fighters do, after all, work for the Empire, and who likes the Empire?</p>\x0a\x0a  <p>And below you'll find the full example. It also shows useful patterns like downloading audio files and filtering events.</p>\x0a\x0a  <pre><code>@txt@</code></pre>\x0a\x0a  @ex1@\x0a\x0a</section>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "wagtxt";
                  }
              }))({
                  reflectSymbol: function () {
                      return "txt";
                  }
              }))({
                  reflectSymbol: function () {
                      return "ex1";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  wagtxt: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_("run2_\x0a  $ loopBuf\x0a      { buffer: buffer\x0a      , playbackRate: 2.6\x0a      , loopStart: 0.6\x0a      , loopEnd: 1.1\x0a      }\x0a  $ oneOf\x0a      [ bangOn\x0a      , (calcSlope 0.0 0.2 100.0 5.0 >>> playbackRate) <$> sl0\x0a      , (calcSlope 0.0 0.0 100.0 1.2 >>> loopStart) <$> sl1\x0a      , (calcSlope 0.0 0.05 100.0 1.0 >>> loopEnd) <$> biSampleOn sl2\x0a          (add <$> (bang 0.0 <|> sl1))\x0a      ]")),
                  txt: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_(txt)),
                  ex1: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event_VBus.vbus()(FRP_Event_VBus.vbusCons1({
                      reflectSymbol: function () {
                          return "slider";
                      }
                  })()()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "s0";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "s1";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "s2";
                      }
                  })()()(FRP_Event_VBus.vbusNil)()()()())()()()())()()()())(FRP_Event_VBus.vbusCons1({
                      reflectSymbol: function () {
                          return "startStop";
                      }
                  })()()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "loading";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "start";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "stop";
                      }
                  })()()(FRP_Event_VBus.vbusNil)()()()())()()()())()()()())(FRP_Event_VBus.vbusNil)()()()())()()()())(Type_Proxy["Proxy"].value)(function (push) {
                      return function (event) {
                          var start = Control_Alt.alt(FRP_Event.altEvent)(event.startStop.start)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Data_Unit.unit));
                          var music = function (buffer) {
                              return WAGS_Control.loopBuf(WAGS_Common.initialLoopBufRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionLoopBufOptio4)()()()({
                                  reflectSymbol: function () {
                                      return "playbackRate";
                                  }
                              }))(WAGS_Common.convertOptionLoopBufOptio2)()()()({
                                  reflectSymbol: function () {
                                      return "loopStart";
                                  }
                              }))(WAGS_Common.convertOptionLoopBufOptio1)()()()({
                                  reflectSymbol: function () {
                                      return "loopEnd";
                                  }
                              }))(WAGS_Common.convertOptionLoopBufOptio)()()()({
                                  reflectSymbol: function () {
                                      return "buffer";
                                  }
                              })))(ConvertableOptions.defaultsRecord()())))({
                                  buffer: buffer,
                                  playbackRate: 2.6,
                                  loopStart: 0.6,
                                  loopEnd: 1.1
                              })(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ WAGS_Parameter.bangOn(), Data_Functor.map(FRP_Event.functorEvent)((function () {
                                  var $9 = WAGS_Properties.playbackRate()(WAGS_Parameter.toAudioParameterNumber);
                                  var $10 = WAGS_Math.calcSlope(0.0)(0.2)(100.0)(5.0);
                                  return function ($11) {
                                      return $9($10($11));
                                  };
                              })())(event.slider.s0), Data_Functor.map(FRP_Event.functorEvent)((function () {
                                  var $12 = WAGS_Properties.loopStart();
                                  var $13 = WAGS_Math.calcSlope(0.0)(0.0)(100.0)(1.2);
                                  return function ($14) {
                                      return $12($13($14));
                                  };
                              })())(event.slider.s1), Data_Functor.map(FRP_Event.functorEvent)((function () {
                                  var $15 = WAGS_Properties.loopEnd();
                                  var $16 = WAGS_Math.calcSlope(0.0)(5.0e-2)(100.0)(1.0);
                                  return function ($17) {
                                      return $15($16($17));
                                  };
                              })())(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(event.slider.s2)(Data_Functor.map(FRP_Event.functorEvent)(Data_Semiring.add(Data_Semiring.semiringNumber))(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(0.0))(event.slider.s1)))) ]));
                          };
                          return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                              return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_Control.text_(v1.l), Deku_DOM_Elt_Input.input(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent))([ Deku_Attribute.attr(Deku_DOM_Attr_Xtype.attrInput_XtypeString)(Deku_DOM_Attr_Xtype.Xtype.value)("range"), Deku_Attribute.attr(Deku_DOM_Attr_Min.attrInput_MinString)(Deku_DOM_Attr_Min.Min.value)("0"), Deku_Attribute.attr(Deku_DOM_Attr_Max.attrInput_MaxString)(Deku_DOM_Attr_Max.Max.value)("100"), Deku_Attribute.attr(Deku_DOM_Attr_Step.attrInput_StepString)(Deku_DOM_Attr_Step.Step.value)("1"), Deku_Attribute.attr(Deku_DOM_Attr_Value.attrInput_ValueString)(Deku_DOM_Attr_Value.Value.value)("50"), Deku_Attribute.attr(Deku_DOM_Attr_OnInput.attrOnInputCb)(Deku_DOM_Attr_OnInput.OnInput.value)(Deku_Attribute.cb((function () {
                                  var $18 = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Control_Bind.composeKleisli(Effect.bindEffect)(Web_HTML_HTMLInputElement.valueAsNumber)(v1.f));
                                  var $19 = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLInputElement.fromEventTarget);
                                  return function ($20) {
                                      return $18($19(Web_Event_Event.target($20)));
                                  };
                              })())) ]))(Deku_Control.blank) ]);
                          })([ {
                              l: "Playback rate",
                              f: push.slider.s0
                          }, {
                              l: "Loop start",
                              f: push.slider.s1
                          }, {
                              l: "Loop end",
                              f: push.slider.s2
                          } ]))([ Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                              var $21 = Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value);
                              return function ($22) {
                                  return $21(Deku_Attribute.cb(Data_Function["const"]($22)));
                              };
                          })()))([ Data_Functor.voidLeft(FRP_Event.functorEvent)(event.startStop.loading)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)), Data_Functor.mapFlipped(FRP_Event.functorEvent)(event.startStop.stop)(function (v1) {
                              return Control_Apply.applySecond(Effect.applyEffect)(v1)(Control_Apply.applySecond(Effect.applyEffect)(ccb(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(push.startStop.start(Data_Unit.unit)));
                          }), Data_Functor.mapFlipped(FRP_Event.functorEvent)(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Data_Functor.map(FRP_Event.functorEvent)(function (v1) {
                              return v1.value0;
                          })(ev)))(Data_Functor.voidLeft(FRP_Event.functorEvent)(start)(Control_Category.identity(Control_Category.categoryFn))))(function (cncl) {
                              return function __do() {
                                  cncl();
                                  push.startStop.loading(Data_Unit.unit)();
                                  var fib = Effect_Aff.launchAff(Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.context(Effect_Aff.monadEffectAff))(function (ctx) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.constant0Hack(Effect_Aff.monadEffectAff)(ctx))(function (c0h) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)(atari))(function (buffer) {
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                  var res$prime = WAGS_Run.run2(ctx)([ music(buffer) ])();
                                                  var res = Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(res$prime)(c0h))(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx));
                                                  push.startStop.stop(res)();
                                                  return res;
                                              });
                                          });
                                      });
                                  }))();
                                  ccb(function __do() {
                                      push.startStop.start(Data_Unit.unit)();
                                      return Effect_Aff.launchAff_(WAGS_Example_Docs_Util.raceSelf(fib))();
                                  })();
                                  return Data_Unit.unit;
                              };
                          }) ]))([ Deku_Control.text(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"]("Turn off"))(event.startStop.stop), Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"]("Turn on"))(start) ])) ]) ]));
                      };
                  }))
              });
          };
      };
  };
  exports["ex1"] = ex1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Events.Ex2"] = $PS["WAGS.Example.Docs.Events.Ex2"] || {};
  var exports = $PS["WAGS.Example.Docs.Events.Ex2"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_Max = $PS["Deku.DOM.Attr.Max"];
  var Deku_DOM_Attr_Min = $PS["Deku.DOM.Attr.Min"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Attr_OnInput = $PS["Deku.DOM.Attr.OnInput"];
  var Deku_DOM_Attr_Step = $PS["Deku.DOM.Attr.Step"];
  var Deku_DOM_Attr_Value = $PS["Deku.DOM.Attr.Value"];
  var Deku_DOM_Attr_Xtype = $PS["Deku.DOM.Attr.Xtype"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_DOM_Elt_Input = $PS["Deku.DOM.Elt.Input"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var FRP_Event_VBus = $PS["FRP.Event.VBus"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Clock = $PS["WAGS.Clock"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Math = $PS["WAGS.Math"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];                
  var txt = "module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Foldable (oneOf, oneOfMap, traverse_)\x0aimport Data.Tuple (Tuple(..), fst, snd)\x0aimport Deku.Attribute (attr, cb, (:=))\x0aimport Deku.Control (blank, text, text_)\x0aimport Deku.DOM as D\x0aimport Deku.Toplevel (runInBody1)\x0aimport Effect (Effect)\x0aimport Effect.Random as Random\x0aimport FRP.Behavior (Behavior, behavior, sampleBy)\x0aimport FRP.Event (Event, makeEvent, memoize, subscribe)\x0aimport FRP.Event.Class (bang)\x0aimport FRP.Event.VBus (V, vbus)\x0aimport Type.Proxy (Proxy(..))\x0aimport WAGS.Clock (interval)\x0aimport WAGS.Control (bandpass_, fan1, gain, gain_, highpass_, triangleOsc)\x0aimport WAGS.Core (Node, mix)\x0aimport WAGS.Interpret (close, context)\x0aimport WAGS.Math (calcSlope)\x0aimport WAGS.Parameter (AudioEnvelope(..), bangOn)\x0aimport WAGS.Properties (frequency)\x0aimport WAGS.Properties as P\x0aimport WAGS.Run (run2e)\x0aimport Web.Event.Event (target)\x0aimport Web.HTML.HTMLInputElement (fromEventTarget, valueAsNumber)\x0a\x0atype StartStop = V (start :: Unit, stop :: Effect Unit)\x0a\x0atype UIEvents = V\x0a  ( startStop :: StartStop\x0a  , slider :: Number\x0a  )\x0a\x0arandom :: Behavior Number\x0arandom = behavior \\e ->\x0a  makeEvent \\k -> subscribe e \\f ->\x0a    Random.random >>= k <<< f\x0a\x0a-- pentatonic scale\x0acp :: Number -> Number\x0acp n\x0a  | n < 0.142857 = 261.625565\x0a  | n < 0.285714 = 293.664768\x0a  | n < 0.428571 = 349.228231\x0a  | n < 0.571429 = 391.995436\x0a  | n < 0.714286 = 440.000000\x0a  | n < 0.857143 = 523.251131\x0a  | otherwise = 587.329536\x0a\x0amain :: Effect Unit\x0amain = runInBody1\x0a  ( vbus (Proxy :: _ UIEvents) \\push event -> do\x0a      let\x0a        start = event.startStop.start <|> bang unit\x0a        music :: forall lock. _ -> Event (Array (Node _ lock _))\x0a        music evt' = memoize evt' \\evt -> do\x0a          let\x0a            pitch = map fst evt\x0a            -- to avoid artifacts in the pitch change\x0a            time = map (add 0.01 <<< snd) evt\x0a            e0 =\x0a              AudioEnvelope <<<\x0a                { p: [ 0.0, 0.6, 0.2, 0.1, 0.5, 0.03, 0.0 ]\x0a                , d: 0.4\x0a                , o: _\x0a                } <$> time\x0a            e1 =\x0a              AudioEnvelope <<<\x0a                { p: [ 0.0, 0.3, 0.1, 0.05, 0.01, 0.005, 0.0 ]\x0a                , d: 0.4\x0a                , o: _\x0a                } <$> time\x0a            e2 =\x0a              AudioEnvelope <<<\x0a                { p: [ 0.0, 0.15, 0.05, 0.01, 0.005, 0.0005, 0.0 ]\x0a                , d: 0.4\x0a                , o: _\x0a                } <$> time\x0a            f0 = bangOn <|> frequency <<< cp <$> pitch\x0a          [ fan1 (triangleOsc 0.0 f0) \\ipt _ -> do\x0a              mix $ gain_ 2.0\x0a                [ gain 0.0 (P.gain <$> e0)\x0a                    [ bandpass_\x0a                        { frequency: 1000.0\x0a                        , q: 20.0\x0a                        }\x0a                        [ ipt ]\x0a                    ]\x0a                , gain 0.0 (P.gain <$> e1)\x0a                    [ bandpass_\x0a                        { frequency: 2000.0\x0a                        , q: 20.0\x0a                        }\x0a                        [ ipt ]\x0a                    ]\x0a                , gain 0.0 (P.gain <$> e2)\x0a                    [ highpass_\x0a                        { frequency: 4000.0\x0a                        , q: 20.0\x0a                        }\x0a                        [ ipt ]\x0a                    ]\x0a                ]\x0a          ]\x0a      D.div_\x0a        [ D.div_\x0a            [ text_ \"tempo\"\x0a            , D.input\x0a                ( oneOfMap bang\x0a                    [ D.Xtype := \"range\"\x0a                    , D.Min := \"0\"\x0a                    , D.Max := \"100\"\x0a                    , D.Step := \"1\"\x0a                    , D.Value := \"50\"\x0a                    , D.OnInput := cb\x0a                        ( traverse_\x0a                            (valueAsNumber >=> push.slider)\x0a                            <<< (=<<) fromEventTarget\x0a                            <<< target\x0a                        )\x0a                    ]\x0a                )\x0a                blank\x0a            ]\x0a        , D.button\x0a            ( oneOfMap (map (attr D.OnClick <<< cb <<< const))\x0a                [ start $> do\x0a                    ctx <- context\x0a                    let\x0a                      myIvl = sampleBy Tuple random\x0a                        $ interval ctx 0.91\x0a                        $ map (calcSlope 0.0 0.42 100.0 1.4)\x0a                        $ event.slider\x0a                    r <- run2e ctx (music myIvl)\x0a                    push.startStop.stop (r *> close ctx)\x0a                , event.startStop.stop <#>\x0a                    (_ *> push.startStop.start unit)\x0a                ]\x0a            )\x0a            [ text $ oneOf\x0a                [ start $> \"Turn on\"\x0a                , event.startStop.stop $> \"Turn off\"\x0a                ]\x0a            ]\x0a        ]\x0a  )";
  var random = FRP_Behavior.behavior(function (e) {
      return FRP_Event.makeEvent(function (k) {
          return FRP_Event.subscribe(e)(function (f) {
              return function __do() {
                  var $10 = Effect_Random.random();
                  return k(f($10))();
              };
          });
      });
  });
  var px = Type_Proxy["Proxy"].value;
  var cp = function (n) {
      if (n < 0.142857) {
          return 261.625565;
      };
      if (n < 0.285714) {
          return 293.664768;
      };
      if (n < 0.428571) {
          return 349.228231;
      };
      if (n < 0.571429) {
          return 391.995436;
      };
      if (n < 0.714286) {
          return 440.0;
      };
      if (n < 0.857143) {
          return 523.251131;
      };
      if (Data_Boolean.otherwise) {
          return 587.329536;
      };
      throw new Error("Failed pattern match at WAGS.Example.Docs.Events.Ex2 (line 225, column 1 - line 225, column 23): " + [ n.constructor.name ]);
  };
  var ex2 = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2>Example 3: Fascinating rhyhtm</h2>\x0a\x0a  <p>Wags comes with several different ways to hook into the Web Audio API's sample-accurate timers. In this section, we'll use a Wags <code>interval</code> event to create a sample-accurate ticker. We'll also use a <code>random</code> beahvior to change up our samples.</p>\x0a\x0a  <p><code>interval :: AudioContext -> Event Number -> Event Number</code> in wags is similar to <a href=\"\"><code>interval :: Int -> Event Instant</code></a> from the <code>Event</code> library with a few important exceptions.</p>\x0a\x0a  <ul>\x0a    <li>The wags interval works in seconds (<code>Number</code>) instead of milliseconds.</li>\x0a    <li>The wags interval needs an audio context to work.</li>\x0a    <li>The wags interval gets its timing from an <code>Event Number</code> instead of a plain old <code>Number</code>. This is necessary to have variable rates.</li>\x0a  </ul>\x0a\x0a  <blockquote><code>interval</code> works fine for a stream of events where each event is separated by more than ~100 milliseconds. For anything faster, you'll likely want to use <code>requestAnimationLoop</code> coupled with a local state, as it will be more efficient for older and battery-sensitive devices.</blockquote>\x0a\x0a  <p>In the following example, we use <code>interval</code> to control the playback rate of an analogue synth. We'll also use a custom behavior called <code>random</code> to control the pitch.</p>\x0a\x0a  <p>One important optimization we make here is the use of the function <code>memoize</code>. Whenever we're dealing with audio-clock timing, we want to limit the number of subscriptions to receive events from the audio clock. Ideally, there is only one subscription that takes a reading of the clock as a single source of truth. Because we are in PureScript-land, events (like everything else), are referrentially transparent, meaning that new ones will get created every time you use them (just like a new <code>2</code> is created every time you type the value <code>2</code>: they don't all refer to one uber-<code>2</code>). To sync all the events to the <i>same</i> source, we use <code>memoize</code>. While this optimization is not necessary, I recommend it: it will make sure the timing is 100% accurate at a very small energy cost (meaning <code>memoize</code> will eat up slightly more power from a phone's battery, but still not much).</p>\x0a\x0a  <pre><code>@txt@</code></pre>\x0a\x0a  @ex2@\x0a\x0a</section>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "txt";
                  }
              }))({
                  reflectSymbol: function () {
                      return "ex2";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  txt: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_(txt)),
                  ex2: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event_VBus.vbus()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "slider";
                      }
                  })()()(FRP_Event_VBus.vbusCons1({
                      reflectSymbol: function () {
                          return "startStop";
                      }
                  })()()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "start";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "stop";
                      }
                  })()()(FRP_Event_VBus.vbusNil)()()()())()()()())(FRP_Event_VBus.vbusNil)()()()())()()()())(Type_Proxy["Proxy"].value)(function (push) {
                      return function (event) {
                          var start = Control_Alt.alt(FRP_Event.altEvent)(event.startStop.start)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Data_Unit.unit));
                          var music = function (evt$prime) {
                              return FRP_Event.memoize(evt$prime)(function (evt) {
                                  var time = Data_Functor.map(FRP_Event.functorEvent)((function () {
                                      var $11 = Data_Semiring.add(Data_Semiring.semiringNumber)(1.0e-2);
                                      return function ($12) {
                                          return $11(Data_Tuple.snd($12));
                                      };
                                  })())(evt);
                                  var pitch = Data_Functor.map(FRP_Event.functorEvent)(Data_Tuple.fst)(evt);
                                  var f0 = Control_Alt.alt(FRP_Event.altEvent)(WAGS_Parameter.bangOn())(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                      var $13 = WAGS_Properties.frequency()(WAGS_Parameter.toAudioParameterNumber);
                                      return function ($14) {
                                          return $13(cp($14));
                                      };
                                  })())(pitch));
                                  var e2 = Data_Functor.map(FRP_Event.functorEvent)(function ($15) {
                                      return WAGS_Parameter.AudioEnvelope((function (v1) {
                                          return {
                                              p: [ 0.0, 0.15, 5.0e-2, 1.0e-2, 5.0e-3, 5.0e-4, 0.0 ],
                                              d: 0.4,
                                              o: v1
                                          };
                                      })($15));
                                  })(time);
                                  var e1 = Data_Functor.map(FRP_Event.functorEvent)(function ($16) {
                                      return WAGS_Parameter.AudioEnvelope((function (v1) {
                                          return {
                                              p: [ 0.0, 0.3, 0.1, 5.0e-2, 1.0e-2, 5.0e-3, 0.0 ],
                                              d: 0.4,
                                              o: v1
                                          };
                                      })($16));
                                  })(time);
                                  var e0 = Data_Functor.map(FRP_Event.functorEvent)(function ($17) {
                                      return WAGS_Parameter.AudioEnvelope((function (v1) {
                                          return {
                                              p: [ 0.0, 0.6, 0.2, 0.1, 0.5, 3.0e-2, 0.0 ],
                                              d: 0.4,
                                              o: v1
                                          };
                                      })($17));
                                  })(time);
                                  return [ WAGS_Control.fan1(WAGS_Control.triangleOsc(WAGS_Common.initialTriangleOscNumber)(0.0)(f0))(function (ipt) {
                                      return function (v1) {
                                          return WAGS_Core.mix(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(2.0)([ WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(Data_Functor.map(FRP_Event.functorEvent)(WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioEnve))(e0))([ WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                              reflectSymbol: function () {
                                                  return "q";
                                              }
                                          }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                              frequency: 1000.0,
                                              q: 20.0
                                          })([ ipt ]) ]), WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(Data_Functor.map(FRP_Event.functorEvent)(WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioEnve))(e1))([ WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                              reflectSymbol: function () {
                                                  return "q";
                                              }
                                          }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                              frequency: 2000.0,
                                              q: 20.0
                                          })([ ipt ]) ]), WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.0)(Data_Functor.map(FRP_Event.functorEvent)(WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioEnve))(e2))([ WAGS_Control.highpass_(WAGS_Common.initialHighpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionHighpassOpti)()()()({
                                              reflectSymbol: function () {
                                                  return "q";
                                              }
                                          }))(WAGS_Common.convertOptionHighpassOpti1)()()()({
                                              reflectSymbol: function () {
                                                  return "frequency";
                                              }
                                          })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                              frequency: 4000.0,
                                              q: 20.0
                                          })([ ipt ]) ]) ]));
                                      };
                                  }) ];
                              });
                          };
                          return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_Control.text_("tempo"), Deku_DOM_Elt_Input.input(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent))([ Deku_Attribute.attr(Deku_DOM_Attr_Xtype.attrInput_XtypeString)(Deku_DOM_Attr_Xtype.Xtype.value)("range"), Deku_Attribute.attr(Deku_DOM_Attr_Min.attrInput_MinString)(Deku_DOM_Attr_Min.Min.value)("0"), Deku_Attribute.attr(Deku_DOM_Attr_Max.attrInput_MaxString)(Deku_DOM_Attr_Max.Max.value)("100"), Deku_Attribute.attr(Deku_DOM_Attr_Step.attrInput_StepString)(Deku_DOM_Attr_Step.Step.value)("1"), Deku_Attribute.attr(Deku_DOM_Attr_Value.attrInput_ValueString)(Deku_DOM_Attr_Value.Value.value)("50"), Deku_Attribute.attr(Deku_DOM_Attr_OnInput.attrOnInputCb)(Deku_DOM_Attr_OnInput.OnInput.value)(Deku_Attribute.cb((function () {
                              var $18 = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Control_Bind.composeKleisli(Effect.bindEffect)(Web_HTML_HTMLInputElement.valueAsNumber)(push.slider));
                              var $19 = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLInputElement.fromEventTarget);
                              return function ($20) {
                                  return $18($19(Web_Event_Event.target($20)));
                              };
                          })())) ]))(Deku_Control.blank) ]), Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                              var $21 = Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value);
                              return function ($22) {
                                  return $21(Deku_Attribute.cb(Data_Function["const"]($22)));
                              };
                          })()))([ Data_Functor.mapFlipped(FRP_Event.functorEvent)(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Data_Functor.map(FRP_Event.functorEvent)(function (v1) {
                              return v1.value0;
                          })(ev)))(Data_Functor.voidLeft(FRP_Event.functorEvent)(start)(Control_Category.identity(Control_Category.categoryFn))))(function (cncl) {
                              return function __do() {
                                  cncl();
                                  var ctx = WAGS_Interpret.context(Effect_Class.monadEffectEffect)();
                                  var myIvl = FRP_Behavior.sampleBy(FRP_Event.eventIsEvent)(Data_Tuple.Tuple.create)(random)(WAGS_Clock.interval(ctx)(0.91)(Data_Functor.map(FRP_Event.functorEvent)(WAGS_Math.calcSlope(0.0)(0.42)(100.0)(1.4))(event.slider)));
                                  var r$prime = WAGS_Run.run2e(ctx)(music(myIvl))();
                                  var r = Control_Apply.applySecond(Effect.applyEffect)(r$prime)(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx));
                                  ccb(Control_Apply.applySecond(Effect.applyEffect)(r)(push.startStop.start(Data_Unit.unit)))();
                                  return push.startStop.stop(Control_Apply.applySecond(Effect.applyEffect)(r)(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx)))();
                              };
                          }), Data_Functor.mapFlipped(FRP_Event.functorEvent)(event.startStop.stop)(function (v1) {
                              return Control_Apply.applySecond(Effect.applyEffect)(v1)(Control_Apply.applySecond(Effect.applyEffect)(ccb(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(push.startStop.start(Data_Unit.unit)));
                          }) ]))([ Deku_Control.text(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ Data_Functor.voidLeft(FRP_Event.functorEvent)(start)("Turn on"), Data_Functor.voidLeft(FRP_Event.functorEvent)(event.startStop.stop)("Turn off") ])) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["ex2"] = ex2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Events.Flavors"] = $PS["WAGS.Example.Docs.Events.Flavors"] || {};
  var exports = $PS["WAGS.Example.Docs.Events.Flavors"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var flavors = Deku_Pursx["makePursx'"]({
      reflectSymbol: function () {
          return "<section>\x0a  <h2>Three flavors of events.</h2>\x0a\x0a  <p>When we're in the browser, events tend to come in three broad categories:</p>\x0a\x0a  <ul>\x0a    <li>Things that need to happen <span style=\"font-weight: 800;\">now</span>.</li>\x0a    <li>Things that happen as the result of a user interaction.</li>\x0a    <li>Things that are scheduled to happen in the future, for example with <code>setTimeout</code>.</li>\x0a  </ul>\x0a\x0a  <p>The next three examples cover all three cases.</p>\x0a\x0a</section>";
      }
  })({
      reflectSymbol: function () {
          return "@";
      }
  })()()(Deku_Pursx.pursxToElementNil)(Type_Proxy["Proxy"].value)(px)({});
  exports["flavors"] = flavors;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Events.InWags"] = $PS["WAGS.Example.Docs.Events.InWags"] || {};
  var exports = $PS["WAGS.Example.Docs.Events.InWags"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var inWags = Deku_Pursx["makePursx'"]({
      reflectSymbol: function () {
          return "<section>\x0a  <h2>Events in Wags</h2>\x0a  <p>Wags follows a consistent pattern: every audio unit accepts an event containing a <code>newtype</code> around a <code>Variant</code> of parameters that can be changed. As a motivating example, let's look at the definition of <code>sinOsc</code>.</p>\x0a\x0a  <pre><code>sinOsc\x0a  :: forall i outputChannels event payload\x0a   . IsEvent event\x0a  => Common.InitialSinOsc i\x0a  => i\x0a  -> event C.SinOsc\x0a  -> C.Node outputChannels \"\" C.G_ event payload</code></pre>\x0a\x0a  <p>In that defintion, <code>SinOsc</code> is a <code>newtype</code> that is defined as such:</p>\x0a\x0a  <pre><code>newtype SinOsc = SinOsc\x0a  (Variant (frequency :: AudioParameter, onOff :: AudioOnOff))</code></pre>\x0a\x0a  <p>Informally, the <code>sinOsc</code> function listens to an event that contains one of several possible instructions, including changing the frequency and turning the oscillator on or off. Let's see a few more examples:</p>\x0a\x0a    <table>\x0a    <tr>\x0a      <th>Audio Unit</th>\x0a      <th>Newtype name</th>\x0a      <th>Variant</th>\x0a    </tr>\x0a    <tr>\x0a      <td><code>delay</code></td>\x0a      <td><code>Delay</code></td>\x0a      <td><code>Variant (delayTime :: AudioParameter)</code></td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>highshelf</code></td>\x0a      <td><code>Highshelf</code></td>\x0a      <td><code>Variant (frequency :: AudioParameter, gain :: AudioParameter)</code></td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>playBuf</code></td>\x0a      <td><code>PlayBuf</code></td>\x0a      <td><code>Variant (playbackRate :: AudioParameter, buffer :: BrowserAudioBuffer, duration :: Maybe Number, bufferOffset :: Number, onOff :: AudioOnOff)</code></td>\x0a    </tr>\x0a  </table>\x0a\x0a  <p>In practice, you'll never need to use newtypes presented above. The <code>WAGS.Properties</code> module has highly-overloaded smart constructors for all these values. For example, to use an <code>Event Number</code> to set the frequency of a <code>sinOsc</code>, you'd write <code>frequency &lt;$&gt; event</code> instead of <code>SinOsc &lt;&lt;&lt; inj (Proxy :: _ \"frequency\") &lt;&lt;&lt; AudioParameter &lt;&lt;&lt; { o: 0.0, t: _linearRamp, n: _ } &lt;$&gt; event</code>. Of course, you <i>can</i> write the longer format, but life is short and keystrokes are precious! Below is a table showing the varoius smart constructors available and the units to which they apply.</p>\x0a\x0a\x0a    <table>\x0a    <tr>\x0a      <th>Constructor</th>\x0a      <th>Type</th>\x0a      <th>Receptive Audio Units</th>\x0a    </tr>\x0a    <tr>\x0a      <td><code>bufferOffset</code></td>\x0a      <td><code>Number</code></td>\x0a      <td><ul><li><code>playBuf</code></li></ul></td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>delayTime</code></td>\x0a      <td><code>AudioParameter</code></td>\x0a      <td><ul><li><code>delay</code></li></ul></td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>duration</code></td>\x0a      <td><code>Maybe Number</code></td>\x0a      <td><ul><li><code>playBuf</code></li></ul></td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>frequency</code></td>\x0a      <td><code>AudioParameter</code></td>\x0a      <td>\x0a        <ul>\x0a          <li><code>allpass</code></li>\x0a          <li><code>bandpass</code></li>\x0a          <li><code>highpass</code></li>\x0a          <li><code>highshelf</code></li>\x0a          <li><code>lowpass</code></li>\x0a          <li><code>lowshelf</code></li>\x0a          <li><code>notch</code></li>\x0a          <li><code>peaking</code></li>\x0a          <li><code>periodicOsc</code></li>\x0a          <li><code>sawtoothOsc</code></li>\x0a          <li><code>sineOsc</code></li>\x0a          <li><code>squareOsc</code></li>\x0a          <li><code>triangleOsc</code></li>\x0a        </ul>\x0a      </td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>gain</code></td>\x0a      <td><code>AudioParameter</code></td>\x0a      <td>\x0a        <ul>\x0a          <li><code>gain</code></li>\x0a          <li><code>highshelf</code></li>\x0a          <li><code>lowshelf</code></li>\x0a          <li><code>peaking</code></li>\x0a        </ul>\x0a      </td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>loopEnd</code></td>\x0a      <td><code>Number</code></td>\x0a      <td><ul><li><code>loopBuf</code></li></ul></td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>loopStart</code></td>\x0a      <td><code>Number</code></td>\x0a      <td><ul><li><code>loopBuf</code></li></ul></td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>offset</code></td>\x0a      <td><code>AudioParameter</code></td>\x0a      <td>\x0a        <ul>\x0a          <li><code>constant</code></li>\x0a        </ul>\x0a      </td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>onOff</code></td>\x0a      <td><code>AudioOnOff</code></td>\x0a      <td>\x0a        <ul>\x0a          <li><code>constant</code></li>\x0a          <li><code>loopBuf</code></li>\x0a          <li><code>periodicOsc</code></li>\x0a          <li><code>playBuf</code></li>\x0a          <li><code>sawtoothOsc</code></li>\x0a          <li><code>sineOsc</code></li>\x0a          <li><code>squareOsc</code></li>\x0a          <li><code>triangleOsc</code></li>\x0a        </ul>\x0a      </td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>playbackRate</code></td>\x0a      <td><code>AudioParameter</code></td>\x0a      <td><ul><li><code>loopBuf</code></li><li>playBuf</li></ul></td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>q</code></td>\x0a      <td><code>AudioParameter</code></td>\x0a      <td>\x0a        <ul>\x0a          <li><code>allpass</code></li>\x0a          <li><code>bandpass</code></li>\x0a          <li><code>highpass</code></li>\x0a          <li><code>lowpass</code></li>\x0a          <li><code>notch</code></li>\x0a          <li><code>peaking</code></li>\x0a        </ul>\x0a      </td>\x0a    </tr>\x0a  </table>\x0a\x0a  <p>You can use this smart-constructor pattern to transform any <code>Event</code> into something that Wags can consume. For example:</p>\x0a\x0a  <ul>\x0a    <li>If you have an <code>Event Number</code> called <code>myFreq</code> and you'd like it to control the frequency of a band-pass filter, you can write <code>bandpass 440.0 (frequency &lt;$&gt; myFreq)</code>.</li>\x0a    <li>If you have an <code>Event Number</code> called <code>myQ</code> and you'd like it to control the Q value of the same bandpass, you can write <code>bandpass 440.0 (frequency &lt;$&gt; myFreq &lt;|&gt; q &lt;$&gt; myQ)</code> <i>or</i> <code>bandpass 440.0 $ oneOf [frequency &lt;$&gt; myFreq, q &lt;$&gt; myQ]</code>.</li>\x0a    <li>If you'd like <code>myFreq</code> <i>only</i> to have an effect when it's over <code>1000.0</code>, you can write <code>bandpass 440.0 (frequency &lt;$&gt; filter (_ > 1000.0) myFreq &lt;|&gt; q &lt;$&gt; myQ)</code>.</li>\x0a  </ul>\x0a\x0a  <p>None of these transformations are unique to Wags:</p>\x0a  <ul>\x0a    <li>Because <code>Event</code> implements <a href=\"\"><code>Functor</code></a>, you can use <code>map</code> (aka <code>&lt;$&gt;</code> above).</li>\x0a    <li>Because <code>Event</code> implements <a href=\"\"><code>Alt</code></a>, you can use <code>alt</code> (aka <code>&lt;|&gt;</code> above).</li>\x0a    <li>Because <code>Event</code> implements <a href=\"\"><code>Plus</code></a>, you can use <code>empty</code> for an event that emits nothing as well as <code>oneOf</code>.</li>\x0a    <li>Because <code>Event</code> implements <a href=\"\"><code>Filterable</code></a>, you can use <code>filter</code>, <code>filterMap</code>, <code>partition</code>, <code>partitionMap</code>, and <code>compact</code>.</li>\x0a    <li>Because <code>Event</code> implements <a href=\"\"><code>IsEvent</code></a>, you can use <code>bang</code> to emit something right away, <code>sampleOn</code> to sample one event's most recent value based on another event, and all of the other functions rolled into <a href=\"\"><code>IsEvent</code></a>.</li>\x0a  </ul>\x0a\x0a  <p>\x0a    This gets to one of the core design principles of Wags. Idiomatic Wags projects use functional reactive programming as a way to \"steer\" web audio, and Wags aims to be a minimal viable framework to shepherd events to their web-audio destinations.\x0a  </p>\x0a</section>";
      }
  })({
      reflectSymbol: function () {
          return "@";
      }
  })()()(Deku_Pursx.pursxToElementNil)(Type_Proxy["Proxy"].value)(px)({});
  exports["inWags"] = inWags;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Events.Primer"] = $PS["WAGS.Example.Docs.Events.Primer"] || {};
  var exports = $PS["WAGS.Example.Docs.Events.Primer"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var primer = Deku_Pursx["makePursx'"]({
      reflectSymbol: function () {
          return "<section>\x0a\x0a  <h2>Events, a primer</h2>\x0a\x0a  <p>The <code>Event</code> and <code>Behavior</code> types in PureScript are defined as such:</p>\x0a\x0a  <pre><code>newtype Event a =\x0a    Event ((a -> Effect Unit) -> Effect (Effect Unit))\x0a\x0anewtype ABehavior event a =\x0a  ABehavior (forall b. event (a -> b) -> event b)\x0atype Behavior = ABehavior Event\x0a</code></pre>\x0a\x0a  <p>Let's unpack what the contract of both types are saying.</p>\x0a\x0a  <h3>Event</h3>\x0a\x0a  <p>An event takes a pusher of type <code>a -> Effect Unit</code> to which you can push values of type <code>a</code>. What are the values? Whatever you want! It could be a mouse click, a slider's input, an animation loop thunk, whatever. The event returns a nested <code>Effect</code> - the outer one is triggered on event subscription and the inner one is triggered on event unsubscription. In the case of a click listener, for example, the outer effect will likely call <code>addEventListener</code> and the inner will likely call <code>removeEventListener</code>.</p>\x0a\x0a  <p>\x0a    When using Wags, you have to get your events from somewhere. At a minimum, you'll consume a browser interaction like a click or swipe that turns on the audio. In fact, without some form of human interaction, most browsers will block the Web Audio API from turning on.\x0a  </p>\x0a  <p>\x0a    <code>Events</code> are often produced within a web framework like <a href=\"https://github.com/mikesol/purescript-deku\">Deku</a>, Halogen or React. They don't have to be, though - you can create and consume your own events.\x0a  </p>\x0a\x0a  <h3>Behavior</h3>\x0a\x0a  <p>\x0a    The <code>Behavior</code> type takes an event that needs to be \"unlocked\" (meaning in the form of <code>a -> b</code>, so an <code>a</code> is needed to unlock a <code>b</code>) and unlocks it with an <code>a</code>. Behaviors don't need to produce their <code>a</code> immediately. In fact, they don't need to produce it at all: it's entirely possible to create <code>Behavior (const empty)</code> that \"mutes\" the event. This resembles the physical world: when we want to observe a behavior, like the weather outside or the axial rotation of the Earth, there is a time-cost to observing anything that ranges from instantaneous to infinite.\x0a  </p>\x0a\x0a  <p>\x0a    In Wags, we usually want to observe the behavior of things like a mouse's position, an audio buffer's content or a random number generator.\x0a  </p>\x0a</section>";
      }
  })({
      reflectSymbol: function () {
          return "@";
      }
  })()()(Deku_Pursx.pursxToElementNil)(Type_Proxy["Proxy"].value)(px)({});
  exports["primer"] = primer;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Events"] = $PS["WAGS.Example.Docs.Events"] || {};
  var exports = $PS["WAGS.Example.Docs.Events"];
  var Control_Apply = $PS["Control.Apply"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Example_Docs_Events_Ex0 = $PS["WAGS.Example.Docs.Events.Ex0"];
  var WAGS_Example_Docs_Events_Ex1 = $PS["WAGS.Example.Docs.Events.Ex1"];
  var WAGS_Example_Docs_Events_Ex2 = $PS["WAGS.Example.Docs.Events.Ex2"];
  var WAGS_Example_Docs_Events_Flavors = $PS["WAGS.Example.Docs.Events.Flavors"];
  var WAGS_Example_Docs_Events_InWags = $PS["WAGS.Example.Docs.Events.InWags"];
  var WAGS_Example_Docs_Events_Primer = $PS["WAGS.Example.Docs.Events.Primer"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var px = Type_Proxy["Proxy"].value;
  var events = function (cca$prime) {
      return function (dpage) {
          return function (ssp) {
              return function (ev) {
                  var mnx = function (i) {
                      return WAGS_Example_Docs_Util.mkNext(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)(Control_Apply.applySecond(Effect.applyEffect)(dpage(i))(WAGS_Example_Docs_Util.scrollToTop));
                  };
                  var ccb = WAGS_Example_Docs_Util.ccassp(cca$prime)(ssp);
                  return Deku_Pursx["makePursx'"]({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Events</h1>\x0a\x0a  <h3>Clicks, wiggles and loops, oh my!</h3>\x0a  <p>\x0a    The true magic of web audio lies in its ability to harness the rich interactivity built into the browser. We can use mouse clicks, finger swipes and animation loops to create beautiful audio landscapes. But how can we tame the complexity of all these events in an expressive, declarative, functional manner? Enter <code>Event</code>, the abstraction that allows us to build rich reactive works using Wags.\x0a  </p>\x0a\x0a  @primer@\x0a  @inWags@\x0a  @flavors@\x0a  @ex0@\x0a  @ex1@\x0a  @ex2@\x0a\x0a  <h2>Next steps</h2>\x0a  <p>In this section, saw how to build rich audio applications using the <code>Event</code> and <code>Behavior</code> types. We also covered the three most common patterns you'll see when working with events: events that need to happen <i>now</i>, events that come from user interaction, and timed events. In the next section, we'll look at how to make events <a @next@ style=\"cursor:pointer;\">stateful</a>.</p>\x0a</div>";
                      }
                  })({
                      reflectSymbol: function () {
                          return "@";
                      }
                  })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "primer";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "next";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "inWags";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "flavors";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "ex2";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "ex1";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "ex0";
                      }
                  }))(Type_Proxy["Proxy"].value)(px)({
                      next: mnx(WAGS_Example_Docs_Types.State.value),
                      primer: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Events_Primer.primer),
                      inWags: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Events_InWags.inWags),
                      flavors: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Events_Flavors.flavors),
                      ex0: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Events_Ex0.ex0(ccb)(dpage)(ev)),
                      ex1: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Events_Ex1.ex1(ccb)(dpage)(ev)),
                      ex2: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Events_Ex2.ex2(ccb)(dpage)(ev))
                  });
              };
          };
      };
  };
  exports["events"] = events;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.FixFan.AI0"] = $PS["WAGS.Example.Docs.FixFan.AI0"] || {};
  var exports = $PS["WAGS.Example.Docs.FixFan.AI0"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect_Aff = $PS["Effect.Aff"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var ai0 = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<div>\x0a  <pre><code>\\{ tink0, tink1, tink2, tink3 } -> run2_\x0a  [ gain_ 1.0 do\x0a      let ooo n = bang $ onOff $ dt (add n) apOn\x0a      [ playBuf tink0 (ooo 0.1)\x0a      , playBuf tink1 (ooo 0.2)\x0a      , playBuf tink2 (ooo 0.9)\x0a      , playBuf tink3 (ooo 1.8)\x0a      ]\x0a  ]</code></pre>\x0a\x0a  @ai0@\x0a  </div>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "ai0";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  ai0: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Apply.apply(Effect_Aff.applyParAff)(Control_Apply.apply(Effect_Aff.applyParAff)(Control_Apply.apply(Effect_Aff.applyParAff)(Data_Functor.map(Effect_Aff.functorParAff)(function (v1) {
                          return function (v2) {
                              return function (v3) {
                                  return function (v4) {
                                      return {
                                          tink0: v1,
                                          tink1: v2,
                                          tink2: v3,
                                          tink3: v4
                                      };
                                  };
                              };
                          };
                      })(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/178/178660_717950-lq.mp3"))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/178/178660_717950-lq.mp3"))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/562/562008_7107243-lq.mp3"))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/126/126531_2044671-lq.mp3"))));
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)((function () {
                              var ooo = function (n) {
                                  return FRP_Event_Class.bang(FRP_Event.eventIsEvent)(WAGS_Properties.onOff()(WAGS_Parameter.toAudioOnOffAudioOnOff)(WAGS_Parameter.dt()(Data_Semiring.add(Data_Semiring.semiringNumber)(n))(WAGS_Parameter.apOn)));
                              };
                              return [ WAGS_Control.playBuf(WAGS_Common.initialPlayBufBrowserAudi)(v1.tink0)(ooo(0.1)), WAGS_Control.playBuf(WAGS_Common.initialPlayBufBrowserAudi)(v1.tink1)(ooo(0.2)), WAGS_Control.playBuf(WAGS_Common.initialPlayBufBrowserAudi)(v1.tink2)(ooo(0.9)), WAGS_Control.playBuf(WAGS_Common.initialPlayBufBrowserAudi)(v1.tink3)(ooo(1.8)) ];
                          })()) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["ai0"] = ai0;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.FixFan.AI1"] = $PS["WAGS.Example.Docs.FixFan.AI1"] || {};
  var exports = $PS["WAGS.Example.Docs.FixFan.AI1"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect_Aff = $PS["Effect.Aff"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var $$Math = $PS["Math"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var ai1 = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<div>\x0a  <pre><code>\\{ tink0, tink1, tink2, tink3 } -> run2_\x0a  [ gain_ 1.0\x0a      $ do\x0a          let\x0a            ooo n = bang $ onOff $ dt (add n) apOn\x0a            mtk i =\x0a              case i `mod` 4 of\x0a                0 -> tink0\x0a                1 -> tink1\x0a                2 -> tink2\x0a                _ -> tink3\x0a          0 .. 100 &lt;#&gt;\x0a            \\i' -> do\x0a              let i = toNumber i'\x0a              playBuf (mtk i')\x0a                (ooo (0.3 + 0.3 * (i * (1.005 `pow` i))))</code></pre>\x0a\x0a  @ai0@\x0a  </div>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "ai0";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  ai0: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Apply.apply(Effect_Aff.applyParAff)(Control_Apply.apply(Effect_Aff.applyParAff)(Control_Apply.apply(Effect_Aff.applyParAff)(Data_Functor.map(Effect_Aff.functorParAff)(function (v1) {
                          return function (v2) {
                              return function (v3) {
                                  return function (v4) {
                                      return {
                                          tink0: v1,
                                          tink1: v2,
                                          tink2: v3,
                                          tink3: v4
                                      };
                                  };
                              };
                          };
                      })(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/178/178660_717950-lq.mp3"))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/178/178660_717950-lq.mp3"))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/562/562008_7107243-lq.mp3"))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/126/126531_2044671-lq.mp3"))));
                  })(function (ctx) {
                      return function (v1) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)((function () {
                              var ooo = function (n) {
                                  return FRP_Event_Class.bang(FRP_Event.eventIsEvent)(WAGS_Properties.onOff()(WAGS_Parameter.toAudioOnOffAudioOnOff)(WAGS_Parameter.dt()(Data_Semiring.add(Data_Semiring.semiringNumber)(n))(WAGS_Parameter.apOn)));
                              };
                              var mtk = function (i) {
                                  var v2 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(4);
                                  if (v2 === 0) {
                                      return v1.tink0;
                                  };
                                  if (v2 === 1) {
                                      return v1.tink1;
                                  };
                                  if (v2 === 2) {
                                      return v1.tink2;
                                  };
                                  return v1.tink3;
                              };
                              return Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Array.range(0)(100))(function (i$prime) {
                                  var i = Data_Int.toNumber(i$prime);
                                  return WAGS_Control.playBuf(WAGS_Common.initialPlayBufBrowserAudi)(mtk(i$prime))(ooo(0.3 + 0.3 * (i * $$Math.pow(1.005)(i))));
                              });
                          })()) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["ai1"] = ai1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.FixFan.Fan0"] = $PS["WAGS.Example.Docs.FixFan.Fan0"] || {};
  var exports = $PS["WAGS.Example.Docs.FixFan.Fan0"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var fan0 = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<div>\x0a  <pre><code>run2_\x0a  [ fan1 (loopBuf buf bangOn)\x0a      \\b _ -> mix $ gain_ 0.8\x0a        [ bandpass_ { frequency: 400.0, q: 1.0 } [ b ]\x0a        , bandpass_ { frequency: 880.0, q: 5.0 } [ b ]\x0a        , bandpass_ { frequency: 1200.0, q: 10.0 } [ b ]\x0a        , bandpass_ { frequency: 2000.0, q: 20.0 } [ b ]\x0a        , bandpass_ { frequency: 3000.0, q: 30.0 } [ b ]\x0a        ]\x0a  ]</code></pre>\x0a\x0a  @ai0@\x0a  </div>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "ai0";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  ai0: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.fan1(WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()))(function (b) {
                              return function (v1) {
                                  return WAGS_Core.mix(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.8)([ WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 400.0,
                                      q: 1.0
                                  })([ b ]), WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 880.0,
                                      q: 5.0
                                  })([ b ]), WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 1200.0,
                                      q: 10.0
                                  })([ b ]), WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 2000.0,
                                      q: 20.0
                                  })([ b ]), WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                      reflectSymbol: function () {
                                          return "q";
                                      }
                                  }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                      reflectSymbol: function () {
                                          return "frequency";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                      frequency: 3000.0,
                                      q: 30.0
                                  })([ b ]) ]));
                              };
                          }) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["fan0"] = fan0;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.FixFan.Fan1"] = $PS["WAGS.Example.Docs.FixFan.Fan1"] || {};
  var exports = $PS["WAGS.Example.Docs.FixFan.Fan1"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var fan1 = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<div>\x0a  <pre><code>\\buf -> run2_\x0a  [ fan1 (loopBuf buf bangOn)\x0a      \\b _ -> mix $ gain_ 0.8\x0a        $ 0 .. 40 &lt;#&gt; lcmap toNumber\x0a            \\i -> bandpass_\x0a              { frequency: 200.0 + i * 150.0, q: 30.0 }\x0a              [ b ]\x0a  ]</code></pre>\x0a\x0a  @ai0@\x0a  </div>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "ai0";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  ai0: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/320/320873_527080-hq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.fan1(WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()))(function (b) {
                              return function (v1) {
                                  return WAGS_Core.mix(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.8)(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Array.range(0)(40))(Data_Profunctor.lcmap(Data_Profunctor.profunctorFn)(Data_Int.toNumber)(function (i) {
                                      return WAGS_Control.bandpass_(WAGS_Common.initialBandpassRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionBandpassOpti)()()()({
                                          reflectSymbol: function () {
                                              return "q";
                                          }
                                      }))(WAGS_Common.convertOptionBandpassOpti1)()()()({
                                          reflectSymbol: function () {
                                              return "frequency";
                                          }
                                      })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                          frequency: 200.0 + i * 150.0,
                                          q: 30.0
                                      })([ b ]);
                                  }))));
                              };
                          }) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["fan1"] = fan1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.FixFan.Fix0"] = $PS["WAGS.Example.Docs.FixFan.Fix0"] || {};
  var exports = $PS["WAGS.Example.Docs.FixFan.Fix0"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var fix0 = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<div>\x0a  <pre><code>\\buf -> run2_\x0a  [ fix\x0a      \\b -> gain_ 1.0\x0a        [ playBuf buf bangOn\x0a        , delay_ 0.1 [ gain_ 0.6 [ b ] ]\x0a        ]\x0a  ]</code></pre>\x0a\x0a  @ai0@\x0a  </div>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "ai0";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  ai0: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/178/178660_717950-lq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.fix(function (b) {
                              return WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)([ WAGS_Control.playBuf(WAGS_Common.initialPlayBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()), WAGS_Control.delay_(WAGS_Common.initialDelayInitialAudioP)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.1)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.6)([ b ]) ]) ]);
                          }) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["fix0"] = fix0;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.FixFan.Fix1"] = $PS["WAGS.Example.Docs.FixFan.Fix1"] || {};
  var exports = $PS["WAGS.Example.Docs.FixFan.Fix1"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var fade1 = function (dictIsEvent) {
      return function (dictNewtype) {
          return FRP_Event_Class.bang(dictIsEvent)(WAGS_Properties.gain(dictNewtype)(WAGS_Parameter.toAudioParameterAudioEnve)({
              p: [ 1.0, 1.0, 0.0 ],
              o: 0.0,
              d: 10.0
          }));
      };
  };
  var fade0 = function (dictIsEvent) {
      return function (dictNewtype) {
          return FRP_Event_Class.bang(dictIsEvent)(WAGS_Properties.gain(dictNewtype)(WAGS_Parameter.toAudioParameterAudioEnve)({
              p: [ 1.0, 1.0, 0.0 ],
              o: 0.0,
              d: 8.0
          }));
      };
  };
  var dgh = function (dictInitialDelay) {
      return function (dictInitialGain) {
          return function (dictInitialHighpass) {
              return function (dictMix) {
                  return function (d) {
                      return function (g) {
                          return function (h) {
                              return function (i) {
                                  return WAGS_Control.delay_(dictInitialDelay)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(d)([ WAGS_Control.gain_(dictInitialGain)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(g)([ WAGS_Control.highpass_(dictInitialHighpass)(dictMix)(h)(i) ]) ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var fix1 = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<div>\x0a  <pre><code>@txt@</code></pre>\x0a\x0a  @ai0@\x0a  </div>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "txt";
                  }
              }))({
                  reflectSymbol: function () {
                      return "ai0";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  txt: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_("dgh d g h i =\x0a  delay_ d [gain_ g [highpass_ h i]]\x0a\x0afade0 = bang\x0a  $ P.gain\x0a  $ AudioEnvelope { p: [1.0, 1.0, 0.0], o: 0.0, d: 8.0 }\x0a\x0afade1 = bang\x0a  $ P.gain\x0a  $ AudioEnvelope { p: [1.0, 1.0, 0.0], o: 0.0, d: 10.0 }\x0a\x0ascene buf = run2_\x0a  [ fan1 (playBuf buf bangOn) \\b _ -> mix $ fix\x0a      \\g0 -> gain_ 1.0\x0a        [ b\x0a        , dgh 0.15 0.7 1500.0\x0a            [ fix\x0a                \\g1 -> gain 1.0 fade1\x0a                  [ dgh 0.4 0.5 2500.0\x0a                      [ g0, g1 ]\x0a                  ]\x0a            ]\x0a        , dgh 0.29 0.85 2000.0\x0a            [ fix\x0a                \\g1 -> gain_ 1.0\x0a                  [ dgh 0.6 0.6 3500.0\x0a                      [ g0\x0a                      , ( fix\x0a                            \\g2 -> gain 1.0 fade0\x0a                              [ dgh 0.75 0.6 4000.0\x0a                                  [ g1, g2 ]\x0a                              , dgh 0.75 0.55 3000.0 [ b ]\x0a                              ]\x0a                        )\x0a                      ]\x0a                  ]\x0a            ]\x0a        ]\x0a  ]")),
                  ai0: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(ccb)(function (ctx) {
                      return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/178/178660_717950-lq.mp3");
                  })(function (ctx) {
                      return function (buf) {
                          return WAGS_Run.run2(ctx)([ WAGS_Control.fan1(WAGS_Control.playBuf(WAGS_Common.initialPlayBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()))(function (b) {
                              return function (v1) {
                                  return WAGS_Core.mix(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(WAGS_Control.fix(function (g0) {
                                      return WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)([ b, dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.15)(0.7)(1500.0)([ WAGS_Control.fix(function (g1) {
                                          return WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)(fade1(FRP_Event.eventIsEvent)())([ dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.4)(0.5)(2500.0)([ g0, g1 ]) ]);
                                      }) ]), dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.29)(0.85)(2000.0)([ WAGS_Control.fix(function (g1) {
                                          return WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)([ dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.6)(0.6)(3500.0)([ g0, WAGS_Control.fix(function (g2) {
                                              return WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)(fade0(FRP_Event.eventIsEvent)())([ dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.75)(0.6)(4000.0)([ g1, g2 ]), dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.75)(0.55)(3000.0)([ b ]) ]);
                                          }) ]) ]);
                                      }) ]) ]);
                                  }));
                              };
                          }) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["fix1"] = fix1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.FixFan.Intro"] = $PS["WAGS.Example.Docs.FixFan.Intro"] || {};
  var exports = $PS["WAGS.Example.Docs.FixFan.Intro"];
  var Control_Apply = $PS["Control.Apply"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var px = Type_Proxy["Proxy"].value;
  var ffIntro = function (cca$prime) {
      return function (dpage) {
          return function (ssp) {
              return function (ev) {
                  var mnx = function (i) {
                      return WAGS_Example_Docs_Util.mkNext(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)(Control_Apply.applySecond(Effect.applyEffect)(dpage(i))(WAGS_Example_Docs_Util.scrollToTop));
                  };
                  var cca = WAGS_Example_Docs_Util.ccassp(cca$prime)(ssp);
                  return Deku_Pursx["makePursx'"]({
                      reflectSymbol: function () {
                          return "<section>\x0a  <p>\x0a    In the <a @hwLink@ style=\"cursor:pointer;\">hello world</a> section, we saw how to create and wire up two audio nodes: a <code>sinOsc</code>, or a sine-wave oscillator, is hooked up to a <code>gain</code> node. For some cases, feeding one audio node to another all the way up to a loudspeaker will be all you need. However, in most cases, you'll need to exploit three additional relationships:</p>\x0a    <ul>\x0a      <li><span style=\"font-weight:800px;\">Many to one</span>, where many audio units pass through one.</li>\x0a      <li><span style=\"font-weight:800px;\">One to many</span>, where a single audio unit passes through many different ones.</li>\x0a      <li><span style=\"font-weight:800px;\">Feedback</span>, where an audio unit is an input to itself.</li>\x0a    </ul>\x0a    <p>This section will show how wags handles all three cases:</p>\x0a    <ul>\x0a      <li><span style=\"font-weight:800px;\"><code>Array</code></span> is the data structure we'll use to send many audio units into one.</li>\x0a      <li><span style=\"font-weight:800px;\"><code>fan</code></span> is a function that we'll use to \"fan\" one audio node out to many.</li>\x0a      <li><span style=\"font-weight:800px;\"><code>fix</code></span> is the function we'll use to make an audio unit an input into itself.</li>\x0a    </ul>\x0a    <h2>The setup</h2>\x0a    <p>\x0a      To illustrate how <code>Array</code>, <code>fan</code> and <code>fix</code> work, we're going to use a few new audio units.\x0a    </p>\x0a      <ul>\x0a        <li><code>delay</code>: A delay node</li>\x0a        <li><code>bandpass</code>: A bandpass filter, meaning a filter that lets a single frequency band pass through.</li>\x0a        <li><code>playBuf</code> and <code>loopBuf</code>: Playback or looping playback of a buffer. We'll use some MP3 files from freesound.org.</li>\x0a      </ul>\x0a  </section>";
                      }
                  })({
                      reflectSymbol: function () {
                          return "@";
                      }
                  })()()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "hwLink";
                      }
                  }))(Type_Proxy["Proxy"].value)(px)({
                      hwLink: mnx(WAGS_Example_Docs_Types.HelloWorld.value)
                  });
              };
          };
      };
  };
  exports["ffIntro"] = ffIntro;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.FixFan"] = $PS["WAGS.Example.Docs.FixFan"] || {};
  var exports = $PS["WAGS.Example.Docs.FixFan"];
  var Control_Apply = $PS["Control.Apply"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Example_Docs_FixFan_AI0 = $PS["WAGS.Example.Docs.FixFan.AI0"];
  var WAGS_Example_Docs_FixFan_AI1 = $PS["WAGS.Example.Docs.FixFan.AI1"];
  var WAGS_Example_Docs_FixFan_Fan0 = $PS["WAGS.Example.Docs.FixFan.Fan0"];
  var WAGS_Example_Docs_FixFan_Fan1 = $PS["WAGS.Example.Docs.FixFan.Fan1"];
  var WAGS_Example_Docs_FixFan_Fix0 = $PS["WAGS.Example.Docs.FixFan.Fix0"];
  var WAGS_Example_Docs_FixFan_Fix1 = $PS["WAGS.Example.Docs.FixFan.Fix1"];
  var WAGS_Example_Docs_FixFan_Intro = $PS["WAGS.Example.Docs.FixFan.Intro"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var px = Type_Proxy["Proxy"].value;
  var fixFan = function (cca$prime) {
      return function (dpage) {
          return function (ssp) {
              return function (ev) {
                  var mnx = function (i) {
                      return WAGS_Example_Docs_Util.mkNext(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)(Control_Apply.applySecond(Effect.applyEffect)(dpage(i))(WAGS_Example_Docs_Util.scrollToTop));
                  };
                  var ccb = WAGS_Example_Docs_Util.ccassp(cca$prime)(ssp);
                  return Deku_Pursx["makePursx'"]({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Array, fan, and fix</h1>\x0a\x0a  <h3>The anatomy of a Wags graph</h3>\x0a\x0a  @intro@\x0a\x0a  <h2>Arrays</h2>\x0a\x0a  <p>To send several audio units through one, we use an <code>Array</code>.</p>\x0a\x0a  @code0@\x0a\x0a  <p>PureScript <code>Array</code>-s are extremely flexible and efficient, so go to town! For example, you can <code>map</code> (aka <code>&lt;#&gt;</code> when flipped) over a range of integers to create audio units, like in the example below.</p>\x0a\x0a  @code1@\x0a\x0a  <h2>Fan</h2>\x0a\x0a  <p><span style=\"font-weight:800;\">Fan</span> takes a vector of audio signals and fans it out to multiple processing chains. If you have a single signal, you can use <code>fan1</code>. For example, if you have a looping buffer and you'd like to filter it through a bank of different filters, you can do this via fan. Fan takes two arguments:</p>\x0a\x0a  <ul>\x0a    <li>A vector of nodes to fan out (or a single node in the case of <code>fan1</code>).</li>\x0a    <li>A function that accepts a reference to this/these node(s) and returns a new <i>mixed</i> node that may or may not contain the input. Mixed nodes are created using the <code>mix</code> function.</li>\x0a  </ul>\x0a\x0a  <p>Let's see an example below that fans one <code>playBuf</code> to five bandpass filters.</p>\x0a\x0a  @code2@\x0a\x0a  <p>Just for kicks, let's jack it up to forty bandpass filters.</p>\x0a\x0a  @code3@\x0a\x0a  <h2>Fix</h2>\x0a\x0a  <p><span style=\"font-weight:800;\">Fix</span> is a fixed point operator. It accepts itself as an argument and returns... itself \ud83e\udd2f. You can use <code>fix</code> to create feedback loops!</p>\x0a\x0a  @code4@\x0a\x0a  <blockquote>If you don't have some sort of delay line in your processing chain, either via the Web-Audio-provided delay line or a custom delay node, Web Audio will raise a runtime error. Wags doesn't check for this, so make sure you test your audio to guarantee that it's feedback-explosion-free!</blockquote>\x0a\x0a  <p>Nothing stops you from nesting <code>fix</code>-s to create a mega-feedback loop!</p>\x0a\x0a  <blockquote>In the example below, I've added a couple fades to make sure the experience isn't too unpleasant. We'll talk more about fades in the events section \ud83c\udfb8</blockquote>\x0a\x0a  @code5@\x0a\x0a  <h2>Next steps</h2>\x0a  <p>In this section, saw how to combine together audio nodes with arrays, fan one audio node to many processing chains via <code>fan</code>, and how to create a fixed point, aka feedback, for a node via <code>fix</code>. In the next section, we'll ramp up on all of the yummy <a @next@ style=\"cursor:pointer;\">audio nodes you can use</a>.</p>\x0a</div>";
                      }
                  })({
                      reflectSymbol: function () {
                          return "@";
                      }
                  })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "next";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "intro";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "code5";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "code4";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "code3";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "code2";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "code1";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "code0";
                      }
                  }))(Type_Proxy["Proxy"].value)(px)({
                      intro: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_FixFan_Intro.ffIntro(cca$prime)(dpage)(ssp)(ev)),
                      next: mnx(WAGS_Example_Docs_Types.AudioUnits.value),
                      code0: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_FixFan_AI0.ai0(ccb)(dpage)(ev)),
                      code1: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_FixFan_AI1.ai1(ccb)(dpage)(ev)),
                      code2: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_FixFan_Fan0.fan0(ccb)(dpage)(ev)),
                      code3: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_FixFan_Fan1.fan1(ccb)(dpage)(ev)),
                      code4: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_FixFan_Fix0.fix0(ccb)(dpage)(ev)),
                      code5: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_FixFan_Fix1.fix1(ccb)(dpage)(ev))
                  });
              };
          };
      };
  };
  exports["fixFan"] = fixFan;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.HelloWorld"] = $PS["WAGS.Example.Docs.HelloWorld"] || {};
  var exports = $PS["WAGS.Example.Docs.HelloWorld"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Elt_Code = $PS["Deku.DOM.Elt.Code"];
  var Deku_DOM_Elt_Pre = $PS["Deku.DOM.Elt.Pre"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var FRP_Event = $PS["FRP.Event"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var helloWorld = function (cca$prime) {
      return function (dpage) {
          return function (ssp) {
              return function (ev) {
                  var cpage = Control_Apply.applySecond(Effect.applyEffect)(dpage(WAGS_Example_Docs_Types.FixFan.value))(WAGS_Example_Docs_Util.scrollToTop);
                  var cca = WAGS_Example_Docs_Util.ccassp(cca$prime)(ssp);
                  return Deku_Pursx["makePursx'"]({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Hello world</h1>\x0a\x0a  <h3>Wagging at 440Hz</h3>\x0a\x0a  <p>Here's a \"hello world\" in Wags. In this and all the following sections, we'll start with a full example, and we'll pick it apart afterwards.</p>\x0a\x0a  @code@\x0a  @result@\x0a\x0a  <h2>The <code>run</code> functions</h2>\x0a\x0a  <p>The <code>run</code> family of functions run our audio and produces an unsubscribe function that we use to stop the audio. In this case, <code>run2_</code> does three extra things:\x0a  <ul>\x0a    <li>Wires up our session for two-channel audio. If the sources are mono, it will automatically scale them up to stereo.</li>\x0a    <li>Automatically handles creation and destruction of audio contexts.</li>\x0a    <li>Takes care of the subscription to the rendering engine.</li>\x0a  </ul></p>\x0a\x0a  <p>The <code>push</code> function comes from the <a href=\"https://github.com/mikesol/purescript-deku\"><code>purescript-deku</code></a> framework and is used to register an unsubscribe effect. When we trigger the effect it in the <code>Just</code> branch of our pattern match, the audio turns off.</p>\x0a\x0a  <h2>Audio units</h2>\x0a\x0a  <p>The sound you hear when you play the example above is created with the statement <code>gain_ 0.15 [ sinOsc 440.0 bangOn ]</code>. The first function, <code>gain_</code>, creates a gain node with a volume of <code>0.15</code>. In WebAudio, gain ranges from <code>0.0</code> to <code>1.0</code> and can be converted to decibels using the following equation:</p>\x0a\x0a  <pre><code>decibels = 20 * log10( gain );</code></pre>\x0a\x0a  <p>In our case, a gain of <code>0.15</code> is roughly <code>-16.5 dB</code>.</p>\x0a\x0a  <p>Our sine wave oscillator is set to a frequency of <code>440Hz</code>. That means that your loudspeaker or headphones will vibrate back and forth in sinusoidal motion 440 times per second, which most folks perceive as the <a href=\"https://en.wikipedia.org/wiki/A440_(pitch_standard)\">note A</a>. And we turn on the oscillator with <code>bangOn</code>, as the default is off for <i>all</i> sound generators in Wags. This is a design decision to help preserve the hearing of those that work frequently with audio.</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>Now that we have our setup running, let's explore the anatomy of a Wags graph. Irrespective of the nodes comprising the graph, there are three basic concepts you need to be familiar with before you start diving into audio units: <a @next@ style=\"cursor:pointer;\">array, fan, and fix</a>.</p>\x0a</div>";
                      }
                  })({
                      reflectSymbol: function () {
                          return "@";
                      }
                  })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "result";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "next";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "code";
                      }
                  }))(Type_Proxy["Proxy"].value)(px)({
                      code: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_DOM_Elt_Pre.pre_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Code.code_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_Control.text_("case e of\x0a  Just x -> x *> push Nothing\x0a  _ -> (run2_ [ gain_ 0.15 [ sinOsc 440.0 bangOn ] ]\x0a         >>= Just >>> push") ]) ])),
                      result: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapper(ev)(cca)(function (v) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      })(function (ctx) {
                          return function (v) {
                              return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.15)([ WAGS_Control.sinOsc(WAGS_Common.initialSinOscNumber)(440.0)(WAGS_Parameter.bangOn()) ]) ]);
                          };
                      })),
                      next: WAGS_Example_Docs_Util.mkNext(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)(cpage)
                  });
              };
          };
      };
  };
  exports["helloWorld"] = helloWorld;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Intro.IntroEx"] = $PS["WAGS.Example.Docs.Intro.IntroEx"] || {};
  var exports = $PS["WAGS.Example.Docs.Intro.IntroEx"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Plus = $PS["Control.Plus"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_ArrayBuffer_Typed = $PS["Data.ArrayBuffer.Typed"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Homogeneous_Record = $PS["Data.Homogeneous.Record"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_DOM_Attr_Height = $PS["Deku.DOM.Attr.Height"];
  var Deku_DOM_Attr_Max = $PS["Deku.DOM.Attr.Max"];
  var Deku_DOM_Attr_Min = $PS["Deku.DOM.Attr.Min"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Attr_OnInput = $PS["Deku.DOM.Attr.OnInput"];
  var Deku_DOM_Attr_Step = $PS["Deku.DOM.Attr.Step"];
  var Deku_DOM_Attr_Style = $PS["Deku.DOM.Attr.Style"];
  var Deku_DOM_Attr_Value = $PS["Deku.DOM.Attr.Value"];
  var Deku_DOM_Attr_Width = $PS["Deku.DOM.Attr.Width"];
  var Deku_DOM_Attr_Xtype = $PS["Deku.DOM.Attr.Xtype"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Canvas = $PS["Deku.DOM.Elt.Canvas"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_DOM_Elt_Input = $PS["Deku.DOM.Elt.Input"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Animate = $PS["FRP.Event.Animate"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var FRP_Event_VBus = $PS["FRP.Event.VBus"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var $$Math = $PS["Math"];
  var Random_LCG = $PS["Random.LCG"];
  var Test_QuickCheck_Gen = $PS["Test.QuickCheck.Gen"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Clock = $PS["WAGS.Clock"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Math = $PS["WAGS.Math"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Properties = $PS["WAGS.Properties"];
  var WAGS_Run = $PS["WAGS.Run"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];                
  var twoPi = 2.0 * $$Math.pi;
  var ttap = function (v) {
      return {
          o: v.value0 + 4.0e-2,
          n: v.value1,
          t: WAGS_Parameter["_linear"]
      };
  };
  var random = FRP_Behavior.behavior(function (e) {
      return FRP_Event.makeEvent(function (k) {
          return FRP_Event.subscribe(e)(function (f) {
              return function __do() {
                  var $43 = Effect_Random.random();
                  return k(f($43))();
              };
          });
      });
  });
  var px = Type_Proxy["Proxy"].value;
  var fenv = function (dictIsEvent) {
      return function (dictNewtype) {
          return function (s) {
              return function (e) {
                  return FRP_Event_Class.bang(dictIsEvent)(WAGS_Properties.frequency(dictNewtype)(WAGS_Parameter.toAudioParameterAudioEnve)({
                      p: [ s, e ],
                      o: 0.0,
                      d: 16.0
                  }));
              };
          };
      };
  };
  var fade1 = function (dictIsEvent) {
      return function (dictNewtype) {
          return FRP_Event_Class.bang(dictIsEvent)(WAGS_Properties.gain(dictNewtype)(WAGS_Parameter.toAudioParameterAudioEnve)({
              p: [ 1.0, 1.0, 0.75, 0.5, 0.75, 0.5, 0.75, 0.5, 0.25, 0.5, 0.25, 0.0 ],
              o: 0.0,
              d: 18.0
          }));
      };
  };
  var fade0 = function (dictIsEvent) {
      return function (dictNewtype) {
          return FRP_Event_Class.bang(dictIsEvent)(WAGS_Properties.gain(dictNewtype)(WAGS_Parameter.toAudioParameterAudioEnve)({
              p: [ 1.0, 1.0, 0.75, 0.5, 0.75, 0.5, 0.75, 0.5, 0.25, 0.5, 0.25, 0.0 ],
              o: 0.0,
              d: 24.0
          }));
      };
  };
  var dgh = function (dictInitialDelay) {
      return function (dictInitialGain) {
          return function (dictInitialHighpass) {
              return function (dictMix) {
                  return function (d) {
                      return function (de) {
                          return function (g) {
                              return function (ge) {
                                  return function (h) {
                                      return function (he) {
                                          return function (i) {
                                              return WAGS_Control.delay(dictInitialDelay)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(d)(de)([ WAGS_Control.gain(dictInitialGain)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(g)(ge)([ WAGS_Control.highpass(dictInitialHighpass)(dictMix)(h)(he)(i) ]) ]);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var dgb = function (dictInitialDelay) {
      return function (dictInitialGain) {
          return function (dictInitialBandpass) {
              return function (dictMix) {
                  return function (d) {
                      return function (de) {
                          return function (g) {
                              return function (ge) {
                                  return function (h) {
                                      return function (he) {
                                          return function (i) {
                                              return WAGS_Control.delay(dictInitialDelay)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(d)(de)([ WAGS_Control.gain(dictInitialGain)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(g)(ge)([ WAGS_Control.bandpass(dictInitialBandpass)(dictMix)(h)(he)(i) ]) ]);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var denv = function (dictIsEvent) {
      return function (dictNewtype) {
          return function (s) {
              return function (e) {
                  return FRP_Event_Class.bang(dictIsEvent)(WAGS_Properties.delayTime(dictNewtype)(WAGS_Parameter.toAudioParameterAudioEnve)({
                      p: [ s, e ],
                      o: 0.0,
                      d: 16.0
                  }));
              };
          };
      };
  };
  var cvsy = 400;
  var cvsyn = Data_Int.toNumber(cvsy);
  var cvsys = Data_Show.show(Data_Show.showInt)(cvsy) + "px";
  var cvsx = 600;
  var cvsxn = Data_Int.toNumber(cvsx);
  var cvsxs = Data_Show.show(Data_Show.showInt)(cvsx) + "px";
  var buffers$prime = {
      pluck0: "https://freesound.org/data/previews/493/493016_10350281-lq.mp3",
      pluck1: "https://freesound.org/data/previews/141/141524_2558140-lq.mp3",
      strum0: "https://freesound.org/data/previews/234/234738_3635427-lq.mp3"
  };
  var introEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>@ex1@</section>";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "ex1";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  ex1: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event_VBus.vbus()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "canvas";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "slider";
                      }
                  })()()(FRP_Event_VBus.vbusCons1({
                      reflectSymbol: function () {
                          return "startStop";
                      }
                  })()()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "loading";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "start";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "stop";
                      }
                  })()()(FRP_Event_VBus.vbusNil)()()()())()()()())()()()())(FRP_Event_VBus.vbusNil)()()()())()()()())()()()())(Type_Proxy["Proxy"].value)(function (push) {
                      return function (event) {
                          var startE = Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Data_Unit.unit))(event.startStop.start);
                          var music = function (ctx) {
                              return function (buffer) {
                                  return function (analyserE) {
                                      var sliderE = Data_Functor.map(FRP_Event.functorEvent)(function (v1) {
                                          return new Data_Tuple.Tuple(v1.acTime, v1.value);
                                      })(WAGS_Clock.withACTime(ctx)(event.slider));
                                      return [ WAGS_Control.analyser_(WAGS_Control.initialAnalyserRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Control.convertOptionAnalyserOpti1)()()()({
                                          reflectSymbol: function () {
                                              return "fftSize";
                                          }
                                      }))(WAGS_Control.convertOptionAnalyserOpti)()()()({
                                          reflectSymbol: function () {
                                              return "cb";
                                          }
                                      })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                          cb: function (a) {
                                              return function __do() {
                                                  Effect_Ref.write(new Data_Maybe.Just(a))(analyserE)();
                                                  return Effect_Ref.write(Data_Maybe.Nothing.value)(analyserE);
                                              };
                                          },
                                          fftSize: WAGS_Core.TTT7.value
                                      })(WAGS_Control.fan1(WAGS_Control.playBuf(WAGS_Common.initialPlayBufBrowserAudi)(buffer)(Control_Alt.alt(FRP_Event.altEvent)(WAGS_Parameter.bangOn())(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                          var $44 = WAGS_Properties.playbackRate()(WAGS_Parameter.toAudioParameterAudioNume);
                                          var $45 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(WAGS_Math.calcSlope(0.0)(0.96)(100.0)(1.04));
                                          return function ($46) {
                                              return $44(ttap($45($46)));
                                          };
                                      })())(sliderE))))(function (b) {
                                          return function (v1) {
                                              return WAGS_Core.mix(WAGS_Core.mixNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(WAGS_Control.fix(function (g0) {
                                                  return WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)([ b, WAGS_Control.delay(WAGS_Common.initialDelayRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionDelayOptions)()()()({
                                                      reflectSymbol: function () {
                                                          return "maxDelayTime";
                                                      }
                                                  }))(WAGS_Common.convertOptionDelayOptions1)()()()({
                                                      reflectSymbol: function () {
                                                          return "delayTime";
                                                      }
                                                  })))(ConvertableOptions.defaultsRecord()())))(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))({
                                                      maxDelayTime: 2.5,
                                                      delayTime: 1.0
                                                  })(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                                      var $47 = WAGS_Properties.delayTime()(WAGS_Parameter.toAudioParameterAudioNume);
                                                      var $48 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(WAGS_Math.calcSlope(0.0)(0.5)(100.0)(2.45));
                                                      return function ($49) {
                                                          return $47(ttap($48($49)));
                                                      };
                                                  })())(sliderE))([ WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.4)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                                      var $50 = WAGS_Properties.gain()(WAGS_Parameter.toAudioParameterAudioNume);
                                                      var $51 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(WAGS_Math.calcSlope(0.0)(0.6)(100.0)(0.9));
                                                      return function ($52) {
                                                          return $50(ttap($51($52)));
                                                      };
                                                  })())(sliderE))([ b ]) ]), dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.15)(Control_Plus.empty(FRP_Event.plusEvent))(0.7)(Control_Plus.empty(FRP_Event.plusEvent))(1500.0)(fenv(FRP_Event.eventIsEvent)()(1500.0)(3000.0))([ WAGS_Control.fix(function (g1) {
                                                      return WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)(fade1(FRP_Event.eventIsEvent)())([ dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.4)(Control_Plus.empty(FRP_Event.plusEvent))(0.5)(Control_Plus.empty(FRP_Event.plusEvent))(3000.0)(fenv(FRP_Event.eventIsEvent)()(3000.0)(100.0))([ g0, g1 ]) ]);
                                                  }) ]), dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.29)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                                      var $53 = WAGS_Properties.delayTime()(WAGS_Parameter.toAudioParameterAudioNume);
                                                      var $54 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(WAGS_Math.calcSlope(0.0)(0.1)(100.0)(0.4));
                                                      return function ($55) {
                                                          return $53(ttap($54($55)));
                                                      };
                                                  })())(sliderE))(0.85)(Control_Plus.empty(FRP_Event.plusEvent))(2000.0)(fenv(FRP_Event.eventIsEvent)()(2000.0)(5000.0))([ WAGS_Control.fix(function (g1) {
                                                      return WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)([ dgh(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialHighpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.6)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                                          var $56 = WAGS_Properties.delayTime()(WAGS_Parameter.toAudioParameterAudioNume);
                                                          var $57 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(WAGS_Math.calcSlope(0.0)(0.8)(100.0)(0.3));
                                                          return function ($58) {
                                                              return $56(ttap($57($58)));
                                                          };
                                                      })())(sliderE))(0.6)(Control_Plus.empty(FRP_Event.plusEvent))(3500.0)(fenv(FRP_Event.eventIsEvent)()(3500.0)(100.0))([ g0, WAGS_Control.fix(function (g2) {
                                                          return WAGS_Control.gain(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)(fade0(FRP_Event.eventIsEvent)())([ dgb(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialBandpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.75)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                                                              var $59 = WAGS_Properties.delayTime()(WAGS_Parameter.toAudioParameterAudioNume);
                                                              var $60 = Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(WAGS_Math.calcSlope(0.0)(0.9)(100.0)(0.1));
                                                              return function ($61) {
                                                                  return $59(ttap($60($61)));
                                                              };
                                                          })())(sliderE))(0.6)(Control_Plus.empty(FRP_Event.plusEvent))(4000.0)(fenv(FRP_Event.eventIsEvent)()(4000.0)(200.0))([ g1, g2 ]), dgb(WAGS_Common.initialDelayInitialAudioP)(WAGS_Common.initialGainNumber)(WAGS_Common.initialBandpassInitialAud)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(0.75)(denv(FRP_Event.eventIsEvent)()(0.75)(0.2))(0.55)(Control_Plus.empty(FRP_Event.plusEvent))(200.0)(fenv(FRP_Event.eventIsEvent)()(200.0)(4000.0))([ b ]) ]);
                                                      }) ]) ]);
                                                  }) ]) ]);
                                              }));
                                          };
                                      })) ];
                                  };
                              };
                          };
                          return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Canvas.canvas(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent))([ Deku_Attribute.attr(Deku_DOM_Attr_Width.attrCanvas_WidthString)(Deku_DOM_Attr_Width.Width.value)(cvsxs), Deku_Attribute.attr(Deku_DOM_Attr_Height.attrCanvas_HeightString)(Deku_DOM_Attr_Height.Height.value)(cvsys), Deku_Attribute.attr(Deku_DOM_Attr_Style.attrCanvas_StyleString)(Deku_DOM_Attr_Style.Style.value)("width: 100%;"), Deku_Attribute.attr(Deku_DOM.attrCanvas_Draw2DContext2)(Deku_DOM.Draw2D.value)(function (ctx) {
                              return function __do() {
                                  Graphics_Canvas.setFillStyle(ctx)("black")();
                                  Graphics_Canvas.fillRect(ctx)({
                                      width: cvsxn,
                                      height: cvsyn,
                                      x: 0.0,
                                      y: 0.0
                                  })();
                                  return Data_Unit.unit;
                              };
                          }) ]))(Data_Functor.map(FRP_Event.functorEvent)(function (arr) {
                              return Deku_Attribute.attr(Deku_DOM.attrCanvas_Draw2DContext2)(Deku_DOM.Draw2D.value)(function (ctx) {
                                  return function __do() {
                                      Graphics_Canvas.setFillStyle(ctx)("black")();
                                      Graphics_Canvas.fillRect(ctx)({
                                          width: cvsxn,
                                          height: cvsyn,
                                          x: 0.0,
                                          y: 0.0
                                      })();
                                      Graphics_Canvas.setFillStyle(ctx)("rgba(255,255,255,0.2)")();
                                      return Effect.foreachE(arr)(function (v1) {
                                          return function __do() {
                                              Graphics_Canvas.beginPath(ctx)();
                                              Graphics_Canvas.arc(ctx)({
                                                  end: twoPi,
                                                  radius: v1.value1 * 40.0,
                                                  start: 0.0,
                                                  x: v1.value0.x * cvsxn,
                                                  y: v1.value0.y * cvsyn
                                              })();
                                              return Graphics_Canvas.fill(ctx)();
                                          };
                                      })();
                                  };
                              });
                          })(event.canvas)))(Deku_Control.blank), Deku_DOM_Elt_Input.input(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent))([ Deku_Attribute.attr(Deku_DOM_Attr_Xtype.attrInput_XtypeString)(Deku_DOM_Attr_Xtype.Xtype.value)("range"), Deku_Attribute.attr(Deku_DOM_Attr_Min.attrInput_MinString)(Deku_DOM_Attr_Min.Min.value)("0"), Deku_Attribute.attr(Deku_DOM_Attr_Max.attrInput_MaxString)(Deku_DOM_Attr_Max.Max.value)("100"), Deku_Attribute.attr(Deku_DOM_Attr_Step.attrInput_StepString)(Deku_DOM_Attr_Step.Step.value)("1"), Deku_Attribute.attr(Deku_DOM_Attr_Value.attrInput_ValueString)(Deku_DOM_Attr_Value.Value.value)("50"), Deku_Attribute.attr(Deku_DOM_Attr_Style.attrInput_StyleString)(Deku_DOM_Attr_Style.Style.value)("width: 100%;"), Deku_Attribute.attr(Deku_DOM_Attr_OnInput.attrOnInputCb)(Deku_DOM_Attr_OnInput.OnInput.value)(Deku_Attribute.cb((function () {
                              var $62 = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Control_Bind.composeKleisli(Effect.bindEffect)(Web_HTML_HTMLInputElement.valueAsNumber)(push.slider));
                              var $63 = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLInputElement.fromEventTarget);
                              return function ($64) {
                                  return $62($63(Web_Event_Event.target($64)));
                              };
                          })())) ]))(Deku_Control.blank), Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrButton_StyleString)(Deku_DOM_Attr_Style.Style.value)("width:100%; padding:1.0rem;")), Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                              var $65 = Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value);
                              return function ($66) {
                                  return $65(Deku_Attribute.cb(Data_Function["const"]($66)));
                              };
                          })()))([ Data_Functor.voidLeft(FRP_Event.functorEvent)(event.startStop.loading)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)), Data_Functor.mapFlipped(FRP_Event.functorEvent)(event.startStop.stop)(function (v1) {
                              return Control_Apply.applySecond(Effect.applyEffect)(v1)(Control_Apply.applySecond(Effect.applyEffect)(ccb(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(push.startStop.start(Data_Unit.unit)));
                          }), Data_Functor.mapFlipped(FRP_Event.functorEvent)(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Data_Functor.map(FRP_Event.functorEvent)(function (v1) {
                              return v1.value0;
                          })(ev)))(Data_Functor.voidLeft(FRP_Event.functorEvent)(startE)(Control_Category.identity(Control_Category.categoryFn))))(function (cncl) {
                              return function __do() {
                                  cncl();
                                  push.startStop.loading(Data_Unit.unit)();
                                  var analyserE = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                                  var fib = Effect_Aff.launchAff(Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.context(Effect_Aff.monadEffectAff))(function (ctx) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.constant0Hack(Effect_Aff.monadEffectAff)(ctx))(function (c0h) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Homogeneous_Record.fromHomogeneous())(Control_Parallel.parTraverse(Effect_Aff.parallelAff)(Data_Homogeneous_Record.traversableHomogeneous)(WAGS_Interpret.decodeAudioDataFromUri(ctx))(Data_Homogeneous_Record.homogeneous()(buffers$prime))))(function (sounds) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Random.randomInt(0)(50000)))(function (ri) {
                                                  var randSound = Test_QuickCheck_Gen.evalGen(Test_QuickCheck_Gen.elements(Data_Maybe.fromMaybe(Data_Array_NonEmpty.singleton(sounds.pluck0))(Data_Array_NonEmpty.fromArray(Foreign_Object.values(Foreign_Object.fromHomogeneous()(sounds))))))({
                                                      newSeed: Random_LCG.mkSeed(ri),
                                                      size: 4
                                                  });
                                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                      var rands = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(function (v1) {
                                                          return function __do() {
                                                              var x = Effect_Random.random();
                                                              var y = Effect_Random.random();
                                                              return {
                                                                  x: x,
                                                                  y: y
                                                              };
                                                          };
                                                      })(Data_Array.range(0)(127))();
                                                      var ssub = WAGS_Run.run2(ctx)(music(ctx)(randSound)(analyserE))();
                                                      var anisub = FRP_Event.subscribe(FRP_Event_Animate.animationFrameEvent)(function (v1) {
                                                          return function __do() {
                                                              var ae = Effect_Ref.read(analyserE)();
                                                              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(ae)(function (a) {
                                                                  return function __do() {
                                                                      var frequencyData = WAGS_Interpret.getByteFrequencyData(a)();
                                                                      var arr = Data_Functor.map(Effect.functorEffect)((function () {
                                                                          var $67 = Data_Array.zip(rands);
                                                                          var $68 = Data_Functor.map(Data_Functor.functorArray)(function ($70) {
                                                                              return (function (v2) {
                                                                                  return v2 / 255.0;
                                                                              })(Data_UInt.toNumber($70));
                                                                          });
                                                                          return function ($69) {
                                                                              return $67($68($69));
                                                                          };
                                                                      })())(Data_ArrayBuffer_Typed.toArray(Data_ArrayBuffer_Typed.typedArrayUint8)(frequencyData))();
                                                                      push.canvas(arr)();
                                                                      return Data_Unit.unit;
                                                                  };
                                                              })();
                                                          };
                                                      })();
                                                      var res = Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(ssub)(c0h))(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx)))(anisub);
                                                      push.startStop.stop(res)();
                                                      return res;
                                                  });
                                              });
                                          });
                                      });
                                  }))();
                                  ccb(function __do() {
                                      push.startStop.start(Data_Unit.unit)();
                                      return Effect_Aff.launchAff_(WAGS_Example_Docs_Util.raceSelf(fib))();
                                  })();
                                  return Data_Unit.unit;
                              };
                          }) ]) ]))([ Deku_Control.text(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"]("Turn off"))(event.startStop.stop), Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"]("Turn on"))(startE), Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"]("Loading..."))(event.startStop.loading) ])) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["introEx"] = introEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Intro"] = $PS["WAGS.Example.Docs.Intro"] || {};
  var exports = $PS["WAGS.Example.Docs.Intro"];
  var Control_Apply = $PS["Control.Apply"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Example_Docs_Intro_IntroEx = $PS["WAGS.Example.Docs.Intro.IntroEx"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];                
  var px = Type_Proxy["Proxy"].value;
  var intro = function (cca$prime) {
      return function (dpage) {
          return function (ssp) {
              return function (ev) {
                  var ccb = WAGS_Example_Docs_Util.ccassp(cca$prime)(ssp);
                  return Deku_Pursx.makePursx({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Wags</h1>\x0a\x0a  <h3>A web-audio framework written in PureScript</h3>\x0a\x0a  <p>Hi! You've found <a href=\"https://github.com/mikesol/purescript-wags\">Wags</a>.</p>\x0a\x0a  <p>Wags is a web-audio framework designed for interactive media and games. Events like mouse clicks, MIDI notes and tweening frames are streamed to an audio rendering engine and, in response to these events, sound happens.</p>\x0a\x0a  <h2>Why?</h2>\x0a\x0a  <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a> is an amazing piece of technology. It is clear, concise, straightforward and ergonomic. So why build a framework on top of it?</p>\x0a\x0a  <p>As audio projects become more and more ambitious, a need emerges for powerful abstractions to handle browser events and scheduling. Wags aims to tackle this problem through a small set of <a href=\"https://en.wikipedia.org/wiki/Functional_reactive_programming\">FRP</a>-based abstractions. In doing so, it aims to be concise, expressive, and as fast as manually-optimized hand-written JavaScript.</p>\x0a\x0a  <h2>How does it sound?</h2>\x0a\x0a  <p>Here's a small example in Wags that, when you turn it on, emits a single sound and then uses feedback loops to create long tail. You can use the slider to change the properties of the tail in real time.</p>\x0a\x0a  ~ex~\x0a\x0a  <p>By the end of this documentation, you'll know all of the concepts you need to create interactive audio like the example above.</p>\x0a\x0a  <p>If you'd like to use this documentation as a springboard for your own work, it can be found <a href=\"https://github.com/mikesol/purescript-wags/tree/main/examples/docs\">here</a>.</p>\x0a\x0a  <p>And now, without further ado, let's write a small <a ~next~ style=\"cursor:pointer;\">hello world \xe0 la wags</a>!</p>\x0a</div>";
                      }
                  })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "next";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "ex";
                      }
                  }))(px)({
                      next: WAGS_Example_Docs_Util.mkNext(FRP_Event.altEvent)(FRP_Event.eventIsEvent)(ev)(Control_Apply.applySecond(Effect.applyEffect)(dpage(WAGS_Example_Docs_Types.HelloWorld.value))(WAGS_Example_Docs_Util.scrollToTop)),
                      ex: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Intro_IntroEx.introEx(ccb)(dpage)(ev))
                  });
              };
          };
      };
  };
  exports["intro"] = intro;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.MultiChannel"] = $PS["WAGS.Example.Docs.MultiChannel"] || {};
  var exports = $PS["WAGS.Example.Docs.MultiChannel"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];                
  var px = Type_Proxy["Proxy"].value;
  var multiChannel = function (v) {
      return function (dpage) {
          return function (v1) {
              return function (v2) {
                  return Deku_Pursx.makePursx({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Merge and split</h1>\x0a\x0a  <h3>Inputs and outputs abound!</h3>\x0a  <p>\x0a    Web audio allows you to merge and split arbitrary audio. This is essential when you're working with complex audio setups like 5.1 surround sound or novel headphones used in some gaming setups. Wags allows you to both split and merge arbitrary signals using Web Audio's native merger and splitter nodes.\x0a  </p>\x0a\x0a  <h2>Merging</h2>\x0a\x0a  <p>Merging audio in wags looks like any node that takes multiple inputs, but instead of accepting something of type <code>AudioInput</code>, it accepts a <i>vector of audio inputs</i>.</p>\x0a\x0a  <h2>Splitting</h2>\x0a\x0a  <p>Splitting is the inverse operation of merging: it takes a single audio node and splits it into its separate channels. In doing so, it resembles <code>fan</code>, but instead of fanning the audio, it splits it into mono-channel audio.</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>In this section, saw how to merge and split audio. In the next section, we'll look at how to work with <a ~next~ style=\"cursor:pointer;\">custom audio worklets</a>.</p>\x0a</div>";
                      }
                  })()()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "next";
                      }
                  }))(px)({
                      next: FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(WAGS_Example_Docs_Types.AudioWorklets.value))(WAGS_Example_Docs_Util.scrollToTop)))))
                  });
              };
          };
      };
  };
  exports["multiChannel"] = multiChannel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Portals"] = $PS["WAGS.Example.Docs.Portals"] || {};
  var exports = $PS["WAGS.Example.Docs.Portals"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];                
  var px = Type_Proxy["Proxy"].value;
  var portals = function (v) {
      return function (dpage) {
          return function (v1) {
              return function (v2) {
                  return Deku_Pursx.makePursx({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Tumult</h1>\x0a\x0a  <h2>The unknown unknowns of web audio</h2>\x0a  <p>\x0a    As we saw in the last section on subgraphs, sometimes, you simply don't know how your audio will evolve. For example, if we are building a live coding environment and create a space where someone can basically do <i>anything</i>, working with anonymous audio nodes will not cut it. For example, imagine that they have two relatively unconnected parts of the audio graph and want to start creating cross-connections. With subgraphs, we can't pick apart the graph and say \"take node X and connect it to node Y\" as nodes don't have names.\x0a  </p>\x0a\x0a  <p>\x0a    Tumult solves this problem. It is an entirely separate rendering engine from the one we've seen before that works via <i>diffing</i> two audio graphs and adjusting the current graph based on the diff. The biggest difference is that tumult <i>requires</i> you to give a name to each audio unit. Otherwise, the engine won't know what node corresponds to what name.\x0a  </p>\x0a\x0a  <p>\x0a    For you veteran coders and audio-ers, you may bristle at the word <i>diff</i>. After all, diffing is expensive, and we are working in resource constrained environments where timing is of the essence. Fear not! Tumult uses PureScript <code>Set</code>-s to do blazingly fast diffs. That said, tumult is the slowest part of wags (meaning it is just blazingly fast instead of obscenely and indecently fast), so only use it where you can afford a performmance hit.\x0a  </p>\x0a\x0a  <h2>Hello tumult</h2>\x0a\x0a  <h2>Stability in tumult</h2>\x0a\x0a  <p>While tumult will run a diff every time its event is triggered, if you don't tear down a node, its nodes will merrily putter along with whatever events you send them. This means that you can trigger tumult events <i>only</i> when you need to change the shape of the graph.</p>\x0a\x0a  <h2>Feeling lucky</h2>\x0a\x0a  <p>So far, we have only seen the <code>DiffMe</code> instruction sent to tumult. There is another instruction you can send called <code>FeelingLucky</code>. <code>FeelingLucky</code> will attempt to perform its instruction and be a no-op if it is incoherent with respect to the graph. Careful with this, though! <code>DiffMe</code> guarantees that whatever you send to tumult will be what's rendered from your loudspeaker. Too many <code>FeelingLucky</code>-s, on the other hand, can lead to bugs where you're not quite sure anymore <i>what</i> is playing. That said, <code>FeelingLucky</code> is grotesquely fast, especially for larger graphs. So if it makes sense to use it, use it!</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>In this section, we learned how to use tumult to create truly dynamic audio graphs that allow you to fine-tune the speed-versus-dynamism tradeoff in various ways.</p>\x0a  <p>In the next section, we'll look at how to create audio graphs via an <a ~next~ style=\"cursor:pointer;\">imperative API that more closely resembles Web Audio while providing additional type-safety benefits</a>.</p>\x0a</div>";
                      }
                  })()()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "next";
                      }
                  }))(px)({
                      next: FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(WAGS_Example_Docs_Types.Imperative.value))(WAGS_Example_Docs_Util.scrollToTop)))))
                  });
              };
          };
      };
  };
  exports["portals"] = portals;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Pursx1"] = $PS["WAGS.Example.Docs.Pursx1"] || {};
  var exports = $PS["WAGS.Example.Docs.Pursx1"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];                
  var px = Type_Proxy["Proxy"].value;
  var pursx1 = function (v) {
      return function (dpage) {
          return function (v1) {
              return function (v2) {
                  return Deku_Pursx.makePursx({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Audio Worklets</h1>\x0a\x0a  <h2>Supercharging our audio experiences</h2>\x0a\x0a  <p>The Web Audio lets you do basically anything, but when anything isn't enough, there are custom Audio Worklets. </p>\x0a\x0a  <p>Custom audio worklets come in a few shapes an sizes:</p>\x0a\x0a  <ul>\x0a    <li>You can <a href=\"https://developer.chrome.com/blog/audio-worklet/\">write your own in JavaScript</a>. While this is ok for small PoCs, it will get really slow really quick.</li>\x0a    <li>You can compile your favorite C/C++/Rust audio processors to <a href=\"https://developer.chrome.com/blog/audio-worklet-design-pattern/#using-audio-worklet-with-webassembly\">web assembly</a>. The helpful folks at Google have created many examples that do exactly this, and you can pilfer them for fun and profit.</li>\x0a    <li>My go-to solution is Faust. <a href=\"https://faust.grame.fr/\">Faust</a> is the greatest audio project on Earth, and let's you build very performant audio processors with an expressive and concise syntax. Faust's <a href=\"https://webaudioconf.com/posts/2017_EA_60/\">Web Audio integration</a> is a one-liner from the command line.</li>\x0a  </ul>\x0a\x0a  <p>In this example, we'll use Faust to create a three custom audio units and wire them together using Wags. The units are:</p>\x0a\x0a  <ul>\x0a    <li>A wicked sawtooth synth.</li>\x0a    <li>A kickin' comb filter.</li>\x0a    <li>Freeverb, the free-software-world's favorite reverb!</li>\x0a  </ul>\x0a\x0a  <h2>Faust</h2>\x0a\x0a  <p>Here are our three faust examples:</p>\x0a\x0a  <h3>Sawtooth</h3>\x0a\x0a  <h3>Comb filter</h3>\x0a\x0a  <h3>Freeverb</h3>\x0a\x0a  <h3>Compilation</h3>\x0a\x0a  We can compile each example using the following commands. Each command creates a self-contained JavaScript file, so all we need to do is link to it in wags-land.\x0a\x0a  <pre><code>placeholder</code></pre>\x0a\x0a  <h2>Wags</h2>\x0a\x0a  <p>Wags provides a type-safe interface for declaring the API of Audio Worklets. While it's your job to make sure the API is in fact the actual API of the worklet, assuming this is correct, wags will enforce it for you. Let's see how in the following example. Here's the code:</p>\x0a\x0a  <pre><code>placeholder</code></pre>\x0a\x0a  <p>And here's the result:</p>\x0a\x0a  <blockquote>placeholder</blockquote>\x0a\x0a  <p>You can try it yourself by <a>following this trypurescript link.</a></p>\x0a\x0a  <h3>The API contract</h3>\x0a\x0a  <p>The <code>InitializeAudioWorklet</code> API contract is defined like so:</p>\x0a\x0a  <pre><code>InitializeAudioWorkletNode\x0a  { name :: Proxy name\x0a  , numberOfInputs :: numberOfInputs\x0a  , numberOfOutputs :: numberOfOutputs\x0a  , outputChannelCount :: outputChannelCount\x0a  , parameterData :: { | parameterData }\x0a  , processorOptions :: { | processorOptions }\x0a  }</code></pre>\x0a\x0a  <p>And here is how the APIs parameters are used:</p>\x0a\x0a  <table>\x0a    <tr>\x0a      <th>Parameter</th>\x0a      <th>Description</th>\x0a    </tr>\x0a    <tr>\x0a      <td><code>name</code></td>\x0a      <td>The name of the worklet as defined in the JS output. When in doubt, check the JS produced by faust!</td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>numerOfInputs</code></td>\x0a      <td>How many inputs does the node take? Note that this is <i>not</i> the number of channels, but rather the number of distinct inputs, like in a merger node.</td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>numerOfOutputs</code></td>\x0a      <td>How many outputs does the node produce? Note that this is <i>not</i> the number of channels, but rather the number of distinct outputs, like in a splitter node.</td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>outputChannelCount</code></td>\x0a      <td>How many channels are in each output? This is defined using a tuple of type-level numbers.</td>\x0a    </tr>\x0a    <tr>\x0a      <td><code>parameterData</code></td>\x0a      <td>Initial parameters for the audio node. This will also define what parameters can be sent to it via events (the record gets flipped to a <a href=\"https://github.com/natefaubion/purescript-variant\"><code>Variant</code></a> when it is an event).</td>\x0a    </tr>\x0a  </table>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>In this section, we created three audio worklet nodes using Faust and used them in the Web Audio API via wags. There is active work going on to bundle all this into a single toolchain so that Faust can be written directly in PureScript and automatically read as an Audio Worklet by wags. Until that happens, though, this is a great solution: just make sure to get the parameter names right across the language barrier! No amonut of type-safety can save you there \ud83d\ude05</p>\x0a  <p>In the next section, we'll look at how to create <a ~next~ style=\"cursor:pointer;\">mutable state in a wags graph</a>.</p>\x0a</div>";
                      }
                  })()()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "next";
                      }
                  }))(px)({
                      next: FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(WAGS_Example_Docs_Types.Events.value))(WAGS_Example_Docs_Util.scrollToTop)))))
                  });
              };
          };
      };
  };
  exports["pursx1"] = pursx1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Pursx2"] = $PS["WAGS.Example.Docs.Pursx2"] || {};
  var exports = $PS["WAGS.Example.Docs.Pursx2"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var pursx2 = function (v) {
      return function (dpage) {
          return function (v1) {
              return function (v2) {
                  return Deku_Pursx["makePursx'"]({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Imperative API</h1>\x0a\x0a  <h2>Like JavaScript, but PureScript</h2>\x0a  <p>\x0a    If you're coming from the JavaScript or TypeScript world, or if you're a fan of monadic <code>do</code> notation, you may enjoy building things step-by-step rather than constructing large declarative structures. If you're that sort of person, this section is for you!\x0a  </p>\x0a\x0a  <h2>Parting shot</h2>\x0a  <p>Thanks for checking out wags! We want it to be the most ergonomimc, expressive, and performant Web Audio API on your side of the Mississippi. It certainly is for me, and as I'm in Finland, I'm on <i>both sides</i> of the Mississippi, so you can't beat that! If you have any questions, comments, concerns or would just like to say \"hi!\", please check out the <a href=\"https://github.com/mikesol/purescript-wags\">Wags GitHub Repo</a> or the <a href=\"https://purescript.org/chat\">PureScript Discord's music channel</a>. Happy wagging!</p>\x0a</div>";
                      }
                  })({
                      reflectSymbol: function () {
                          return "~";
                      }
                  })()()(Deku_Pursx.pursxToElementNil)(Type_Proxy["Proxy"].value)(px)({});
              };
          };
      };
  };
  exports["pursx2"] = pursx2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Subgraph.SliderEx"] = $PS["WAGS.Example.Docs.Subgraph.SliderEx"] || {};
  var exports = $PS["WAGS.Example.Docs.Subgraph.SliderEx"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var ConvertableOptions = $PS["ConvertableOptions"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_Max = $PS["Deku.DOM.Attr.Max"];
  var Deku_DOM_Attr_Min = $PS["Deku.DOM.Attr.Min"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Attr_OnInput = $PS["Deku.DOM.Attr.OnInput"];
  var Deku_DOM_Attr_Step = $PS["Deku.DOM.Attr.Step"];
  var Deku_DOM_Attr_Value = $PS["Deku.DOM.Attr.Value"];
  var Deku_DOM_Attr_Xtype = $PS["Deku.DOM.Attr.Xtype"];
  var Deku_DOM_Elt_Button = $PS["Deku.DOM.Elt.Button"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_DOM_Elt_Input = $PS["Deku.DOM.Elt.Input"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Random = $PS["Effect.Random"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var FRP_Event_Time = $PS["FRP.Event.Time"];
  var FRP_Event_VBus = $PS["FRP.Event.VBus"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var txt = "module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Foldable (oneOf, oneOfMap)\x0aimport Data.Maybe (Maybe(..), maybe)\x0aimport Data.Tuple (fst)\x0aimport Data.Tuple.Nested ((/\\))\x0aimport Deku.Attribute (attr, cb, (:=))\x0aimport Deku.Control (blank, switcher, text, text_)\x0aimport Deku.Core (Element)\x0aimport Deku.DOM as D\x0aimport Deku.Toplevel (runInBody)\x0aimport Effect (Effect)\x0aimport Effect.Aff (launchAff_)\x0aimport Effect.Class (liftEffect)\x0aimport Effect.Random as Random\x0aimport FRP.Behavior (Behavior, behavior, sampleBy)\x0aimport FRP.Event (create, fold, makeEvent, subscribe)\x0aimport FRP.Event.Class (bang)\x0aimport FRP.Event.Time (delay)\x0aimport FRP.Event.VBus (V, vbus)\x0aimport Type.Proxy (Proxy(..))\x0aimport WAGS.Control (gain_, playBuf)\x0aimport WAGS.Core (Channel(..))\x0aimport WAGS.Interpret (bracketCtx, decodeAudioDataFromUri)\x0aimport WAGS.Parameter (bangOn)\x0aimport WAGS.Run (run2_)\x0aimport WAGS.WebAPI (BrowserAudioBuffer)\x0a\x0atype StartStop = V (start :: Unit, stop :: Effect Unit)\x0atype UIEvents = V (startStop :: StartStop, slider :: Unit)\x0a\x0abell =\x0a  \"https://freesound.org/data/previews/339/339810_5121236-lq.mp3\"\x0a    :: String\x0a\x0arandom :: Behavior Number\x0arandom = behavior \\e ->\x0a  makeEvent \\k -> subscribe e \\f ->\x0a    Random.random >>= k <<< f\x0a\x0amain :: Effect Unit\x0amain = do\x0a  { push, event } <- create\x0a  runInBody (switcher scene event)\x0a  push Nothing\x0a  launchAff_ $ bracketCtx\x0a    \\ctx -> decodeAudioDataFromUri ctx bell >>= liftEffect\x0a      <<< push\x0a      <<< Just\x0a  where\x0a  scene\x0a    :: forall lock payload\x0a     . Maybe BrowserAudioBuffer\x0a    -> Element lock payload\x0a  scene = maybe (D.div_ [ text_ \"Loading...\" ]) \\buffer ->\x0a    D.div_ $ vbus (Proxy :: _ UIEvents) \\push event -> do\x0a      let\x0a        startE = bang unit <|> event.startStop.start\x0a        sl = sampleBy (/\\) random\x0a          $ fold (\\_ b -> b + 1) event.slider 0\x0a        music = run2_\x0a          [ gain_ 1.0 $ map\x0a              ( \\i ->\x0a                  oneOf\x0a                    [ bang $ Sound $ playBuf\x0a                        { buffer: buffer, playbackRate: 0.7 + (fst i) * 2.0 }\x0a                        bangOn\x0a                    , delay 5000 $ bang $ Silence\x0a                    ]\x0a              )\x0a              sl\x0a          ]\x0a      D.div_\x0a        [ D.div_\x0a            [ text_ \"Slide me!\"\x0a            , D.input\x0a                ( oneOfMap bang\x0a                    [ D.Xtype := \"range\"\x0a                    , D.Min := \"0\"\x0a                    , D.Max := \"100\"\x0a                    , D.Step := \"1\"\x0a                    , D.Value := \"50\"\x0a                    , D.OnInput := cb (const (push.slider unit))\x0a                    ]\x0a                )\x0a                blank\x0a            ]\x0a        , D.button\x0a            ( oneOfMap (map (attr D.OnClick <<< cb <<< const))\x0a                [ startE $> (music >>= push.startStop.stop)\x0a                , event.startStop.stop <#>\x0a                    (_ *> push.startStop.start unit)\x0a                ]\x0a            )\x0a            [ text $ oneOf\x0a                [ startE $> \"Turn on\"\x0a                , event.startStop.stop $> \"Turn off\"\x0a                ]\x0a            ]\x0a        ]\x0a";
  var random = FRP_Behavior.behavior(function (e) {
      return FRP_Event.makeEvent(function (k) {
          return FRP_Event.subscribe(e)(function (f) {
              return function __do() {
                  var $6 = Effect_Random.random();
                  return k(f($6))();
              };
          });
      });
  });
  var px = Type_Proxy["Proxy"].value;
  var bell = "https://freesound.org/data/previews/339/339810_5121236-lq.mp3";
  var sgSliderEx = function (ccb) {
      return function (v) {
          return function (ev) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<section>\x0a  <h2>Hello subgraph</h2>\x0a\x0a  <p>Subgraphs have the type <code>Event (Event (Channel outputChannels lock payload))</code>. Streaming audio is a data type with two constructors: <code>Sound (Node outputChannels lock payload)</code> to create a subgraph and <code>Silence</code> to turn it off. The inner event listens for sound/silence, and the outer event adds subgraphs to the scene. You can create as many subgraphs as you like: wags automatically frees up resources when you send the <code>Silence</code> event. Note that, once you turn a subraph off with <code>Silence</code>, you can't turn it back on again. In this case, just create a new subgraph.</p>\x0a\x0a  <p>Here's a simple subgraph that is connected to a slider. As you slide the slider, new nodes are provisioned. Each one has a pseudo-random pitch.</p>\x0a\x0a  <pre><code>@txt@</code></pre>\x0a  @ex1@\x0a\x0a</section>\x0a";
                  }
              })({
                  reflectSymbol: function () {
                      return "@";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                  reflectSymbol: function () {
                      return "txt";
                  }
              }))({
                  reflectSymbol: function () {
                      return "ex1";
                  }
              }))(Type_Proxy["Proxy"].value)(px)({
                  txt: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.text_(txt)),
                  ex1: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event_VBus.vbus()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "slider";
                      }
                  })()()(FRP_Event_VBus.vbusCons1({
                      reflectSymbol: function () {
                          return "startStop";
                      }
                  })()()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "loading";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "start";
                      }
                  })()()(FRP_Event_VBus.vbusCons2({
                      reflectSymbol: function () {
                          return "stop";
                      }
                  })()()(FRP_Event_VBus.vbusNil)()()()())()()()())()()()())(FRP_Event_VBus.vbusNil)()()()())()()()())(Type_Proxy["Proxy"].value)(function (push) {
                      return function (event) {
                          var startE = Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Data_Unit.unit))(event.startStop.start);
                          var sl = FRP_Behavior.sampleBy(FRP_Event.eventIsEvent)(Data_Tuple.Tuple.create)(random)(FRP_Event_Class.fold(FRP_Event.eventIsEvent)(function (v1) {
                              return function (b) {
                                  return b + 1 | 0;
                              };
                          })(event.slider)(0));
                          var music = function (buffer) {
                              return [ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixEventEventChannelAudib(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)(Data_Functor.map(FRP_Event.functorEvent)(function (i) {
                                  return Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ FRP_Event_Class.bang(FRP_Event.eventIsEvent)(new WAGS_Core.Sound(WAGS_Control.playBuf(WAGS_Common.initialPlayBufRecord(ConvertableOptions.convertOptionsWithDefaultsRecord(ConvertableOptions.convertOptionsRecord()(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsCons(ConvertableOptions.convertRecordOptionsNil)(WAGS_Common.convertOptionPlayBufOptio3)()()()({
                                      reflectSymbol: function () {
                                          return "playbackRate";
                                      }
                                  }))(WAGS_Common.convertOptionPlayBufOptio)()()()({
                                      reflectSymbol: function () {
                                          return "buffer";
                                      }
                                  })))(ConvertableOptions.defaultsRecord()())))({
                                      buffer: buffer,
                                      playbackRate: 0.7 + Data_Tuple.fst(i) * 2.0
                                  })(WAGS_Parameter.bangOn()))), FRP_Event_Time.delay(5000)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(WAGS_Core.Silence.value)) ]);
                              })(sl)) ];
                          };
                          return Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_Control.text_("Slide me!"), Deku_DOM_Elt_Input.input(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent))([ Deku_Attribute.attr(Deku_DOM_Attr_Xtype.attrInput_XtypeString)(Deku_DOM_Attr_Xtype.Xtype.value)("range"), Deku_Attribute.attr(Deku_DOM_Attr_Min.attrInput_MinString)(Deku_DOM_Attr_Min.Min.value)("0"), Deku_Attribute.attr(Deku_DOM_Attr_Max.attrInput_MaxString)(Deku_DOM_Attr_Max.Max.value)("100"), Deku_Attribute.attr(Deku_DOM_Attr_Step.attrInput_StepString)(Deku_DOM_Attr_Step.Step.value)("1"), Deku_Attribute.attr(Deku_DOM_Attr_Value.attrInput_ValueString)(Deku_DOM_Attr_Value.Value.value)("50"), Deku_Attribute.attr(Deku_DOM_Attr_OnInput.attrOnInputCb)(Deku_DOM_Attr_OnInput.OnInput.value)(Deku_Attribute.cb(Data_Function["const"](push.slider(Data_Unit.unit)))) ]))(Deku_Control.blank) ]), Deku_DOM_Elt_Button.button(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(Data_Functor.map(FRP_Event.functorEvent)((function () {
                              var $7 = Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value);
                              return function ($8) {
                                  return $7(Deku_Attribute.cb(Data_Function["const"]($8)));
                              };
                          })()))([ Data_Functor.voidLeft(FRP_Event.functorEvent)(event.startStop.loading)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)), Data_Functor.mapFlipped(FRP_Event.functorEvent)(event.startStop.stop)(function (v1) {
                              return Control_Apply.applySecond(Effect.applyEffect)(v1)(Control_Apply.applySecond(Effect.applyEffect)(ccb(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(push.startStop.start(Data_Unit.unit)));
                          }), Data_Functor.mapFlipped(FRP_Event.functorEvent)(FRP_Event_Class.biSampleOn(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(Data_Functor.map(FRP_Event.functorEvent)(function (v1) {
                              return v1.value0;
                          })(ev)))(Data_Functor.voidLeft(FRP_Event.functorEvent)(startE)(Control_Category.identity(Control_Category.categoryFn))))(function (cncl) {
                              return function __do() {
                                  cncl();
                                  push.startStop.loading(Data_Unit.unit)();
                                  var fib = Effect_Aff.launchAff(Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.context(Effect_Aff.monadEffectAff))(function (ctx) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.constant0Hack(Effect_Aff.monadEffectAff)(ctx))(function (c0h) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(WAGS_Interpret.decodeAudioDataFromUri(ctx)(bell))(function (buffer) {
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                  var res$prime = WAGS_Run.run2_(music(buffer))();
                                                  var res = Control_Apply.applySecond(Effect.applyEffect)(Control_Apply.applySecond(Effect.applyEffect)(res$prime)(c0h))(WAGS_Interpret.close(Effect_Class.monadEffectEffect)(ctx));
                                                  push.startStop.stop(res)();
                                                  return res;
                                              });
                                          });
                                      });
                                  }))();
                                  ccb(function __do() {
                                      push.startStop.start(Data_Unit.unit)();
                                      return Effect_Aff.launchAff_(WAGS_Example_Docs_Util.raceSelf(fib))();
                                  })();
                                  return Data_Unit.unit;
                              };
                          }) ]))([ Deku_Control.text(Data_Foldable.oneOf(Data_Foldable.foldableArray)(FRP_Event.plusEvent)([ Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"]("Turn off"))(event.startStop.stop), Data_Functor.map(FRP_Event.functorEvent)(Data_Function["const"]("Turn on"))(startE) ])) ]) ]);
                      };
                  }))
              });
          };
      };
  };
  exports["sgSliderEx"] = sgSliderEx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs.Subgraphs"] = $PS["WAGS.Example.Docs.Subgraphs"] || {};
  var exports = $PS["WAGS.Example.Docs.Subgraphs"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Type_Equality = $PS["Type.Equality"];
  var Type_Proxy = $PS["Type.Proxy"];
  var WAGS_Common = $PS["WAGS.Common"];
  var WAGS_Control = $PS["WAGS.Control"];
  var WAGS_Core = $PS["WAGS.Core"];
  var WAGS_Example_Docs_Subgraph_SliderEx = $PS["WAGS.Example.Docs.Subgraph.SliderEx"];
  var WAGS_Example_Docs_Util = $PS["WAGS.Example.Docs.Util"];
  var WAGS_Interpret = $PS["WAGS.Interpret"];
  var WAGS_Parameter = $PS["WAGS.Parameter"];
  var WAGS_Run = $PS["WAGS.Run"];                
  var px = Type_Proxy["Proxy"].value;
  var subgraphs = function (cca$prime) {
      return function (dpage) {
          return function (ssp) {
              return function (ev) {
                  var ccb = WAGS_Example_Docs_Util.ccassp(cca$prime)(ssp);
                  return Deku_Pursx.makePursx({
                      reflectSymbol: function () {
                          return "<div>\x0a  <h1>Subgraphs</h1>\x0a\x0a  <h2>Making audio even more dynamic</h2>\x0a  <p>\x0a    When we're creating video games or other types of interactive work, it's rare that we'll be able to anticipate the exact web audio graph we'll need for an entire session. As an example, imagine that in a video game a certain sound effects accompany various characters, and those characters come in and out based on your progress through the game. One way to solve this would be to anticipate the maximum number of characters that are present in a game and do a round-robin assignment of nodes in the audio graph as characters enter and leave your game. But sometimes that's not ergonomic, and in certain cases its downright inefficient. Another downside is that it does not allow for specialization of the web audio graph based on new data, like for example a character to play a custom sound once you've earned a certain badge.\x0a  </p>\x0a\x0a  <p>\x0a    Subgraphs fix this problem. They provide a concise mechansim to dynamically insert audio graphs based on events.\x0a  </p>\x0a\x0a  ~suby~\x0a\x0a  <h2>Go forth and be brilliant!</h2>\x0a  <p>Thus ends the first version of the wags documentation. Applause is always welcome ~appl~! Alas, some features remain undocumented, like audio worklets and an imperative API. At some point I hope to document all of these, but hopefully this should be enough to get anyone interested up and running. If you need to use any of those features before I document them, ping me on the <a href=\"https://purescript.org/chat\">PureScript Discord</a>. Otherwise, happy music making with Wags!</p>\x0a</div>";
                      }
                  })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil)({
                      reflectSymbol: function () {
                          return "suby";
                      }
                  }))({
                      reflectSymbol: function () {
                          return "appl";
                      }
                  }))(px)({
                      appl: Deku_Pursx.nut(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Util.audioWrapperSpan("\ud83d\udc4f")(ev)(ccb)(function (ctx) {
                          return WAGS_Interpret.decodeAudioDataFromUri(ctx)("https://freesound.org/data/previews/277/277021_1402315-lq.mp3");
                      })(function (ctx) {
                          return function (buf) {
                              return WAGS_Run.run2(ctx)([ WAGS_Control.gain_(WAGS_Common.initialGainNumber)(WAGS_Core.mixArrayNodeAudible(Type_Equality.refl)(Type_Equality.refl)(Type_Equality.refl))(1.0)([ WAGS_Control.loopBuf(WAGS_Common.initialLoopBufBrowserAudi)(buf)(WAGS_Parameter.bangOn()) ]) ]);
                          };
                      })),
                      suby: Deku_Pursx.nut(Deku_Control.plantElementEventEventStr(Type_Equality.refl)(Type_Equality.refl))(WAGS_Example_Docs_Subgraph_SliderEx.sgSliderEx(ccb)(dpage)(ev))
                  });
              };
          };
      };
  };
  exports["subgraphs"] = subgraphs;
})(PS);
(function(exports) {
  "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var body = (function () {
      var $10 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($11) {
          return $10($foreign["_body"]($11));
      };
  })();
  exports["body"] = body;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toElement = Unsafe_Coerce.unsafeCoerce;
  exports["toElement"] = toElement;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["WAGS.Example.Docs"] = $PS["WAGS.Example.Docs"] || {};
  var exports = $PS["WAGS.Example.Docs"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM_Attr_OnClick = $PS["Deku.DOM.Attr.OnClick"];
  var Deku_DOM_Attr_Style = $PS["Deku.DOM.Attr.Style"];
  var Deku_DOM_Elt_A = $PS["Deku.DOM.Elt.A"];
  var Deku_DOM_Elt_Div = $PS["Deku.DOM.Elt.Div"];
  var Deku_DOM_Elt_Span = $PS["Deku.DOM.Elt.Span"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Equality = $PS["Type.Equality"];
  var WAGS_Example_Docs_Component = $PS["WAGS.Example.Docs.Component"];
  var WAGS_Example_Docs_Effects = $PS["WAGS.Example.Docs.Effects"];
  var WAGS_Example_Docs_Events = $PS["WAGS.Example.Docs.Events"];
  var WAGS_Example_Docs_FixFan = $PS["WAGS.Example.Docs.FixFan"];
  var WAGS_Example_Docs_HelloWorld = $PS["WAGS.Example.Docs.HelloWorld"];
  var WAGS_Example_Docs_Intro = $PS["WAGS.Example.Docs.Intro"];
  var WAGS_Example_Docs_MultiChannel = $PS["WAGS.Example.Docs.MultiChannel"];
  var WAGS_Example_Docs_Portals = $PS["WAGS.Example.Docs.Portals"];
  var WAGS_Example_Docs_Pursx1 = $PS["WAGS.Example.Docs.Pursx1"];
  var WAGS_Example_Docs_Pursx2 = $PS["WAGS.Example.Docs.Pursx2"];
  var WAGS_Example_Docs_Subgraphs = $PS["WAGS.Example.Docs.Subgraphs"];
  var WAGS_Example_Docs_Types = $PS["WAGS.Example.Docs.Types"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var TopLevelSg = function (x) {
      return x;
  };
  var newtypeTopLevelSg_ = {
      Coercible0: function () {
          return undefined;
      }
  };
  var eqTopLevelSg = {
      eq: Data_Function.on(Data_Eq.eq(WAGS_Example_Docs_Types.eqPage))((function () {
          var $40 = Data_Newtype.unwrap();
          return function ($41) {
              return (function (v) {
                  return v.page;
              })($40($41));
          };
      })())
  };
  var hashableTopLevelSg = {
      hash: (function () {
          var $42 = Data_Hashable.hash(WAGS_Example_Docs_Types.hashablePage);
          var $43 = Data_Newtype.unwrap();
          return function ($44) {
              return $42((function (v) {
                  return v.page;
              })($43($44)));
          };
      })(),
      Eq0: function () {
          return eqTopLevelSg;
      }
  };
  var scene = function (push) {
      return function (event$prime) {
          var page = function (v) {
              var go = function (v1) {
                  if (v1 instanceof WAGS_Example_Docs_Types.Intro) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_Intro.intro(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.HelloWorld) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_HelloWorld.helloWorld(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.FixFan) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_FixFan.fixFan(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.AudioUnits) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_Component.components(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.AudioWorklets) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_Pursx1.pursx1(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.Events) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_Events.events(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.State) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_Effects.effects(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.Imperative) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_Pursx2.pursx2(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.MultiChannel) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_MultiChannel.multiChannel(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.Subgraph) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_Subgraphs.subgraphs(v.setCancellation)(v.setPage)));
                  };
                  if (v1 instanceof WAGS_Example_Docs_Types.Tumult) {
                      return Deku_DOM_Elt_Div.div_(Deku_Control.plantEventElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event.bus(WAGS_Example_Docs_Portals.portals(v.setCancellation)(v.setPage)));
                  };
                  throw new Error("Failed pattern match at WAGS.Example.Docs (line 148, column 5 - line 148, column 66): " + [ v1.constructor.name ]);
              };
              return go(v.page);
          };
          var event = FRP_Event_Class.fold(FRP_Event.eventIsEvent)(function (v) {
              if (v instanceof WAGS_Example_Docs_Types.ChangePage) {
                  return function (v1) {
                      return {
                          prevPage: new Data_Maybe.Just(v1.curPage),
                          curPage: v.value0,
                          cancel: v1.cancel,
                          pageChange: true
                      };
                  };
              };
              if (v instanceof WAGS_Example_Docs_Types.SetCancelation) {
                  return function (v1) {
                      return {
                          cancel: v.value0,
                          pageChange: false,
                          curPage: v1.curPage,
                          prevPage: v1.prevPage
                      };
                  };
              };
              throw new Error("Failed pattern match at WAGS.Example.Docs (line 138, column 7 - line 140, column 75): " + [ v.constructor.name ]);
          })(event$prime)({
              prevPage: Data_Maybe.Nothing.value,
              curPage: WAGS_Example_Docs_Types.Intro.value,
              cancel: Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit),
              pageChange: true
          });
          return [ Deku_DOM_Elt_Div.div_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return Deku_DOM_Elt_Span.span_(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))([ Deku_DOM_Elt_A.a(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(Control_Alt.alt(FRP_Event.altEvent)(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(FRP_Event.plusEvent)(FRP_Event_Class.bang(FRP_Event.eventIsEvent))([ Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](push(new WAGS_Example_Docs_Types.ChangePage(v.value0))))), Deku_Attribute.attr(Deku_DOM_Attr_Style.attrA_StyleString)(Deku_DOM_Attr_Style.Style.value)("cursor:pointer;") ]))(Data_Functor.map(FRP_Event.functorEvent)(function (v1) {
                  return Deku_Attribute.attr(Deku_DOM_Attr_OnClick.attrOnClickCb)(Deku_DOM_Attr_OnClick.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](function __do() {
                      v1.cancel();
                      return push(new WAGS_Example_Docs_Types.ChangePage(v.value0))();
                  })));
              })(Data_Filterable.filter(FRP_Event.filterableEvent)((function () {
                  var $45 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                  return function ($46) {
                      return $45((function (v1) {
                          return v1.pageChange;
                      })($46));
                  };
              })())(event))))([ Deku_Control.text_(v.value1.value0) ]), Deku_DOM_Elt_Span.span(Deku_Control.plantArrayElementEventEve(Type_Equality.refl)(Type_Equality.refl))(FRP_Event_Class.bang(FRP_Event.eventIsEvent)(Deku_Attribute.attr(Deku_DOM_Attr_Style.attrSpan_StyleString)(Deku_DOM_Attr_Style.Style.value)((function () {
                  if (v.value1.value1) {
                      return "";
                  };
                  return "display:none;";
              })())))([ Deku_Control.text_(" | ") ]) ]);
          })([ new Data_Tuple.Tuple(WAGS_Example_Docs_Types.Intro.value, new Data_Tuple.Tuple("Home", true)), new Data_Tuple.Tuple(WAGS_Example_Docs_Types.HelloWorld.value, new Data_Tuple.Tuple("Hello world", true)), new Data_Tuple.Tuple(WAGS_Example_Docs_Types.FixFan.value, new Data_Tuple.Tuple("Array, fan, and fix", true)), new Data_Tuple.Tuple(WAGS_Example_Docs_Types.AudioUnits.value, new Data_Tuple.Tuple("Audio units", true)), new Data_Tuple.Tuple(WAGS_Example_Docs_Types.Events.value, new Data_Tuple.Tuple("Events", true)), new Data_Tuple.Tuple(WAGS_Example_Docs_Types.State.value, new Data_Tuple.Tuple("State", true)), new Data_Tuple.Tuple(WAGS_Example_Docs_Types.Subgraph.value, new Data_Tuple.Tuple("Subgraphs", false)) ])), Deku_DOM_Elt_Div.div_(Deku_Control.plantEventEventStreamingE(Type_Equality.refl)(Type_Equality.refl))(Deku_Control.switcher(function (v) {
              return page({
                  page: v.curPage,
                  setPage: function ($47) {
                      return push(WAGS_Example_Docs_Types.ChangePage.create($47));
                  },
                  setCancellation: function ($48) {
                      return push(WAGS_Example_Docs_Types.SetCancelation.create($48));
                  }
              });
          })(Data_Filterable.filter(FRP_Event.filterableEvent)(function (v) {
              return v.pageChange;
          })(event))) ];
      };
  };
  var p2tl = function (page) {
      return {
          page: page,
          setPage: Data_Monoid.mempty(Data_Monoid.monoidFn(Effect.monoidEffect(Data_Monoid.monoidUnit))),
          setCancellation: Data_Monoid.mempty(Data_Monoid.monoidFn(Effect.monoidEffect(Data_Monoid.monoidUnit)))
      };
  };
  var main = function __do() {
      var b$prime = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.body)();
      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Web_HTML_HTMLElement.toElement)(b$prime))(function (b) {
          return function __do() {
              var ffi = Deku_Interpret.makeFFIDOMSnapshot();
              var v = FRP_Event.create();
              var evt = Deku_Control.dekuA(b)(scene(v.push)(v.event))(Deku_Interpret.effectfulDOMInterpret);
              Data_Functor["void"](Effect.functorEffect)(FRP_Event.subscribe(evt)(function (i) {
                  return i(ffi);
              }))();
              return v.push(new WAGS_Example_Docs_Types.ChangePage(WAGS_Example_Docs_Types.Intro.value))();
          };
      })();
  };
  exports["TopLevelSg"] = TopLevelSg;
  exports["p2tl"] = p2tl;
  exports["scene"] = scene;
  exports["main"] = main;
  exports["newtypeTopLevelSg_"] = newtypeTopLevelSg_;
  exports["eqTopLevelSg"] = eqTopLevelSg;
  exports["hashableTopLevelSg"] = hashableTopLevelSg;
})(PS);
PS["WAGS.Example.Docs"].main();